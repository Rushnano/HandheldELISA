
CheapStat_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000667c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00802000  0000667c  00006730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014e  00802146  00802146  00006876  2**0
                  ALLOC
  3 .eeprom       0000013f  00810000  00810000  00006876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  000069b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000005b9  00000000  00000000  00006a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b03  00000000  00000000  0000702e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d51  00000000  00000000  0000bb31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d7d  00000000  00000000  0000c882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00010600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f02  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003240  00000000  00000000  000128f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00015b32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__ctors_end>
       4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
       8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
       c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      10:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      14:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      18:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      1c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      20:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      24:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      28:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      2c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      30:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      34:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      38:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      3c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      40:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      44:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      48:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      4c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      50:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      54:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      58:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      5c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      60:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_25>
      68:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      6c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      70:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      74:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      78:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      7c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      80:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      84:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      88:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      8c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      90:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      94:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      98:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      9c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      a0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      a4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      a8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      ac:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      b0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      b4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      b8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      bc:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      c0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      c4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      c8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      cc:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      d0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      d4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      d8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      dc:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      e0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      e4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      e8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      ec:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      f0:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      f4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      f8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
      fc:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     100:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     104:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     108:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     10c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     110:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     114:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     118:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     11c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     120:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     124:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     128:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     12c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     130:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     134:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     138:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     13c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     140:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     144:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     148:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     14c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     150:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     154:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     158:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     15c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     160:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     164:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     168:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     16c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     170:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     174:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
     178:	05 a8       	ldd	r0, Z+53	; 0x35
     17a:	4c cd       	rjmp	.-1384   	; 0xfffffc14 <__eeprom_end+0xff7efad5>
     17c:	b2 d4       	rcall	.+2404   	; 0xae2 <buttonHandler+0x3ca>
     17e:	4e b9       	out	0x0e, r20	; 14
     180:	38 36       	cpi	r19, 0x68	; 104
     182:	a9 02       	muls	r26, r25
     184:	0c 50       	subi	r16, 0x0C	; 12
     186:	b9 91       	ld	r27, Y+
     188:	86 88       	ldd	r8, Z+22	; 0x16
     18a:	08 3c       	cpi	r16, 0xC8	; 200
     18c:	a6 aa       	std	Z+54, r10	; 0x36
     18e:	aa 2a       	or	r10, r26
     190:	be 00       	.word	0x00be	; ????
     192:	00 00       	nop
     194:	80 3f       	cpi	r24, 0xF0	; 240

00000196 <LcdCustomChar>:
     196:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     1a6:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     1b6:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1c6:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1d6:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     1e6:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     1fe:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     20e:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	df e2       	ldi	r29, 0x2F	; 47
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	18 be       	out	0x38, r1	; 56
     22c:	19 be       	out	0x39, r1	; 57
     22e:	1a be       	out	0x3a, r1	; 58
     230:	1b be       	out	0x3b, r1	; 59

00000232 <__do_copy_data>:
     232:	11 e2       	ldi	r17, 0x21	; 33
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e2       	ldi	r27, 0x20	; 32
     238:	ec e7       	ldi	r30, 0x7C	; 124
     23a:	f6 e6       	ldi	r31, 0x66	; 102
     23c:	02 c0       	rjmp	.+4      	; 0x242 <.do_copy_data_start>

0000023e <.do_copy_data_loop>:
     23e:	05 90       	lpm	r0, Z+
     240:	0d 92       	st	X+, r0

00000242 <.do_copy_data_start>:
     242:	a6 34       	cpi	r26, 0x46	; 70
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <.do_copy_data_loop>

00000248 <__do_clear_bss>:
     248:	12 e2       	ldi	r17, 0x22	; 34
     24a:	a6 e4       	ldi	r26, 0x46	; 70
     24c:	b1 e2       	ldi	r27, 0x21	; 33
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a4 39       	cpi	r26, 0x94	; 148
     254:	b1 07       	cpc	r27, r17
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
     258:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <main>
     25c:	0c 94 3c 33 	jmp	0x6678	; 0x6678 <_exit>

00000260 <__bad_interrupt>:
     260:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000264 <send_string>:


}

void send_string(char* string)
{
     264:	ac 01       	movw	r20, r24
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	07 c0       	rjmp	.+14     	; 0x278 <send_string+0x14>
	uint8_t i = 0;
	while(string[i]!='\0')
	{
		do{}
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     26a:	80 91 a1 08 	lds	r24, 0x08A1
     26e:	85 ff       	sbrs	r24, 5
     270:	fc cf       	rjmp	.-8      	; 0x26a <send_string+0x6>
		USART_PutChar(&USARTC0, string[i]);
     272:	e0 93 a0 08 	sts	0x08A0, r30
		i++;
     276:	2f 5f       	subi	r18, 0xFF	; 255
}

void send_string(char* string)
{
	uint8_t i = 0;
	while(string[i]!='\0')
     278:	fa 01       	movw	r30, r20
     27a:	e2 0f       	add	r30, r18
     27c:	f1 1d       	adc	r31, r1
     27e:	e0 81       	ld	r30, Z
     280:	ee 23       	and	r30, r30
     282:	99 f7       	brne	.-26     	; 0x26a <send_string+0x6>
		do{}
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, string[i]);
		i++;
	}
}
     284:	08 95       	ret

00000286 <__vector_25>:

}


ISR(USARTC0_RXC_vect)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	08 b6       	in	r0, 0x38	; 56
     290:	0f 92       	push	r0
     292:	09 b6       	in	r0, 0x39	; 57
     294:	0f 92       	push	r0
     296:	0a b6       	in	r0, 0x3a	; 58
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	18 be       	out	0x38, r1	; 56
     29e:	19 be       	out	0x39, r1	; 57
     2a0:	1a be       	out	0x3a, r1	; 58
     2a2:	af 92       	push	r10
     2a4:	bf 92       	push	r11
     2a6:	cf 92       	push	r12
     2a8:	df 92       	push	r13
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
	uint8_t i,j,type;
	USART_RXComplete(&USART_data);
     2ce:	85 e8       	ldi	r24, 0x85	; 133
     2d0:	92 e2       	ldi	r25, 0x22	; 34
     2d2:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
	if(USART_RXBufferData_Available(&USART_data))
     2d6:	85 e8       	ldi	r24, 0x85	; 133
     2d8:	92 e2       	ldi	r25, 0x22	; 34
     2da:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     2de:	88 23       	and	r24, r24
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <__vector_25+0x5e>
     2e2:	42 c1       	rjmp	.+644    	; 0x568 <__vector_25+0x2e2>
		type = USART_RXBuffer_GetByte(&USART_data);
     2e4:	85 e8       	ldi	r24, 0x85	; 133
     2e6:	92 e2       	ldi	r25, 0x22	; 34
     2e8:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
	else
		type = 0;
	//recieve profiles
	if(type == 'u')
     2ec:	85 37       	cpi	r24, 0x75	; 117
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <__vector_25+0x6c>
     2f0:	3b c1       	rjmp	.+630    	; 0x568 <__vector_25+0x2e2>
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	c9 2e       	mov	r12, r25
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	d9 2e       	mov	r13, r25
     2fa:	c5 e5       	ldi	r28, 0x55	; 85
     2fc:	d1 e2       	ldi	r29, 0x21	; 33
     2fe:	ee 24       	eor	r14, r14
     300:	ff 24       	eor	r15, r15
	{
		for(i = 0; i < PROFILES_LENGTH; i++)
     302:	8d e1       	ldi	r24, 0x1D	; 29
     304:	a8 2e       	mov	r10, r24
     306:	b1 2c       	mov	r11, r1
     308:	25 c1       	rjmp	.+586    	; 0x554 <__vector_25+0x2ce>
		{
			for(j = 0; j < 15; j++)
			{
				do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     30a:	85 e8       	ldi	r24, 0x85	; 133
     30c:	92 e2       	ldi	r25, 0x22	; 34
     30e:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     312:	85 e8       	ldi	r24, 0x85	; 133
     314:	92 e2       	ldi	r25, 0x22	; 34
     316:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     31a:	88 23       	and	r24, r24
     31c:	b1 f3       	breq	.-20     	; 0x30a <__vector_25+0x84>
				profiles[i].name[j] = USART_RXBuffer_GetByte(&USART_data);
     31e:	85 e8       	ldi	r24, 0x85	; 133
     320:	92 e2       	ldi	r25, 0x22	; 34
     322:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     326:	f8 01       	movw	r30, r16
     328:	81 93       	st	Z+, r24
     32a:	8f 01       	movw	r16, r30
	//recieve profiles
	if(type == 'u')
	{
		for(i = 0; i < PROFILES_LENGTH; i++)
		{
			for(j = 0; j < 15; j++)
     32c:	ec 17       	cp	r30, r28
     32e:	fd 07       	cpc	r31, r29
     330:	61 f7       	brne	.-40     	; 0x30a <__vector_25+0x84>
			{
				do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
				profiles[i].name[j] = USART_RXBuffer_GetByte(&USART_data);
			}
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     332:	85 e8       	ldi	r24, 0x85	; 133
     334:	92 e2       	ldi	r25, 0x22	; 34
     336:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     33a:	85 e8       	ldi	r24, 0x85	; 133
     33c:	92 e2       	ldi	r25, 0x22	; 34
     33e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     342:	88 23       	and	r24, r24
     344:	b1 f3       	breq	.-20     	; 0x332 <__vector_25+0xac>
			profiles[i].type = USART_RXBuffer_GetByte(&USART_data);
     346:	85 e8       	ldi	r24, 0x85	; 133
     348:	92 e2       	ldi	r25, 0x22	; 34
     34a:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     34e:	88 83       	st	Y, r24
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     350:	85 e8       	ldi	r24, 0x85	; 133
     352:	92 e2       	ldi	r25, 0x22	; 34
     354:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     358:	85 e8       	ldi	r24, 0x85	; 133
     35a:	92 e2       	ldi	r25, 0x22	; 34
     35c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     360:	88 23       	and	r24, r24
     362:	b1 f3       	breq	.-20     	; 0x350 <__vector_25+0xca>
			profiles[i].op1 = USART_RXBuffer_GetByte(&USART_data)<<8;
     364:	85 e8       	ldi	r24, 0x85	; 133
     366:	92 e2       	ldi	r25, 0x22	; 34
     368:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     36c:	19 82       	std	Y+1, r1	; 0x01
     36e:	8a 83       	std	Y+2, r24	; 0x02
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     370:	85 e8       	ldi	r24, 0x85	; 133
     372:	92 e2       	ldi	r25, 0x22	; 34
     374:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     378:	85 e8       	ldi	r24, 0x85	; 133
     37a:	92 e2       	ldi	r25, 0x22	; 34
     37c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     380:	88 23       	and	r24, r24
     382:	b1 f3       	breq	.-20     	; 0x370 <__vector_25+0xea>
			profiles[i].op1 |= USART_RXBuffer_GetByte(&USART_data);
     384:	09 81       	ldd	r16, Y+1	; 0x01
     386:	1a 81       	ldd	r17, Y+2	; 0x02
     388:	85 e8       	ldi	r24, 0x85	; 133
     38a:	92 e2       	ldi	r25, 0x22	; 34
     38c:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	80 2b       	or	r24, r16
     394:	91 2b       	or	r25, r17
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	9a 83       	std	Y+2, r25	; 0x02
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     39a:	85 e8       	ldi	r24, 0x85	; 133
     39c:	92 e2       	ldi	r25, 0x22	; 34
     39e:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     3a2:	85 e8       	ldi	r24, 0x85	; 133
     3a4:	92 e2       	ldi	r25, 0x22	; 34
     3a6:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     3aa:	88 23       	and	r24, r24
     3ac:	b1 f3       	breq	.-20     	; 0x39a <__vector_25+0x114>
			profiles[i].op2 = USART_RXBuffer_GetByte(&USART_data)<<8;
     3ae:	85 e8       	ldi	r24, 0x85	; 133
     3b0:	92 e2       	ldi	r25, 0x22	; 34
     3b2:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     3b6:	1b 82       	std	Y+3, r1	; 0x03
     3b8:	8c 83       	std	Y+4, r24	; 0x04
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     3ba:	85 e8       	ldi	r24, 0x85	; 133
     3bc:	92 e2       	ldi	r25, 0x22	; 34
     3be:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     3c2:	85 e8       	ldi	r24, 0x85	; 133
     3c4:	92 e2       	ldi	r25, 0x22	; 34
     3c6:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     3ca:	88 23       	and	r24, r24
     3cc:	b1 f3       	breq	.-20     	; 0x3ba <__vector_25+0x134>
			profiles[i].op2 |= USART_RXBuffer_GetByte(&USART_data);
     3ce:	0b 81       	ldd	r16, Y+3	; 0x03
     3d0:	1c 81       	ldd	r17, Y+4	; 0x04
     3d2:	85 e8       	ldi	r24, 0x85	; 133
     3d4:	92 e2       	ldi	r25, 0x22	; 34
     3d6:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	80 2b       	or	r24, r16
     3de:	91 2b       	or	r25, r17
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     3e4:	85 e8       	ldi	r24, 0x85	; 133
     3e6:	92 e2       	ldi	r25, 0x22	; 34
     3e8:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     3ec:	85 e8       	ldi	r24, 0x85	; 133
     3ee:	92 e2       	ldi	r25, 0x22	; 34
     3f0:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     3f4:	88 23       	and	r24, r24
     3f6:	b1 f3       	breq	.-20     	; 0x3e4 <__vector_25+0x15e>
			profiles[i].op3 = USART_RXBuffer_GetByte(&USART_data)<<8;
     3f8:	85 e8       	ldi	r24, 0x85	; 133
     3fa:	92 e2       	ldi	r25, 0x22	; 34
     3fc:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     400:	1d 82       	std	Y+5, r1	; 0x05
     402:	8e 83       	std	Y+6, r24	; 0x06
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     404:	85 e8       	ldi	r24, 0x85	; 133
     406:	92 e2       	ldi	r25, 0x22	; 34
     408:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     40c:	85 e8       	ldi	r24, 0x85	; 133
     40e:	92 e2       	ldi	r25, 0x22	; 34
     410:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     414:	88 23       	and	r24, r24
     416:	b1 f3       	breq	.-20     	; 0x404 <__vector_25+0x17e>
			profiles[i].op3 |= USART_RXBuffer_GetByte(&USART_data);
     418:	0d 81       	ldd	r16, Y+5	; 0x05
     41a:	1e 81       	ldd	r17, Y+6	; 0x06
     41c:	85 e8       	ldi	r24, 0x85	; 133
     41e:	92 e2       	ldi	r25, 0x22	; 34
     420:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	80 2b       	or	r24, r16
     428:	91 2b       	or	r25, r17
     42a:	8d 83       	std	Y+5, r24	; 0x05
     42c:	9e 83       	std	Y+6, r25	; 0x06
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     42e:	85 e8       	ldi	r24, 0x85	; 133
     430:	92 e2       	ldi	r25, 0x22	; 34
     432:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     436:	85 e8       	ldi	r24, 0x85	; 133
     438:	92 e2       	ldi	r25, 0x22	; 34
     43a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     43e:	88 23       	and	r24, r24
     440:	b1 f3       	breq	.-20     	; 0x42e <__vector_25+0x1a8>
			profiles[i].op4 = USART_RXBuffer_GetByte(&USART_data)<<8;
     442:	85 e8       	ldi	r24, 0x85	; 133
     444:	92 e2       	ldi	r25, 0x22	; 34
     446:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     44a:	1f 82       	std	Y+7, r1	; 0x07
     44c:	88 87       	std	Y+8, r24	; 0x08
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     44e:	85 e8       	ldi	r24, 0x85	; 133
     450:	92 e2       	ldi	r25, 0x22	; 34
     452:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     456:	85 e8       	ldi	r24, 0x85	; 133
     458:	92 e2       	ldi	r25, 0x22	; 34
     45a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     45e:	88 23       	and	r24, r24
     460:	b1 f3       	breq	.-20     	; 0x44e <__vector_25+0x1c8>
			profiles[i].op4 |= USART_RXBuffer_GetByte(&USART_data);
     462:	0f 81       	ldd	r16, Y+7	; 0x07
     464:	18 85       	ldd	r17, Y+8	; 0x08
     466:	85 e8       	ldi	r24, 0x85	; 133
     468:	92 e2       	ldi	r25, 0x22	; 34
     46a:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	80 2b       	or	r24, r16
     472:	91 2b       	or	r25, r17
     474:	8f 83       	std	Y+7, r24	; 0x07
     476:	98 87       	std	Y+8, r25	; 0x08
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     478:	85 e8       	ldi	r24, 0x85	; 133
     47a:	92 e2       	ldi	r25, 0x22	; 34
     47c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     480:	85 e8       	ldi	r24, 0x85	; 133
     482:	92 e2       	ldi	r25, 0x22	; 34
     484:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     488:	88 23       	and	r24, r24
     48a:	b1 f3       	breq	.-20     	; 0x478 <__vector_25+0x1f2>
			profiles[i].op5 = USART_RXBuffer_GetByte(&USART_data)<<8;
     48c:	85 e8       	ldi	r24, 0x85	; 133
     48e:	92 e2       	ldi	r25, 0x22	; 34
     490:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     494:	19 86       	std	Y+9, r1	; 0x09
     496:	8a 87       	std	Y+10, r24	; 0x0a
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     498:	85 e8       	ldi	r24, 0x85	; 133
     49a:	92 e2       	ldi	r25, 0x22	; 34
     49c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     4a0:	85 e8       	ldi	r24, 0x85	; 133
     4a2:	92 e2       	ldi	r25, 0x22	; 34
     4a4:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     4a8:	88 23       	and	r24, r24
     4aa:	b1 f3       	breq	.-20     	; 0x498 <__vector_25+0x212>
			profiles[i].op5 |= USART_RXBuffer_GetByte(&USART_data);
     4ac:	09 85       	ldd	r16, Y+9	; 0x09
     4ae:	1a 85       	ldd	r17, Y+10	; 0x0a
     4b0:	85 e8       	ldi	r24, 0x85	; 133
     4b2:	92 e2       	ldi	r25, 0x22	; 34
     4b4:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	80 2b       	or	r24, r16
     4bc:	91 2b       	or	r25, r17
     4be:	89 87       	std	Y+9, r24	; 0x09
     4c0:	9a 87       	std	Y+10, r25	; 0x0a
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     4c2:	85 e8       	ldi	r24, 0x85	; 133
     4c4:	92 e2       	ldi	r25, 0x22	; 34
     4c6:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     4ca:	85 e8       	ldi	r24, 0x85	; 133
     4cc:	92 e2       	ldi	r25, 0x22	; 34
     4ce:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     4d2:	88 23       	and	r24, r24
     4d4:	b1 f3       	breq	.-20     	; 0x4c2 <__vector_25+0x23c>
			profiles[i].op6 = USART_RXBuffer_GetByte(&USART_data)<<8;
     4d6:	85 e8       	ldi	r24, 0x85	; 133
     4d8:	92 e2       	ldi	r25, 0x22	; 34
     4da:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     4de:	1b 86       	std	Y+11, r1	; 0x0b
     4e0:	8c 87       	std	Y+12, r24	; 0x0c
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     4e2:	85 e8       	ldi	r24, 0x85	; 133
     4e4:	92 e2       	ldi	r25, 0x22	; 34
     4e6:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     4ea:	85 e8       	ldi	r24, 0x85	; 133
     4ec:	92 e2       	ldi	r25, 0x22	; 34
     4ee:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     4f2:	88 23       	and	r24, r24
     4f4:	b1 f3       	breq	.-20     	; 0x4e2 <__vector_25+0x25c>
			profiles[i].op6 |= USART_RXBuffer_GetByte(&USART_data);
     4f6:	0b 85       	ldd	r16, Y+11	; 0x0b
     4f8:	1c 85       	ldd	r17, Y+12	; 0x0c
     4fa:	85 e8       	ldi	r24, 0x85	; 133
     4fc:	92 e2       	ldi	r25, 0x22	; 34
     4fe:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	80 2b       	or	r24, r16
     506:	91 2b       	or	r25, r17
     508:	8b 87       	std	Y+11, r24	; 0x0b
     50a:	9c 87       	std	Y+12, r25	; 0x0c
			do{USART_RXComplete(&USART_data);} while(!USART_RXBufferData_Available(&USART_data));
     50c:	85 e8       	ldi	r24, 0x85	; 133
     50e:	92 e2       	ldi	r25, 0x22	; 34
     510:	0e 94 b8 2c 	call	0x5970	; 0x5970 <USART_RXComplete>
     514:	85 e8       	ldi	r24, 0x85	; 133
     516:	92 e2       	ldi	r25, 0x22	; 34
     518:	0e 94 a0 2c 	call	0x5940	; 0x5940 <USART_RXBufferData_Available>
     51c:	88 23       	and	r24, r24
     51e:	b1 f3       	breq	.-20     	; 0x50c <__vector_25+0x286>
			profiles[i].curr_range |= USART_RXBuffer_GetByte(&USART_data);
     520:	1d 85       	ldd	r17, Y+13	; 0x0d
     522:	85 e8       	ldi	r24, 0x85	; 133
     524:	92 e2       	ldi	r25, 0x22	; 34
     526:	0e 94 a8 2c 	call	0x5950	; 0x5950 <USART_RXBuffer_GetByte>
     52a:	18 2b       	or	r17, r24
     52c:	1d 87       	std	Y+13, r17	; 0x0d
			//write to EEPROM
			eeprom_write_block((const void*)&(profiles[i]), (void*)&(profilesEE[i]), sizeof(profile));
     52e:	ce 01       	movw	r24, r28
     530:	0f 97       	sbiw	r24, 0x0f	; 15
     532:	b6 01       	movw	r22, r12
     534:	4d e1       	ldi	r20, 0x1D	; 29
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	0e 94 2f 32 	call	0x645e	; 0x645e <__eewr_block_x32a4>
     53c:	08 94       	sec
     53e:	e1 1c       	adc	r14, r1
     540:	f1 1c       	adc	r15, r1
     542:	8d e1       	ldi	r24, 0x1D	; 29
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	c8 0e       	add	r12, r24
     548:	d9 1e       	adc	r13, r25
     54a:	6d 96       	adiw	r28, 0x1d	; 29
	else
		type = 0;
	//recieve profiles
	if(type == 'u')
	{
		for(i = 0; i < PROFILES_LENGTH; i++)
     54c:	9b e0       	ldi	r25, 0x0B	; 11
     54e:	e9 16       	cp	r14, r25
     550:	f1 04       	cpc	r15, r1
     552:	51 f0       	breq	.+20     	; 0x568 <__vector_25+0x2e2>
     554:	ea 9c       	mul	r14, r10
     556:	80 01       	movw	r16, r0
     558:	eb 9c       	mul	r14, r11
     55a:	10 0d       	add	r17, r0
     55c:	fa 9c       	mul	r15, r10
     55e:	10 0d       	add	r17, r0
     560:	11 24       	eor	r1, r1
     562:	0a 5b       	subi	r16, 0xBA	; 186
     564:	1e 4d       	sbci	r17, 0xDE	; 222
     566:	d1 ce       	rjmp	.-606    	; 0x30a <__vector_25+0x84>
		}
	}
	//send profiles
	else if(type == 'd');
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     568:	80 91 a1 08 	lds	r24, 0x08A1
     56c:	85 ff       	sbrs	r24, 5
     56e:	fc cf       	rjmp	.-8      	; 0x568 <__vector_25+0x2e2>
		USART_PutChar(&USARTC0, 'z');
     570:	8a e7       	ldi	r24, 0x7A	; 122
     572:	80 93 a0 08 	sts	0x08A0, r24
     576:	a5 e5       	ldi	r26, 0x55	; 85
     578:	b1 e2       	ldi	r27, 0x21	; 33
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
		for(i = 0; i < PROFILES_LENGTH; i++)
     57e:	6d e1       	ldi	r22, 0x1D	; 29
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	98 c0       	rjmp	.+304    	; 0x6b4 <__vector_25+0x42e>
		{
			for(j = 0; j < 15; j++)
			{
				do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     584:	80 91 a1 08 	lds	r24, 0x08A1
     588:	85 ff       	sbrs	r24, 5
     58a:	fc cf       	rjmp	.-8      	; 0x584 <__vector_25+0x2fe>
				USART_PutChar(&USARTC0, profiles[i].name[j]);
     58c:	81 91       	ld	r24, Z+
     58e:	80 93 a0 08 	sts	0x08A0, r24
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, 'z');
		for(i = 0; i < PROFILES_LENGTH; i++)
		{
			for(j = 0; j < 15; j++)
     592:	ea 17       	cp	r30, r26
     594:	fb 07       	cpc	r31, r27
     596:	b1 f7       	brne	.-20     	; 0x584 <__vector_25+0x2fe>
			{
				do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0, profiles[i].name[j]);
			}
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     598:	80 91 a1 08 	lds	r24, 0x08A1
     59c:	85 ff       	sbrs	r24, 5
     59e:	fc cf       	rjmp	.-8      	; 0x598 <__vector_25+0x312>
			USART_PutChar(&USARTC0, profiles[i].type);
     5a0:	8c 91       	ld	r24, X
     5a2:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5a6:	80 91 a1 08 	lds	r24, 0x08A1
     5aa:	85 ff       	sbrs	r24, 5
     5ac:	fc cf       	rjmp	.-8      	; 0x5a6 <__vector_25+0x320>
			USART_PutChar(&USARTC0, profiles[i].op1>>8);
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	2d 91       	ld	r18, X+
     5b2:	3c 91       	ld	r19, X
     5b4:	12 97       	sbiw	r26, 0x02	; 2
     5b6:	83 2f       	mov	r24, r19
     5b8:	99 27       	eor	r25, r25
     5ba:	87 fd       	sbrc	r24, 7
     5bc:	9a 95       	dec	r25
     5be:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5c2:	80 91 a1 08 	lds	r24, 0x08A1
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <__vector_25+0x33c>
			USART_PutChar(&USARTC0, profiles[i].op1);
     5ca:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5ce:	80 91 a1 08 	lds	r24, 0x08A1
     5d2:	85 ff       	sbrs	r24, 5
     5d4:	fc cf       	rjmp	.-8      	; 0x5ce <__vector_25+0x348>
			USART_PutChar(&USARTC0, profiles[i].op2>>8);
     5d6:	13 96       	adiw	r26, 0x03	; 3
     5d8:	2d 91       	ld	r18, X+
     5da:	3c 91       	ld	r19, X
     5dc:	14 97       	sbiw	r26, 0x04	; 4
     5de:	83 2f       	mov	r24, r19
     5e0:	99 27       	eor	r25, r25
     5e2:	87 fd       	sbrc	r24, 7
     5e4:	9a 95       	dec	r25
     5e6:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5ea:	80 91 a1 08 	lds	r24, 0x08A1
     5ee:	85 ff       	sbrs	r24, 5
     5f0:	fc cf       	rjmp	.-8      	; 0x5ea <__vector_25+0x364>
			USART_PutChar(&USARTC0, profiles[i].op2);
     5f2:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5f6:	80 91 a1 08 	lds	r24, 0x08A1
     5fa:	85 ff       	sbrs	r24, 5
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <__vector_25+0x370>
			USART_PutChar(&USARTC0, profiles[i].op3>>8);
     5fe:	15 96       	adiw	r26, 0x05	; 5
     600:	2d 91       	ld	r18, X+
     602:	3c 91       	ld	r19, X
     604:	16 97       	sbiw	r26, 0x06	; 6
     606:	83 2f       	mov	r24, r19
     608:	99 27       	eor	r25, r25
     60a:	87 fd       	sbrc	r24, 7
     60c:	9a 95       	dec	r25
     60e:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     612:	80 91 a1 08 	lds	r24, 0x08A1
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <__vector_25+0x38c>
			USART_PutChar(&USARTC0, profiles[i].op3);
     61a:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     61e:	80 91 a1 08 	lds	r24, 0x08A1
     622:	85 ff       	sbrs	r24, 5
     624:	fc cf       	rjmp	.-8      	; 0x61e <__vector_25+0x398>
			USART_PutChar(&USARTC0, profiles[i].op4>>8);
     626:	17 96       	adiw	r26, 0x07	; 7
     628:	2d 91       	ld	r18, X+
     62a:	3c 91       	ld	r19, X
     62c:	18 97       	sbiw	r26, 0x08	; 8
     62e:	83 2f       	mov	r24, r19
     630:	99 27       	eor	r25, r25
     632:	87 fd       	sbrc	r24, 7
     634:	9a 95       	dec	r25
     636:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     63a:	80 91 a1 08 	lds	r24, 0x08A1
     63e:	85 ff       	sbrs	r24, 5
     640:	fc cf       	rjmp	.-8      	; 0x63a <__vector_25+0x3b4>
			USART_PutChar(&USARTC0, profiles[i].op4);
     642:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     646:	80 91 a1 08 	lds	r24, 0x08A1
     64a:	85 ff       	sbrs	r24, 5
     64c:	fc cf       	rjmp	.-8      	; 0x646 <__vector_25+0x3c0>
			USART_PutChar(&USARTC0, profiles[i].op5>>8);
     64e:	19 96       	adiw	r26, 0x09	; 9
     650:	2d 91       	ld	r18, X+
     652:	3c 91       	ld	r19, X
     654:	1a 97       	sbiw	r26, 0x0a	; 10
     656:	83 2f       	mov	r24, r19
     658:	99 27       	eor	r25, r25
     65a:	87 fd       	sbrc	r24, 7
     65c:	9a 95       	dec	r25
     65e:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     662:	80 91 a1 08 	lds	r24, 0x08A1
     666:	85 ff       	sbrs	r24, 5
     668:	fc cf       	rjmp	.-8      	; 0x662 <__vector_25+0x3dc>
			USART_PutChar(&USARTC0, profiles[i].op5);
     66a:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     66e:	80 91 a1 08 	lds	r24, 0x08A1
     672:	85 ff       	sbrs	r24, 5
     674:	fc cf       	rjmp	.-8      	; 0x66e <__vector_25+0x3e8>
			USART_PutChar(&USARTC0, profiles[i].op6>>8);
     676:	1b 96       	adiw	r26, 0x0b	; 11
     678:	2d 91       	ld	r18, X+
     67a:	3c 91       	ld	r19, X
     67c:	1c 97       	sbiw	r26, 0x0c	; 12
     67e:	83 2f       	mov	r24, r19
     680:	99 27       	eor	r25, r25
     682:	87 fd       	sbrc	r24, 7
     684:	9a 95       	dec	r25
     686:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     68a:	80 91 a1 08 	lds	r24, 0x08A1
     68e:	85 ff       	sbrs	r24, 5
     690:	fc cf       	rjmp	.-8      	; 0x68a <__vector_25+0x404>
			USART_PutChar(&USARTC0, profiles[i].op6);
     692:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     696:	80 91 a1 08 	lds	r24, 0x08A1
     69a:	85 ff       	sbrs	r24, 5
     69c:	fc cf       	rjmp	.-8      	; 0x696 <__vector_25+0x410>
			USART_PutChar(&USARTC0, profiles[i].curr_range);
     69e:	1d 96       	adiw	r26, 0x0d	; 13
     6a0:	8c 91       	ld	r24, X
     6a2:	1d 97       	sbiw	r26, 0x0d	; 13
     6a4:	80 93 a0 08 	sts	0x08A0, r24
     6a8:	4f 5f       	subi	r20, 0xFF	; 255
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	5d 96       	adiw	r26, 0x1d	; 29
	//send profiles
	else if(type == 'd');
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, 'z');
		for(i = 0; i < PROFILES_LENGTH; i++)
     6ae:	4b 30       	cpi	r20, 0x0B	; 11
     6b0:	51 05       	cpc	r21, r1
     6b2:	51 f0       	breq	.+20     	; 0x6c8 <__vector_25+0x442>
     6b4:	46 9f       	mul	r20, r22
     6b6:	f0 01       	movw	r30, r0
     6b8:	47 9f       	mul	r20, r23
     6ba:	f0 0d       	add	r31, r0
     6bc:	56 9f       	mul	r21, r22
     6be:	f0 0d       	add	r31, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	ea 5b       	subi	r30, 0xBA	; 186
     6c4:	fe 4d       	sbci	r31, 0xDE	; 222
     6c6:	5e cf       	rjmp	.-324    	; 0x584 <__vector_25+0x2fe>
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
			USART_PutChar(&USARTC0, profiles[i].op6);
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
			USART_PutChar(&USARTC0, profiles[i].curr_range);
		}
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     6c8:	80 91 a1 08 	lds	r24, 0x08A1
     6cc:	85 ff       	sbrs	r24, 5
     6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <__vector_25+0x442>
		USART_PutChar(&USARTC0, 'z');
     6d0:	8a e7       	ldi	r24, 0x7A	; 122
     6d2:	80 93 a0 08 	sts	0x08A0, r24
	}
}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	bf 91       	pop	r27
     6e0:	af 91       	pop	r26
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	7f 91       	pop	r23
     6e8:	6f 91       	pop	r22
     6ea:	5f 91       	pop	r21
     6ec:	4f 91       	pop	r20
     6ee:	3f 91       	pop	r19
     6f0:	2f 91       	pop	r18
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	0f 90       	pop	r0
     704:	0a be       	out	0x3a, r0	; 58
     706:	0f 90       	pop	r0
     708:	09 be       	out	0x39, r0	; 57
     70a:	0f 90       	pop	r0
     70c:	08 be       	out	0x38, r0	; 56
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <buttonHandler>:
		i++;
	}
}

int buttonHandler(profile profiles[PROFILES_LENGTH], uint8_t* status, uint8_t* profile_index, uint8_t* profile_opt_index, uint8_t* profile_edit_index, uint8_t* profile_edit_sel, int16_t* length)
{
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ec 01       	movw	r28, r24
     72a:	6b 01       	movw	r12, r22
     72c:	da 01       	movw	r26, r20
     72e:	a9 01       	movw	r20, r18
     730:	b7 01       	movw	r22, r14
     732:	94 e0       	ldi	r25, 0x04	; 4
     734:	17 c0       	rjmp	.+46     	; 0x764 <buttonHandler+0x4c>
	uint8_t dir;
	dir = INVALID;
	while(dir == INVALID)
	{
	//get action
	if(bit_is_set(PORTA.IN,4))
     736:	80 91 08 06 	lds	r24, 0x0608
     73a:	84 ff       	sbrs	r24, 4
     73c:	02 c0       	rjmp	.+4      	; 0x742 <buttonHandler+0x2a>
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	13 c0       	rjmp	.+38     	; 0x768 <buttonHandler+0x50>
		dir = RIGHT;
	else if(bit_is_set(PORTA.IN,5))
     742:	80 91 08 06 	lds	r24, 0x0608
     746:	85 ff       	sbrs	r24, 5
     748:	02 c0       	rjmp	.+4      	; 0x74e <buttonHandler+0x36>
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0d c0       	rjmp	.+26     	; 0x768 <buttonHandler+0x50>
		dir = DOWN;
	else if(bit_is_set(PORTA.IN,6))
     74e:	80 91 08 06 	lds	r24, 0x0608
     752:	86 ff       	sbrs	r24, 6
     754:	02 c0       	rjmp	.+4      	; 0x75a <buttonHandler+0x42>
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	07 c0       	rjmp	.+14     	; 0x768 <buttonHandler+0x50>
		dir = LEFT;
	else if(bit_is_set(PORTA.IN,7))
     75a:	80 91 08 06 	lds	r24, 0x0608
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	87 ff       	sbrs	r24, 7
     762:	e9 cf       	rjmp	.-46     	; 0x736 <buttonHandler+0x1e>

int buttonHandler(profile profiles[PROFILES_LENGTH], uint8_t* status, uint8_t* profile_index, uint8_t* profile_opt_index, uint8_t* profile_edit_index, uint8_t* profile_edit_sel, int16_t* length)
{
	uint8_t dir;
	dir = INVALID;
	while(dir == INVALID)
     764:	94 30       	cpi	r25, 0x04	; 4
     766:	39 f3       	breq	.-50     	; 0x736 <buttonHandler+0x1e>
	}
	//else
	//	return 0;

	//perform instruction
	if(*status == PROFILE_SEL)
     768:	f6 01       	movw	r30, r12
     76a:	20 81       	ld	r18, Z
     76c:	22 23       	and	r18, r18
     76e:	d9 f4       	brne	.+54     	; 0x7a6 <buttonHandler+0x8e>
	{
		if(dir == UP)
     770:	99 23       	and	r25, r25
     772:	39 f4       	brne	.+14     	; 0x782 <buttonHandler+0x6a>
		{
			if((*profile_index) > 0)
     774:	8c 91       	ld	r24, X
     776:	88 23       	and	r24, r24
     778:	09 f4       	brne	.+2      	; 0x77c <buttonHandler+0x64>
     77a:	8f c4       	rjmp	.+2334   	; 0x109a <buttonHandler+0x982>
				(*profile_index)--;
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	8c 93       	st	X, r24
     780:	8c c4       	rjmp	.+2328   	; 0x109a <buttonHandler+0x982>
		}
		else if(dir == DOWN)
     782:	93 30       	cpi	r25, 0x03	; 3
     784:	39 f4       	brne	.+14     	; 0x794 <buttonHandler+0x7c>
		{
			if((*profile_index) < (PROFILES_LENGTH-1))
     786:	8c 91       	ld	r24, X
     788:	8a 30       	cpi	r24, 0x0A	; 10
     78a:	08 f0       	brcs	.+2      	; 0x78e <buttonHandler+0x76>
     78c:	86 c4       	rjmp	.+2316   	; 0x109a <buttonHandler+0x982>
				(*profile_index)++;
     78e:	8f 5f       	subi	r24, 0xFF	; 255
     790:	8c 93       	st	X, r24
     792:	83 c4       	rjmp	.+2310   	; 0x109a <buttonHandler+0x982>
		}
		else if(dir == RIGHT)
     794:	92 30       	cpi	r25, 0x02	; 2
     796:	09 f0       	breq	.+2      	; 0x79a <buttonHandler+0x82>
     798:	80 c4       	rjmp	.+2304   	; 0x109a <buttonHandler+0x982>
		{
			*status = PROFILE_OPT;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	d6 01       	movw	r26, r12
     79e:	8c 93       	st	X, r24
			*profile_opt_index = 0;	
     7a0:	fa 01       	movw	r30, r20
     7a2:	10 82       	st	Z, r1
     7a4:	7a c4       	rjmp	.+2292   	; 0x109a <buttonHandler+0x982>
		}
	}
	else if(*status == PROFILE_OPT)
     7a6:	21 30       	cpi	r18, 0x01	; 1
     7a8:	11 f5       	brne	.+68     	; 0x7ee <buttonHandler+0xd6>
	{
		if(dir == UP)
     7aa:	99 23       	and	r25, r25
     7ac:	39 f4       	brne	.+14     	; 0x7bc <buttonHandler+0xa4>
		{
			if(*profile_opt_index == 1)
     7ae:	da 01       	movw	r26, r20
     7b0:	8c 91       	ld	r24, X
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <buttonHandler+0xa0>
     7b6:	71 c4       	rjmp	.+2274   	; 0x109a <buttonHandler+0x982>
				*profile_opt_index = 0;
     7b8:	1c 92       	st	X, r1
     7ba:	6f c4       	rjmp	.+2270   	; 0x109a <buttonHandler+0x982>
		}
		else if(dir == DOWN)
     7bc:	93 30       	cpi	r25, 0x03	; 3
     7be:	39 f4       	brne	.+14     	; 0x7ce <buttonHandler+0xb6>
		{
			if(*profile_opt_index == 0)
     7c0:	fa 01       	movw	r30, r20
     7c2:	80 81       	ld	r24, Z
     7c4:	88 23       	and	r24, r24
     7c6:	09 f0       	breq	.+2      	; 0x7ca <buttonHandler+0xb2>
     7c8:	68 c4       	rjmp	.+2256   	; 0x109a <buttonHandler+0x982>
				*profile_opt_index = 1;
     7ca:	20 83       	st	Z, r18
     7cc:	66 c4       	rjmp	.+2252   	; 0x109a <buttonHandler+0x982>
		}
		else if(dir == RIGHT)
     7ce:	92 30       	cpi	r25, 0x02	; 2
     7d0:	59 f4       	brne	.+22     	; 0x7e8 <buttonHandler+0xd0>
		{
			if(*profile_opt_index == 0)
     7d2:	da 01       	movw	r26, r20
     7d4:	8c 91       	ld	r24, X
     7d6:	88 23       	and	r24, r24
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <buttonHandler+0xc8>
				*status = PROFILE_TEST;
     7da:	f6 01       	movw	r30, r12
     7dc:	90 83       	st	Z, r25
     7de:	5d c4       	rjmp	.+2234   	; 0x109a <buttonHandler+0x982>
			else
				*status = PROFILE_EDIT;
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	d6 01       	movw	r26, r12
     7e4:	8c 93       	st	X, r24
     7e6:	59 c4       	rjmp	.+2226   	; 0x109a <buttonHandler+0x982>
		}
		else if(dir == LEFT)
		{
			*status = PROFILE_SEL;
     7e8:	f6 01       	movw	r30, r12
     7ea:	10 82       	st	Z, r1
     7ec:	56 c4       	rjmp	.+2220   	; 0x109a <buttonHandler+0x982>
		}	
	}
	else if(*status == PROFILE_TEST)
     7ee:	22 30       	cpi	r18, 0x02	; 2
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <buttonHandler+0xdc>
     7f2:	53 c4       	rjmp	.+2214   	; 0x109a <buttonHandler+0x982>
	{

	}
	else if(*status == PROFILE_EDIT)
     7f4:	23 30       	cpi	r18, 0x03	; 3
     7f6:	09 f0       	breq	.+2      	; 0x7fa <buttonHandler+0xe2>
     7f8:	40 c4       	rjmp	.+2176   	; 0x107a <buttonHandler+0x962>
	{
		//TODO editing of name and type
		if(dir == LEFT)
     7fa:	91 30       	cpi	r25, 0x01	; 1
     7fc:	d1 f4       	brne	.+52     	; 0x832 <buttonHandler+0x11a>
		{
			if(*profile_edit_sel == EDIT_NOSEL)
     7fe:	fb 01       	movw	r30, r22
     800:	80 81       	ld	r24, Z
     802:	88 23       	and	r24, r24
     804:	29 f4       	brne	.+10     	; 0x810 <buttonHandler+0xf8>
			{
				*status = PROFILE_OPT;
     806:	d6 01       	movw	r26, r12
     808:	9c 93       	st	X, r25
				*profile_edit_index = 0;
     80a:	f8 01       	movw	r30, r16
     80c:	10 82       	st	Z, r1
     80e:	45 c4       	rjmp	.+2186   	; 0x109a <buttonHandler+0x982>
			}
			else
			{
				*profile_edit_sel = EDIT_NOSEL;
     810:	fb 01       	movw	r30, r22
     812:	10 82       	st	Z, r1
				eeprom_write_block((const void*)&(profiles[*profile_index]), (void*)&(profilesEE[*profile_index]), sizeof(profile));
     814:	6c 91       	ld	r22, X
     816:	8d e1       	ldi	r24, 0x1D	; 29
     818:	68 9f       	mul	r22, r24
     81a:	b0 01       	movw	r22, r0
     81c:	11 24       	eor	r1, r1
     81e:	ce 01       	movw	r24, r28
     820:	86 0f       	add	r24, r22
     822:	97 1f       	adc	r25, r23
     824:	60 50       	subi	r22, 0x00	; 0
     826:	70 40       	sbci	r23, 0x00	; 0
     828:	4d e1       	ldi	r20, 0x1D	; 29
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	0e 94 2f 32 	call	0x645e	; 0x645e <__eewr_block_x32a4>
     830:	34 c4       	rjmp	.+2152   	; 0x109a <buttonHandler+0x982>
			
			}
		}	
		else if(dir == RIGHT)
     832:	92 30       	cpi	r25, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <buttonHandler+0x126>
			*profile_edit_sel = EDIT_SEL;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	db 01       	movw	r26, r22
     83a:	8c 93       	st	X, r24
     83c:	2e c4       	rjmp	.+2140   	; 0x109a <buttonHandler+0x982>
		else if(dir == UP)
     83e:	99 23       	and	r25, r25
     840:	09 f0       	breq	.+2      	; 0x844 <buttonHandler+0x12c>
     842:	f9 c1       	rjmp	.+1010   	; 0xc36 <buttonHandler+0x51e>
		{
			if(*profile_edit_sel == EDIT_NOSEL)
     844:	fb 01       	movw	r30, r22
     846:	80 81       	ld	r24, Z
     848:	f8 01       	movw	r30, r16
     84a:	70 81       	ld	r23, Z
     84c:	88 23       	and	r24, r24
     84e:	31 f4       	brne	.+12     	; 0x85c <buttonHandler+0x144>
			{
				if(*profile_edit_index > 0)
     850:	77 23       	and	r23, r23
     852:	09 f4       	brne	.+2      	; 0x856 <buttonHandler+0x13e>
     854:	22 c4       	rjmp	.+2116   	; 0x109a <buttonHandler+0x982>
					(*profile_edit_index)--;	
     856:	71 50       	subi	r23, 0x01	; 1
     858:	70 83       	st	Z, r23
     85a:	1f c4       	rjmp	.+2110   	; 0x109a <buttonHandler+0x982>
			}
			else if(*profile_edit_index == 0)
     85c:	77 23       	and	r23, r23
     85e:	09 f4       	brne	.+2      	; 0x862 <buttonHandler+0x14a>
     860:	1c c4       	rjmp	.+2104   	; 0x109a <buttonHandler+0x982>
			{
				
			}
			else if(*profile_edit_index == 1)
     862:	71 30       	cpi	r23, 0x01	; 1
     864:	09 f0       	breq	.+2      	; 0x868 <buttonHandler+0x150>
     866:	57 c0       	rjmp	.+174    	; 0x916 <buttonHandler+0x1fe>
			{
				if(profiles[*profile_index].type == SWV)
     868:	9c 91       	ld	r25, X
     86a:	8d e1       	ldi	r24, 0x1D	; 29
     86c:	98 9f       	mul	r25, r24
     86e:	f0 01       	movw	r30, r0
     870:	11 24       	eor	r1, r1
     872:	ec 0f       	add	r30, r28
     874:	fd 1f       	adc	r31, r29
     876:	87 85       	ldd	r24, Z+15	; 0x0f
     878:	88 23       	and	r24, r24
     87a:	51 f4       	brne	.+20     	; 0x890 <buttonHandler+0x178>
				{
					if(profiles[*profile_index].op1<200)
     87c:	80 89       	ldd	r24, Z+16	; 0x10
     87e:	91 89       	ldd	r25, Z+17	; 0x11
     880:	88 3c       	cpi	r24, 0xC8	; 200
     882:	91 05       	cpc	r25, r1
     884:	0c f0       	brlt	.+2      	; 0x888 <buttonHandler+0x170>
     886:	09 c4       	rjmp	.+2066   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1++;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	80 8b       	std	Z+16, r24	; 0x10
     88c:	91 8b       	std	Z+17, r25	; 0x11
     88e:	05 c4       	rjmp	.+2058   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	59 f4       	brne	.+22     	; 0x8aa <buttonHandler+0x192>
				{
					if(profiles[*profile_index].op1<5000)
     894:	80 89       	ldd	r24, Z+16	; 0x10
     896:	91 89       	ldd	r25, Z+17	; 0x11
     898:	23 e1       	ldi	r18, 0x13	; 19
     89a:	88 38       	cpi	r24, 0x88	; 136
     89c:	92 07       	cpc	r25, r18
     89e:	0c f0       	brlt	.+2      	; 0x8a2 <buttonHandler+0x18a>
     8a0:	fc c3       	rjmp	.+2040   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 + 10;
     8a2:	0a 96       	adiw	r24, 0x0a	; 10
     8a4:	80 8b       	std	Z+16, r24	; 0x10
     8a6:	91 8b       	std	Z+17, r25	; 0x11
     8a8:	f8 c3       	rjmp	.+2032   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <buttonHandler+0x1ac>
				{
					if(profiles[*profile_index].op1<1000)
     8ae:	80 89       	ldd	r24, Z+16	; 0x10
     8b0:	91 89       	ldd	r25, Z+17	; 0x11
     8b2:	a3 e0       	ldi	r26, 0x03	; 3
     8b4:	88 3e       	cpi	r24, 0xE8	; 232
     8b6:	9a 07       	cpc	r25, r26
     8b8:	0c f0       	brlt	.+2      	; 0x8bc <buttonHandler+0x1a4>
     8ba:	ef c3       	rjmp	.+2014   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1++;
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	80 8b       	std	Z+16, r24	; 0x10
     8c0:	91 8b       	std	Z+17, r25	; 0x11
     8c2:	eb c3       	rjmp	.+2006   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	59 f4       	brne	.+22     	; 0x8de <buttonHandler+0x1c6>
				{
					if(profiles[*profile_index].op1<9999)
     8c8:	80 89       	ldd	r24, Z+16	; 0x10
     8ca:	91 89       	ldd	r25, Z+17	; 0x11
     8cc:	b7 e2       	ldi	r27, 0x27	; 39
     8ce:	8f 30       	cpi	r24, 0x0F	; 15
     8d0:	9b 07       	cpc	r25, r27
     8d2:	0c f0       	brlt	.+2      	; 0x8d6 <buttonHandler+0x1be>
     8d4:	e2 c3       	rjmp	.+1988   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 + 10;
     8d6:	0a 96       	adiw	r24, 0x0a	; 10
     8d8:	80 8b       	std	Z+16, r24	; 0x10
     8da:	91 8b       	std	Z+17, r25	; 0x11
     8dc:	de c3       	rjmp	.+1980   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CONSTVOLT)
     8de:	84 30       	cpi	r24, 0x04	; 4
     8e0:	59 f4       	brne	.+22     	; 0x8f8 <buttonHandler+0x1e0>
				{
					if(profiles[*profile_index].op1<1600)
     8e2:	80 89       	ldd	r24, Z+16	; 0x10
     8e4:	91 89       	ldd	r25, Z+17	; 0x11
     8e6:	26 e0       	ldi	r18, 0x06	; 6
     8e8:	80 34       	cpi	r24, 0x40	; 64
     8ea:	92 07       	cpc	r25, r18
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <buttonHandler+0x1d8>
     8ee:	d5 c3       	rjmp	.+1962   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 + 10;
     8f0:	0a 96       	adiw	r24, 0x0a	; 10
     8f2:	80 8b       	std	Z+16, r24	; 0x10
     8f4:	91 8b       	std	Z+17, r25	; 0x11
     8f6:	d1 c3       	rjmp	.+1954   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	09 f0       	breq	.+2      	; 0x8fe <buttonHandler+0x1e6>
     8fc:	ce c3       	rjmp	.+1948   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op1<9900)
     8fe:	80 89       	ldd	r24, Z+16	; 0x10
     900:	91 89       	ldd	r25, Z+17	; 0x11
     902:	a6 e2       	ldi	r26, 0x26	; 38
     904:	8c 3a       	cpi	r24, 0xAC	; 172
     906:	9a 07       	cpc	r25, r26
     908:	0c f0       	brlt	.+2      	; 0x90c <buttonHandler+0x1f4>
     90a:	c7 c3       	rjmp	.+1934   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 + 100;
     90c:	8c 59       	subi	r24, 0x9C	; 156
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	80 8b       	std	Z+16, r24	; 0x10
     912:	91 8b       	std	Z+17, r25	; 0x11
     914:	c2 c3       	rjmp	.+1924   	; 0x109a <buttonHandler+0x982>
				}
				
			}
			else if(*profile_edit_index == 2)
     916:	72 30       	cpi	r23, 0x02	; 2
     918:	09 f0       	breq	.+2      	; 0x91c <buttonHandler+0x204>
     91a:	57 c0       	rjmp	.+174    	; 0x9ca <buttonHandler+0x2b2>
			{
				
				if(profiles[*profile_index].type == SWV)
     91c:	9c 91       	ld	r25, X
     91e:	8d e1       	ldi	r24, 0x1D	; 29
     920:	98 9f       	mul	r25, r24
     922:	f0 01       	movw	r30, r0
     924:	11 24       	eor	r1, r1
     926:	ec 0f       	add	r30, r28
     928:	fd 1f       	adc	r31, r29
     92a:	87 85       	ldd	r24, Z+15	; 0x0f
     92c:	88 23       	and	r24, r24
     92e:	59 f4       	brne	.+22     	; 0x946 <buttonHandler+0x22e>
				{
					if(profiles[*profile_index].op2<1600)
     930:	82 89       	ldd	r24, Z+18	; 0x12
     932:	93 89       	ldd	r25, Z+19	; 0x13
     934:	b6 e0       	ldi	r27, 0x06	; 6
     936:	80 34       	cpi	r24, 0x40	; 64
     938:	9b 07       	cpc	r25, r27
     93a:	0c f0       	brlt	.+2      	; 0x93e <buttonHandler+0x226>
     93c:	ae c3       	rjmp	.+1884   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 10;
     93e:	0a 96       	adiw	r24, 0x0a	; 10
     940:	82 8b       	std	Z+18, r24	; 0x12
     942:	93 8b       	std	Z+19, r25	; 0x13
     944:	aa c3       	rjmp	.+1876   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	59 f4       	brne	.+22     	; 0x960 <buttonHandler+0x248>
				{
					if(profiles[*profile_index].op2<1600)
     94a:	82 89       	ldd	r24, Z+18	; 0x12
     94c:	93 89       	ldd	r25, Z+19	; 0x13
     94e:	26 e0       	ldi	r18, 0x06	; 6
     950:	80 34       	cpi	r24, 0x40	; 64
     952:	92 07       	cpc	r25, r18
     954:	0c f0       	brlt	.+2      	; 0x958 <buttonHandler+0x240>
     956:	a1 c3       	rjmp	.+1858   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 10;
     958:	0a 96       	adiw	r24, 0x0a	; 10
     95a:	82 8b       	std	Z+18, r24	; 0x12
     95c:	93 8b       	std	Z+19, r25	; 0x13
     95e:	9d c3       	rjmp	.+1850   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	59 f4       	brne	.+22     	; 0x97a <buttonHandler+0x262>
				{
					if(profiles[*profile_index].op2<1600)
     964:	82 89       	ldd	r24, Z+18	; 0x12
     966:	93 89       	ldd	r25, Z+19	; 0x13
     968:	a6 e0       	ldi	r26, 0x06	; 6
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	9a 07       	cpc	r25, r26
     96e:	0c f0       	brlt	.+2      	; 0x972 <buttonHandler+0x25a>
     970:	94 c3       	rjmp	.+1832   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 10;
     972:	0a 96       	adiw	r24, 0x0a	; 10
     974:	82 8b       	std	Z+18, r24	; 0x12
     976:	93 8b       	std	Z+19, r25	; 0x13
     978:	90 c3       	rjmp	.+1824   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     97a:	83 30       	cpi	r24, 0x03	; 3
     97c:	59 f4       	brne	.+22     	; 0x994 <buttonHandler+0x27c>
				{
					if(profiles[*profile_index].op2<1600)
     97e:	82 89       	ldd	r24, Z+18	; 0x12
     980:	93 89       	ldd	r25, Z+19	; 0x13
     982:	b6 e0       	ldi	r27, 0x06	; 6
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	9b 07       	cpc	r25, r27
     988:	0c f0       	brlt	.+2      	; 0x98c <buttonHandler+0x274>
     98a:	87 c3       	rjmp	.+1806   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 10;
     98c:	0a 96       	adiw	r24, 0x0a	; 10
     98e:	82 8b       	std	Z+18, r24	; 0x12
     990:	93 8b       	std	Z+19, r25	; 0x13
     992:	83 c3       	rjmp	.+1798   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CONSTVOLT)
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	59 f4       	brne	.+22     	; 0x9ae <buttonHandler+0x296>
				{
					if(profiles[*profile_index].op2<9990)
     998:	82 89       	ldd	r24, Z+18	; 0x12
     99a:	93 89       	ldd	r25, Z+19	; 0x13
     99c:	27 e2       	ldi	r18, 0x27	; 39
     99e:	86 30       	cpi	r24, 0x06	; 6
     9a0:	92 07       	cpc	r25, r18
     9a2:	0c f0       	brlt	.+2      	; 0x9a6 <buttonHandler+0x28e>
     9a4:	7a c3       	rjmp	.+1780   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 1;
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	82 8b       	std	Z+18, r24	; 0x12
     9aa:	93 8b       	std	Z+19, r25	; 0x13
     9ac:	76 c3       	rjmp	.+1772   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     9ae:	85 30       	cpi	r24, 0x05	; 5
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <buttonHandler+0x29c>
     9b2:	73 c3       	rjmp	.+1766   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op2<1600)
     9b4:	82 89       	ldd	r24, Z+18	; 0x12
     9b6:	93 89       	ldd	r25, Z+19	; 0x13
     9b8:	a6 e0       	ldi	r26, 0x06	; 6
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	9a 07       	cpc	r25, r26
     9be:	0c f0       	brlt	.+2      	; 0x9c2 <buttonHandler+0x2aa>
     9c0:	6c c3       	rjmp	.+1752   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 + 10;
     9c2:	0a 96       	adiw	r24, 0x0a	; 10
     9c4:	82 8b       	std	Z+18, r24	; 0x12
     9c6:	93 8b       	std	Z+19, r25	; 0x13
     9c8:	68 c3       	rjmp	.+1744   	; 0x109a <buttonHandler+0x982>
				}

				
			}
			else if(*profile_edit_index == 3)
     9ca:	73 30       	cpi	r23, 0x03	; 3
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <buttonHandler+0x2b8>
     9ce:	4a c0       	rjmp	.+148    	; 0xa64 <buttonHandler+0x34c>
			{
				if(profiles[*profile_index].type == SWV)
     9d0:	9c 91       	ld	r25, X
     9d2:	8d e1       	ldi	r24, 0x1D	; 29
     9d4:	98 9f       	mul	r25, r24
     9d6:	f0 01       	movw	r30, r0
     9d8:	11 24       	eor	r1, r1
     9da:	ec 0f       	add	r30, r28
     9dc:	fd 1f       	adc	r31, r29
     9de:	87 85       	ldd	r24, Z+15	; 0x0f
     9e0:	88 23       	and	r24, r24
     9e2:	59 f4       	brne	.+22     	; 0x9fa <buttonHandler+0x2e2>
				{
					if(profiles[*profile_index].op3<1600)
     9e4:	84 89       	ldd	r24, Z+20	; 0x14
     9e6:	95 89       	ldd	r25, Z+21	; 0x15
     9e8:	b6 e0       	ldi	r27, 0x06	; 6
     9ea:	80 34       	cpi	r24, 0x40	; 64
     9ec:	9b 07       	cpc	r25, r27
     9ee:	0c f0       	brlt	.+2      	; 0x9f2 <buttonHandler+0x2da>
     9f0:	54 c3       	rjmp	.+1704   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 + 10;
     9f2:	0a 96       	adiw	r24, 0x0a	; 10
     9f4:	84 8b       	std	Z+20, r24	; 0x14
     9f6:	95 8b       	std	Z+21, r25	; 0x15
     9f8:	50 c3       	rjmp	.+1696   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	59 f4       	brne	.+22     	; 0xa14 <buttonHandler+0x2fc>
				{
					if(profiles[*profile_index].op3<1600)
     9fe:	84 89       	ldd	r24, Z+20	; 0x14
     a00:	95 89       	ldd	r25, Z+21	; 0x15
     a02:	26 e0       	ldi	r18, 0x06	; 6
     a04:	80 34       	cpi	r24, 0x40	; 64
     a06:	92 07       	cpc	r25, r18
     a08:	0c f0       	brlt	.+2      	; 0xa0c <buttonHandler+0x2f4>
     a0a:	47 c3       	rjmp	.+1678   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 + 10;
     a0c:	0a 96       	adiw	r24, 0x0a	; 10
     a0e:	84 8b       	std	Z+20, r24	; 0x14
     a10:	95 8b       	std	Z+21, r25	; 0x15
     a12:	43 c3       	rjmp	.+1670   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	59 f4       	brne	.+22     	; 0xa2e <buttonHandler+0x316>
				{
					if(profiles[*profile_index].op3<9999)
     a18:	84 89       	ldd	r24, Z+20	; 0x14
     a1a:	95 89       	ldd	r25, Z+21	; 0x15
     a1c:	a7 e2       	ldi	r26, 0x27	; 39
     a1e:	8f 30       	cpi	r24, 0x0F	; 15
     a20:	9a 07       	cpc	r25, r26
     a22:	0c f0       	brlt	.+2      	; 0xa26 <buttonHandler+0x30e>
     a24:	3a c3       	rjmp	.+1652   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 + 1;
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	84 8b       	std	Z+20, r24	; 0x14
     a2a:	95 8b       	std	Z+21, r25	; 0x15
     a2c:	36 c3       	rjmp	.+1644   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	59 f4       	brne	.+22     	; 0xa48 <buttonHandler+0x330>
				{
					if(profiles[*profile_index].op3<1600)
     a32:	84 89       	ldd	r24, Z+20	; 0x14
     a34:	95 89       	ldd	r25, Z+21	; 0x15
     a36:	b6 e0       	ldi	r27, 0x06	; 6
     a38:	80 34       	cpi	r24, 0x40	; 64
     a3a:	9b 07       	cpc	r25, r27
     a3c:	0c f0       	brlt	.+2      	; 0xa40 <buttonHandler+0x328>
     a3e:	2d c3       	rjmp	.+1626   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 + 10;
     a40:	0a 96       	adiw	r24, 0x0a	; 10
     a42:	84 8b       	std	Z+20, r24	; 0x14
     a44:	95 8b       	std	Z+21, r25	; 0x15
     a46:	29 c3       	rjmp	.+1618   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     a48:	85 30       	cpi	r24, 0x05	; 5
     a4a:	09 f0       	breq	.+2      	; 0xa4e <buttonHandler+0x336>
     a4c:	26 c3       	rjmp	.+1612   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op3<9990)
     a4e:	84 89       	ldd	r24, Z+20	; 0x14
     a50:	95 89       	ldd	r25, Z+21	; 0x15
     a52:	27 e2       	ldi	r18, 0x27	; 39
     a54:	86 30       	cpi	r24, 0x06	; 6
     a56:	92 07       	cpc	r25, r18
     a58:	0c f0       	brlt	.+2      	; 0xa5c <buttonHandler+0x344>
     a5a:	1f c3       	rjmp	.+1598   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 + 10;
     a5c:	0a 96       	adiw	r24, 0x0a	; 10
     a5e:	84 8b       	std	Z+20, r24	; 0x14
     a60:	95 8b       	std	Z+21, r25	; 0x15
     a62:	1b c3       	rjmp	.+1590   	; 0x109a <buttonHandler+0x982>
				}


				
			}
			else if(*profile_edit_index == 4)
     a64:	74 30       	cpi	r23, 0x04	; 4
     a66:	09 f0       	breq	.+2      	; 0xa6a <buttonHandler+0x352>
     a68:	4a c0       	rjmp	.+148    	; 0xafe <buttonHandler+0x3e6>
			{
				if(profiles[*profile_index].type == SWV)
     a6a:	9c 91       	ld	r25, X
     a6c:	8d e1       	ldi	r24, 0x1D	; 29
     a6e:	98 9f       	mul	r25, r24
     a70:	f0 01       	movw	r30, r0
     a72:	11 24       	eor	r1, r1
     a74:	ec 0f       	add	r30, r28
     a76:	fd 1f       	adc	r31, r29
     a78:	87 85       	ldd	r24, Z+15	; 0x0f
     a7a:	88 23       	and	r24, r24
     a7c:	59 f4       	brne	.+22     	; 0xa94 <buttonHandler+0x37c>
				{
					if(profiles[*profile_index].op4<1600)
     a7e:	86 89       	ldd	r24, Z+22	; 0x16
     a80:	97 89       	ldd	r25, Z+23	; 0x17
     a82:	a6 e0       	ldi	r26, 0x06	; 6
     a84:	80 34       	cpi	r24, 0x40	; 64
     a86:	9a 07       	cpc	r25, r26
     a88:	0c f0       	brlt	.+2      	; 0xa8c <buttonHandler+0x374>
     a8a:	07 c3       	rjmp	.+1550   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4++;
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	86 8b       	std	Z+22, r24	; 0x16
     a90:	97 8b       	std	Z+23, r25	; 0x17
     a92:	03 c3       	rjmp	.+1542   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	51 f4       	brne	.+20     	; 0xaac <buttonHandler+0x394>
				{
					if(profiles[*profile_index].op4<99)
     a98:	86 89       	ldd	r24, Z+22	; 0x16
     a9a:	97 89       	ldd	r25, Z+23	; 0x17
     a9c:	83 36       	cpi	r24, 0x63	; 99
     a9e:	91 05       	cpc	r25, r1
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <buttonHandler+0x38c>
     aa2:	fb c2       	rjmp	.+1526   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4++;
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	86 8b       	std	Z+22, r24	; 0x16
     aa8:	97 8b       	std	Z+23, r25	; 0x17
     aaa:	f7 c2       	rjmp	.+1518   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	59 f4       	brne	.+22     	; 0xac6 <buttonHandler+0x3ae>
				{
					if(profiles[*profile_index].op4<1600)
     ab0:	86 89       	ldd	r24, Z+22	; 0x16
     ab2:	97 89       	ldd	r25, Z+23	; 0x17
     ab4:	b6 e0       	ldi	r27, 0x06	; 6
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	9b 07       	cpc	r25, r27
     aba:	0c f0       	brlt	.+2      	; 0xabe <buttonHandler+0x3a6>
     abc:	ee c2       	rjmp	.+1500   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 + 10;
     abe:	0a 96       	adiw	r24, 0x0a	; 10
     ac0:	86 8b       	std	Z+22, r24	; 0x16
     ac2:	97 8b       	std	Z+23, r25	; 0x17
     ac4:	ea c2       	rjmp	.+1492   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	59 f4       	brne	.+22     	; 0xae0 <buttonHandler+0x3c8>
				{
					if(profiles[*profile_index].op4<5000)
     aca:	86 89       	ldd	r24, Z+22	; 0x16
     acc:	97 89       	ldd	r25, Z+23	; 0x17
     ace:	23 e1       	ldi	r18, 0x13	; 19
     ad0:	88 38       	cpi	r24, 0x88	; 136
     ad2:	92 07       	cpc	r25, r18
     ad4:	0c f0       	brlt	.+2      	; 0xad8 <buttonHandler+0x3c0>
     ad6:	e1 c2       	rjmp	.+1474   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 + 10;
     ad8:	0a 96       	adiw	r24, 0x0a	; 10
     ada:	86 8b       	std	Z+22, r24	; 0x16
     adc:	97 8b       	std	Z+23, r25	; 0x17
     ade:	dd c2       	rjmp	.+1466   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     ae0:	85 30       	cpi	r24, 0x05	; 5
     ae2:	09 f0       	breq	.+2      	; 0xae6 <buttonHandler+0x3ce>
     ae4:	da c2       	rjmp	.+1460   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op4<9900)
     ae6:	86 89       	ldd	r24, Z+22	; 0x16
     ae8:	97 89       	ldd	r25, Z+23	; 0x17
     aea:	a6 e2       	ldi	r26, 0x26	; 38
     aec:	8c 3a       	cpi	r24, 0xAC	; 172
     aee:	9a 07       	cpc	r25, r26
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <buttonHandler+0x3dc>
     af2:	d3 c2       	rjmp	.+1446   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 + 100;
     af4:	8c 59       	subi	r24, 0x9C	; 156
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	86 8b       	std	Z+22, r24	; 0x16
     afa:	97 8b       	std	Z+23, r25	; 0x17
     afc:	ce c2       	rjmp	.+1436   	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 5)
     afe:	75 30       	cpi	r23, 0x05	; 5
     b00:	09 f0       	breq	.+2      	; 0xb04 <buttonHandler+0x3ec>
     b02:	4a c0       	rjmp	.+148    	; 0xb98 <buttonHandler+0x480>
			{
				if(profiles[*profile_index].type == SWV)
     b04:	9c 91       	ld	r25, X
     b06:	8d e1       	ldi	r24, 0x1D	; 29
     b08:	98 9f       	mul	r25, r24
     b0a:	f0 01       	movw	r30, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	ec 0f       	add	r30, r28
     b10:	fd 1f       	adc	r31, r29
     b12:	87 85       	ldd	r24, Z+15	; 0x0f
     b14:	88 23       	and	r24, r24
     b16:	59 f4       	brne	.+22     	; 0xb2e <buttonHandler+0x416>
				{
					if(profiles[*profile_index].op5<1600)
     b18:	80 8d       	ldd	r24, Z+24	; 0x18
     b1a:	91 8d       	ldd	r25, Z+25	; 0x19
     b1c:	b6 e0       	ldi	r27, 0x06	; 6
     b1e:	80 34       	cpi	r24, 0x40	; 64
     b20:	9b 07       	cpc	r25, r27
     b22:	0c f0       	brlt	.+2      	; 0xb26 <buttonHandler+0x40e>
     b24:	ba c2       	rjmp	.+1396   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5++;
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	80 8f       	std	Z+24, r24	; 0x18
     b2a:	91 8f       	std	Z+25, r25	; 0x19
     b2c:	b6 c2       	rjmp	.+1388   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	59 f4       	brne	.+22     	; 0xb48 <buttonHandler+0x430>
				{
					if(profiles[*profile_index].op5<1600)
     b32:	80 8d       	ldd	r24, Z+24	; 0x18
     b34:	91 8d       	ldd	r25, Z+25	; 0x19
     b36:	26 e0       	ldi	r18, 0x06	; 6
     b38:	80 34       	cpi	r24, 0x40	; 64
     b3a:	92 07       	cpc	r25, r18
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <buttonHandler+0x428>
     b3e:	ad c2       	rjmp	.+1370   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5++;
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	80 8f       	std	Z+24, r24	; 0x18
     b44:	91 8f       	std	Z+25, r25	; 0x19
     b46:	a9 c2       	rjmp	.+1362   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	59 f4       	brne	.+22     	; 0xb62 <buttonHandler+0x44a>
				{
					if(profiles[*profile_index].op5<1600)
     b4c:	80 8d       	ldd	r24, Z+24	; 0x18
     b4e:	91 8d       	ldd	r25, Z+25	; 0x19
     b50:	a6 e0       	ldi	r26, 0x06	; 6
     b52:	80 34       	cpi	r24, 0x40	; 64
     b54:	9a 07       	cpc	r25, r26
     b56:	0c f0       	brlt	.+2      	; 0xb5a <buttonHandler+0x442>
     b58:	a0 c2       	rjmp	.+1344   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5 = profiles[*profile_index].op5 + 10;
     b5a:	0a 96       	adiw	r24, 0x0a	; 10
     b5c:	80 8f       	std	Z+24, r24	; 0x18
     b5e:	91 8f       	std	Z+25, r25	; 0x19
     b60:	9c c2       	rjmp	.+1336   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	59 f4       	brne	.+22     	; 0xb7c <buttonHandler+0x464>
				{
					if(profiles[*profile_index].op5<1600)
     b66:	80 8d       	ldd	r24, Z+24	; 0x18
     b68:	91 8d       	ldd	r25, Z+25	; 0x19
     b6a:	b6 e0       	ldi	r27, 0x06	; 6
     b6c:	80 34       	cpi	r24, 0x40	; 64
     b6e:	9b 07       	cpc	r25, r27
     b70:	0c f0       	brlt	.+2      	; 0xb74 <buttonHandler+0x45c>
     b72:	93 c2       	rjmp	.+1318   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5++;
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	80 8f       	std	Z+24, r24	; 0x18
     b78:	91 8f       	std	Z+25, r25	; 0x19
     b7a:	8f c2       	rjmp	.+1310   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	09 f0       	breq	.+2      	; 0xb82 <buttonHandler+0x46a>
     b80:	8c c2       	rjmp	.+1304   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op5<9990)
     b82:	80 8d       	ldd	r24, Z+24	; 0x18
     b84:	91 8d       	ldd	r25, Z+25	; 0x19
     b86:	27 e2       	ldi	r18, 0x27	; 39
     b88:	86 30       	cpi	r24, 0x06	; 6
     b8a:	92 07       	cpc	r25, r18
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <buttonHandler+0x478>
     b8e:	85 c2       	rjmp	.+1290   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5 = profiles[*profile_index].op5 + 10;
     b90:	0a 96       	adiw	r24, 0x0a	; 10
     b92:	80 8f       	std	Z+24, r24	; 0x18
     b94:	91 8f       	std	Z+25, r25	; 0x19
     b96:	81 c2       	rjmp	.+1282   	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 6)
     b98:	76 30       	cpi	r23, 0x06	; 6
     b9a:	e1 f5       	brne	.+120    	; 0xc14 <buttonHandler+0x4fc>
			{
				if(profiles[*profile_index].type == SWV)
     b9c:	9c 91       	ld	r25, X
     b9e:	8d e1       	ldi	r24, 0x1D	; 29
     ba0:	98 9f       	mul	r25, r24
     ba2:	f0 01       	movw	r30, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	97 85       	ldd	r25, Z+15	; 0x0f
     bac:	99 23       	and	r25, r25
     bae:	39 f4       	brne	.+14     	; 0xbbe <buttonHandler+0x4a6>
				{
					if(profiles[*profile_index].curr_range == RANGE_50UA)
     bb0:	84 8d       	ldd	r24, Z+28	; 0x1c
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <buttonHandler+0x4a0>
     bb6:	71 c2       	rjmp	.+1250   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_10UA;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	84 8f       	std	Z+28, r24	; 0x1c
     bbc:	6e c2       	rjmp	.+1244   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     bbe:	91 30       	cpi	r25, 0x01	; 1
     bc0:	31 f4       	brne	.+12     	; 0xbce <buttonHandler+0x4b6>
				{
					if(profiles[*profile_index].curr_range == RANGE_50UA)
     bc2:	84 8d       	ldd	r24, Z+28	; 0x1c
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	09 f0       	breq	.+2      	; 0xbca <buttonHandler+0x4b2>
     bc8:	68 c2       	rjmp	.+1232   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_10UA;
     bca:	94 8f       	std	Z+28, r25	; 0x1c
     bcc:	66 c2       	rjmp	.+1228   	; 0x109a <buttonHandler+0x982>
				
				}
				else if(profiles[*profile_index].type == ACV)
     bce:	92 30       	cpi	r25, 0x02	; 2
     bd0:	59 f4       	brne	.+22     	; 0xbe8 <buttonHandler+0x4d0>
				{
					if(profiles[*profile_index].op6<1600)
     bd2:	82 8d       	ldd	r24, Z+26	; 0x1a
     bd4:	93 8d       	ldd	r25, Z+27	; 0x1b
     bd6:	a6 e0       	ldi	r26, 0x06	; 6
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	9a 07       	cpc	r25, r26
     bdc:	0c f0       	brlt	.+2      	; 0xbe0 <buttonHandler+0x4c8>
     bde:	5d c2       	rjmp	.+1210   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op6 = profiles[*profile_index].op6 + 1;
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	82 8f       	std	Z+26, r24	; 0x1a
     be4:	93 8f       	std	Z+27, r25	; 0x1b
     be6:	59 c2       	rjmp	.+1202   	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     be8:	93 30       	cpi	r25, 0x03	; 3
     bea:	39 f4       	brne	.+14     	; 0xbfa <buttonHandler+0x4e2>
				{
					if(profiles[*profile_index].curr_range == RANGE_50UA)
     bec:	84 8d       	ldd	r24, Z+28	; 0x1c
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <buttonHandler+0x4dc>
     bf2:	53 c2       	rjmp	.+1190   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_10UA;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	84 8f       	std	Z+28, r24	; 0x1c
     bf8:	50 c2       	rjmp	.+1184   	; 0x109a <buttonHandler+0x982>
				
				}
				else if(profiles[*profile_index].type == CA)
     bfa:	95 30       	cpi	r25, 0x05	; 5
     bfc:	09 f0       	breq	.+2      	; 0xc00 <buttonHandler+0x4e8>
     bfe:	4d c2       	rjmp	.+1178   	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op6<99)
     c00:	82 8d       	ldd	r24, Z+26	; 0x1a
     c02:	93 8d       	ldd	r25, Z+27	; 0x1b
     c04:	83 36       	cpi	r24, 0x63	; 99
     c06:	91 05       	cpc	r25, r1
     c08:	0c f0       	brlt	.+2      	; 0xc0c <buttonHandler+0x4f4>
     c0a:	47 c2       	rjmp	.+1166   	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op6 = profiles[*profile_index].op6 + 1;
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	82 8f       	std	Z+26, r24	; 0x1a
     c10:	93 8f       	std	Z+27, r25	; 0x1b
     c12:	43 c2       	rjmp	.+1158   	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 7)
     c14:	77 30       	cpi	r23, 0x07	; 7
     c16:	09 f0       	breq	.+2      	; 0xc1a <buttonHandler+0x502>
     c18:	40 c2       	rjmp	.+1152   	; 0x109a <buttonHandler+0x982>
			{
				if(profiles[*profile_index].curr_range == RANGE_50UA)
     c1a:	8c 91       	ld	r24, X
     c1c:	9d e1       	ldi	r25, 0x1D	; 29
     c1e:	89 9f       	mul	r24, r25
     c20:	f0 01       	movw	r30, r0
     c22:	11 24       	eor	r1, r1
     c24:	ec 0f       	add	r30, r28
     c26:	fd 1f       	adc	r31, r29
     c28:	84 8d       	ldd	r24, Z+28	; 0x1c
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	09 f0       	breq	.+2      	; 0xc30 <buttonHandler+0x518>
     c2e:	35 c2       	rjmp	.+1130   	; 0x109a <buttonHandler+0x982>
					profiles[*profile_index].curr_range = RANGE_10UA;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	84 8f       	std	Z+28, r24	; 0x1c
     c34:	32 c2       	rjmp	.+1124   	; 0x109a <buttonHandler+0x982>
			}
				
		}
		else if(dir == DOWN)
     c36:	93 30       	cpi	r25, 0x03	; 3
     c38:	09 f0       	breq	.+2      	; 0xc3c <buttonHandler+0x524>
     c3a:	2f c2       	rjmp	.+1118   	; 0x109a <buttonHandler+0x982>
		{
			if(*profile_edit_sel == EDIT_NOSEL)
     c3c:	fb 01       	movw	r30, r22
     c3e:	80 81       	ld	r24, Z
     c40:	f8 01       	movw	r30, r16
     c42:	70 81       	ld	r23, Z
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <buttonHandler+0x532>
     c48:	40 c0       	rjmp	.+128    	; 0xcca <buttonHandler+0x5b2>
			{
				if((*profile_edit_index < 6 && profiles[*profile_index].type != CONSTVOLT) || 
     c4a:	76 30       	cpi	r23, 0x06	; 6
     c4c:	80 f4       	brcc	.+32     	; 0xc6e <buttonHandler+0x556>
     c4e:	8c 91       	ld	r24, X
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	2d e1       	ldi	r18, 0x1D	; 29
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	82 9f       	mul	r24, r18
     c58:	f0 01       	movw	r30, r0
     c5a:	83 9f       	mul	r24, r19
     c5c:	f0 0d       	add	r31, r0
     c5e:	92 9f       	mul	r25, r18
     c60:	f0 0d       	add	r31, r0
     c62:	11 24       	eor	r1, r1
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	87 85       	ldd	r24, Z+15	; 0x0f
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	51 f5       	brne	.+84     	; 0xcc2 <buttonHandler+0x5aa>
     c6e:	76 30       	cpi	r23, 0x06	; 6
     c70:	a1 f4       	brne	.+40     	; 0xc9a <buttonHandler+0x582>
     c72:	8c 91       	ld	r24, X
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	2d e1       	ldi	r18, 0x1D	; 29
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	82 9f       	mul	r24, r18
     c7c:	f0 01       	movw	r30, r0
     c7e:	83 9f       	mul	r24, r19
     c80:	f0 0d       	add	r31, r0
     c82:	92 9f       	mul	r25, r18
     c84:	f0 0d       	add	r31, r0
     c86:	11 24       	eor	r1, r1
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	87 85       	ldd	r24, Z+15	; 0x0f
     c8e:	82 30       	cpi	r24, 0x02	; 2
     c90:	c1 f0       	breq	.+48     	; 0xcc2 <buttonHandler+0x5aa>
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	09 f0       	breq	.+2      	; 0xc98 <buttonHandler+0x580>
     c96:	01 c2       	rjmp	.+1026   	; 0x109a <buttonHandler+0x982>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <buttonHandler+0x5aa>
     c9a:	72 30       	cpi	r23, 0x02	; 2
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <buttonHandler+0x588>
     c9e:	fd c1       	rjmp	.+1018   	; 0x109a <buttonHandler+0x982>
     ca0:	8c 91       	ld	r24, X
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2d e1       	ldi	r18, 0x1D	; 29
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	82 9f       	mul	r24, r18
     caa:	f0 01       	movw	r30, r0
     cac:	83 9f       	mul	r24, r19
     cae:	f0 0d       	add	r31, r0
     cb0:	92 9f       	mul	r25, r18
     cb2:	f0 0d       	add	r31, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	ec 0f       	add	r30, r28
     cb8:	fd 1f       	adc	r31, r29
     cba:	87 85       	ldd	r24, Z+15	; 0x0f
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <buttonHandler+0x5aa>
     cc0:	ec c1       	rjmp	.+984    	; 0x109a <buttonHandler+0x982>
				(*profile_edit_index == 6 && profiles[*profile_index].type == ACV) || 
				(*profile_edit_index == 6 && profiles[*profile_index].type == CA) || 
				(*profile_edit_index < 2 && profiles[*profile_index].type == CONSTVOLT) )
					(*profile_edit_index)++;	
     cc2:	7f 5f       	subi	r23, 0xFF	; 255
     cc4:	d8 01       	movw	r26, r16
     cc6:	7c 93       	st	X, r23
     cc8:	e8 c1       	rjmp	.+976    	; 0x109a <buttonHandler+0x982>
			}
			else if(*profile_edit_index == 0)
     cca:	77 23       	and	r23, r23
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <buttonHandler+0x5b8>
     cce:	e5 c1       	rjmp	.+970    	; 0x109a <buttonHandler+0x982>
			{

			}
			else if(*profile_edit_index == 1)
     cd0:	71 30       	cpi	r23, 0x01	; 1
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <buttonHandler+0x5be>
     cd4:	53 c0       	rjmp	.+166    	; 0xd7c <buttonHandler+0x664>
			{
				if(profiles[*profile_index].type == SWV)
     cd6:	9c 91       	ld	r25, X
     cd8:	8d e1       	ldi	r24, 0x1D	; 29
     cda:	98 9f       	mul	r25, r24
     cdc:	f0 01       	movw	r30, r0
     cde:	11 24       	eor	r1, r1
     ce0:	ec 0f       	add	r30, r28
     ce2:	fd 1f       	adc	r31, r29
     ce4:	87 85       	ldd	r24, Z+15	; 0x0f
     ce6:	88 23       	and	r24, r24
     ce8:	51 f4       	brne	.+20     	; 0xcfe <buttonHandler+0x5e6>
				{
					if(profiles[*profile_index].op1>9)
     cea:	80 89       	ldd	r24, Z+16	; 0x10
     cec:	91 89       	ldd	r25, Z+17	; 0x11
     cee:	8a 30       	cpi	r24, 0x0A	; 10
     cf0:	91 05       	cpc	r25, r1
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <buttonHandler+0x5de>
     cf4:	d2 c1       	rjmp	.+932    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 - 10;
     cf6:	0a 97       	sbiw	r24, 0x0a	; 10
     cf8:	80 8b       	std	Z+16, r24	; 0x10
     cfa:	91 8b       	std	Z+17, r25	; 0x11
     cfc:	ce c1       	rjmp	.+924    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	51 f4       	brne	.+20     	; 0xd16 <buttonHandler+0x5fe>
				{
					if(profiles[*profile_index].op1>9)
     d02:	80 89       	ldd	r24, Z+16	; 0x10
     d04:	91 89       	ldd	r25, Z+17	; 0x11
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	91 05       	cpc	r25, r1
     d0a:	0c f4       	brge	.+2      	; 0xd0e <buttonHandler+0x5f6>
     d0c:	c6 c1       	rjmp	.+908    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 - 10;
     d0e:	0a 97       	sbiw	r24, 0x0a	; 10
     d10:	80 8b       	std	Z+16, r24	; 0x10
     d12:	91 8b       	std	Z+17, r25	; 0x11
     d14:	c2 c1       	rjmp	.+900    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	51 f4       	brne	.+20     	; 0xd2e <buttonHandler+0x616>
				{
					if(profiles[*profile_index].op1>10)
     d1a:	80 89       	ldd	r24, Z+16	; 0x10
     d1c:	91 89       	ldd	r25, Z+17	; 0x11
     d1e:	8b 30       	cpi	r24, 0x0B	; 11
     d20:	91 05       	cpc	r25, r1
     d22:	0c f4       	brge	.+2      	; 0xd26 <buttonHandler+0x60e>
     d24:	ba c1       	rjmp	.+884    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1--;
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	80 8b       	std	Z+16, r24	; 0x10
     d2a:	91 8b       	std	Z+17, r25	; 0x11
     d2c:	b6 c1       	rjmp	.+876    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	51 f4       	brne	.+20     	; 0xd46 <buttonHandler+0x62e>
				{
					if(profiles[*profile_index].op1>1)
     d32:	80 89       	ldd	r24, Z+16	; 0x10
     d34:	91 89       	ldd	r25, Z+17	; 0x11
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	91 05       	cpc	r25, r1
     d3a:	0c f4       	brge	.+2      	; 0xd3e <buttonHandler+0x626>
     d3c:	ae c1       	rjmp	.+860    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1--;
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	80 8b       	std	Z+16, r24	; 0x10
     d42:	91 8b       	std	Z+17, r25	; 0x11
     d44:	aa c1       	rjmp	.+852    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CONSTVOLT)
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	59 f4       	brne	.+22     	; 0xd60 <buttonHandler+0x648>
				{
					if(profiles[*profile_index].op1>-1600)
     d4a:	80 89       	ldd	r24, Z+16	; 0x10
     d4c:	91 89       	ldd	r25, Z+17	; 0x11
     d4e:	b9 ef       	ldi	r27, 0xF9	; 249
     d50:	81 3c       	cpi	r24, 0xC1	; 193
     d52:	9b 07       	cpc	r25, r27
     d54:	0c f4       	brge	.+2      	; 0xd58 <buttonHandler+0x640>
     d56:	a1 c1       	rjmp	.+834    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 - 10;
     d58:	0a 97       	sbiw	r24, 0x0a	; 10
     d5a:	80 8b       	std	Z+16, r24	; 0x10
     d5c:	91 8b       	std	Z+17, r25	; 0x11
     d5e:	9d c1       	rjmp	.+826    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	09 f0       	breq	.+2      	; 0xd66 <buttonHandler+0x64e>
     d64:	9a c1       	rjmp	.+820    	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op1>99)
     d66:	80 89       	ldd	r24, Z+16	; 0x10
     d68:	91 89       	ldd	r25, Z+17	; 0x11
     d6a:	84 36       	cpi	r24, 0x64	; 100
     d6c:	91 05       	cpc	r25, r1
     d6e:	0c f4       	brge	.+2      	; 0xd72 <buttonHandler+0x65a>
     d70:	94 c1       	rjmp	.+808    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op1 = profiles[*profile_index].op1 - 100;
     d72:	84 56       	subi	r24, 0x64	; 100
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	80 8b       	std	Z+16, r24	; 0x10
     d78:	91 8b       	std	Z+17, r25	; 0x11
     d7a:	8f c1       	rjmp	.+798    	; 0x109a <buttonHandler+0x982>
				}
				
			}
			else if(*profile_edit_index == 2)
     d7c:	72 30       	cpi	r23, 0x02	; 2
     d7e:	09 f0       	breq	.+2      	; 0xd82 <buttonHandler+0x66a>
     d80:	55 c0       	rjmp	.+170    	; 0xe2c <buttonHandler+0x714>
			{
				
				if(profiles[*profile_index].type == SWV)
     d82:	9c 91       	ld	r25, X
     d84:	8d e1       	ldi	r24, 0x1D	; 29
     d86:	98 9f       	mul	r25, r24
     d88:	f0 01       	movw	r30, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	ec 0f       	add	r30, r28
     d8e:	fd 1f       	adc	r31, r29
     d90:	87 85       	ldd	r24, Z+15	; 0x0f
     d92:	88 23       	and	r24, r24
     d94:	59 f4       	brne	.+22     	; 0xdac <buttonHandler+0x694>
				{
					if(profiles[*profile_index].op2>-1600)
     d96:	82 89       	ldd	r24, Z+18	; 0x12
     d98:	93 89       	ldd	r25, Z+19	; 0x13
     d9a:	29 ef       	ldi	r18, 0xF9	; 249
     d9c:	81 3c       	cpi	r24, 0xC1	; 193
     d9e:	92 07       	cpc	r25, r18
     da0:	0c f4       	brge	.+2      	; 0xda4 <buttonHandler+0x68c>
     da2:	7b c1       	rjmp	.+758    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 10;
     da4:	0a 97       	sbiw	r24, 0x0a	; 10
     da6:	82 8b       	std	Z+18, r24	; 0x12
     da8:	93 8b       	std	Z+19, r25	; 0x13
     daa:	77 c1       	rjmp	.+750    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	59 f4       	brne	.+22     	; 0xdc6 <buttonHandler+0x6ae>
				{
					if(profiles[*profile_index].op2>-1600)
     db0:	82 89       	ldd	r24, Z+18	; 0x12
     db2:	93 89       	ldd	r25, Z+19	; 0x13
     db4:	a9 ef       	ldi	r26, 0xF9	; 249
     db6:	81 3c       	cpi	r24, 0xC1	; 193
     db8:	9a 07       	cpc	r25, r26
     dba:	0c f4       	brge	.+2      	; 0xdbe <buttonHandler+0x6a6>
     dbc:	6e c1       	rjmp	.+732    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 10;
     dbe:	0a 97       	sbiw	r24, 0x0a	; 10
     dc0:	82 8b       	std	Z+18, r24	; 0x12
     dc2:	93 8b       	std	Z+19, r25	; 0x13
     dc4:	6a c1       	rjmp	.+724    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	51 f4       	brne	.+20     	; 0xdde <buttonHandler+0x6c6>
				{
					if(profiles[*profile_index].op2>9)
     dca:	82 89       	ldd	r24, Z+18	; 0x12
     dcc:	93 89       	ldd	r25, Z+19	; 0x13
     dce:	8a 30       	cpi	r24, 0x0A	; 10
     dd0:	91 05       	cpc	r25, r1
     dd2:	0c f4       	brge	.+2      	; 0xdd6 <buttonHandler+0x6be>
     dd4:	62 c1       	rjmp	.+708    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 10;
     dd6:	0a 97       	sbiw	r24, 0x0a	; 10
     dd8:	82 8b       	std	Z+18, r24	; 0x12
     dda:	93 8b       	std	Z+19, r25	; 0x13
     ddc:	5e c1       	rjmp	.+700    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	59 f4       	brne	.+22     	; 0xdf8 <buttonHandler+0x6e0>
				{
					if(profiles[*profile_index].op2>-1600)
     de2:	82 89       	ldd	r24, Z+18	; 0x12
     de4:	93 89       	ldd	r25, Z+19	; 0x13
     de6:	b9 ef       	ldi	r27, 0xF9	; 249
     de8:	81 3c       	cpi	r24, 0xC1	; 193
     dea:	9b 07       	cpc	r25, r27
     dec:	0c f4       	brge	.+2      	; 0xdf0 <buttonHandler+0x6d8>
     dee:	55 c1       	rjmp	.+682    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 10;
     df0:	0a 97       	sbiw	r24, 0x0a	; 10
     df2:	82 8b       	std	Z+18, r24	; 0x12
     df4:	93 8b       	std	Z+19, r25	; 0x13
     df6:	51 c1       	rjmp	.+674    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CONSTVOLT)
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	51 f4       	brne	.+20     	; 0xe10 <buttonHandler+0x6f8>
				{
					if(profiles[*profile_index].op2>9)
     dfc:	82 89       	ldd	r24, Z+18	; 0x12
     dfe:	93 89       	ldd	r25, Z+19	; 0x13
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	91 05       	cpc	r25, r1
     e04:	0c f4       	brge	.+2      	; 0xe08 <buttonHandler+0x6f0>
     e06:	49 c1       	rjmp	.+658    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 1;
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	82 8b       	std	Z+18, r24	; 0x12
     e0c:	93 8b       	std	Z+19, r25	; 0x13
     e0e:	45 c1       	rjmp	.+650    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     e10:	85 30       	cpi	r24, 0x05	; 5
     e12:	09 f0       	breq	.+2      	; 0xe16 <buttonHandler+0x6fe>
     e14:	42 c1       	rjmp	.+644    	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op2>-1600)
     e16:	82 89       	ldd	r24, Z+18	; 0x12
     e18:	93 89       	ldd	r25, Z+19	; 0x13
     e1a:	29 ef       	ldi	r18, 0xF9	; 249
     e1c:	81 3c       	cpi	r24, 0xC1	; 193
     e1e:	92 07       	cpc	r25, r18
     e20:	0c f4       	brge	.+2      	; 0xe24 <buttonHandler+0x70c>
     e22:	3b c1       	rjmp	.+630    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op2 = profiles[*profile_index].op2 - 10;
     e24:	0a 97       	sbiw	r24, 0x0a	; 10
     e26:	82 8b       	std	Z+18, r24	; 0x12
     e28:	93 8b       	std	Z+19, r25	; 0x13
     e2a:	37 c1       	rjmp	.+622    	; 0x109a <buttonHandler+0x982>
				}
				
			}
			else if(*profile_edit_index == 3)
     e2c:	73 30       	cpi	r23, 0x03	; 3
     e2e:	09 f0       	breq	.+2      	; 0xe32 <buttonHandler+0x71a>
     e30:	48 c0       	rjmp	.+144    	; 0xec2 <buttonHandler+0x7aa>
			{
				if(profiles[*profile_index].type == SWV)
     e32:	9c 91       	ld	r25, X
     e34:	8d e1       	ldi	r24, 0x1D	; 29
     e36:	98 9f       	mul	r25, r24
     e38:	f0 01       	movw	r30, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	ec 0f       	add	r30, r28
     e3e:	fd 1f       	adc	r31, r29
     e40:	87 85       	ldd	r24, Z+15	; 0x0f
     e42:	88 23       	and	r24, r24
     e44:	59 f4       	brne	.+22     	; 0xe5c <buttonHandler+0x744>
				{
					if(profiles[*profile_index].op3>-1600)
     e46:	84 89       	ldd	r24, Z+20	; 0x14
     e48:	95 89       	ldd	r25, Z+21	; 0x15
     e4a:	a9 ef       	ldi	r26, 0xF9	; 249
     e4c:	81 3c       	cpi	r24, 0xC1	; 193
     e4e:	9a 07       	cpc	r25, r26
     e50:	0c f4       	brge	.+2      	; 0xe54 <buttonHandler+0x73c>
     e52:	23 c1       	rjmp	.+582    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 - 10;
     e54:	0a 97       	sbiw	r24, 0x0a	; 10
     e56:	84 8b       	std	Z+20, r24	; 0x14
     e58:	95 8b       	std	Z+21, r25	; 0x15
     e5a:	1f c1       	rjmp	.+574    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	59 f4       	brne	.+22     	; 0xe76 <buttonHandler+0x75e>
				{
					if(profiles[*profile_index].op3>-1600)
     e60:	84 89       	ldd	r24, Z+20	; 0x14
     e62:	95 89       	ldd	r25, Z+21	; 0x15
     e64:	b9 ef       	ldi	r27, 0xF9	; 249
     e66:	81 3c       	cpi	r24, 0xC1	; 193
     e68:	9b 07       	cpc	r25, r27
     e6a:	0c f4       	brge	.+2      	; 0xe6e <buttonHandler+0x756>
     e6c:	16 c1       	rjmp	.+556    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 - 10;
     e6e:	0a 97       	sbiw	r24, 0x0a	; 10
     e70:	84 8b       	std	Z+20, r24	; 0x14
     e72:	95 8b       	std	Z+21, r25	; 0x15
     e74:	12 c1       	rjmp	.+548    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	51 f4       	brne	.+20     	; 0xe8e <buttonHandler+0x776>
				{
					if(profiles[*profile_index].op3>0)
     e7a:	84 89       	ldd	r24, Z+20	; 0x14
     e7c:	95 89       	ldd	r25, Z+21	; 0x15
     e7e:	18 16       	cp	r1, r24
     e80:	19 06       	cpc	r1, r25
     e82:	0c f0       	brlt	.+2      	; 0xe86 <buttonHandler+0x76e>
     e84:	0a c1       	rjmp	.+532    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 - 1;
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	84 8b       	std	Z+20, r24	; 0x14
     e8a:	95 8b       	std	Z+21, r25	; 0x15
     e8c:	06 c1       	rjmp	.+524    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	59 f4       	brne	.+22     	; 0xea8 <buttonHandler+0x790>
				{
					if(profiles[*profile_index].op3>-1600)
     e92:	84 89       	ldd	r24, Z+20	; 0x14
     e94:	95 89       	ldd	r25, Z+21	; 0x15
     e96:	29 ef       	ldi	r18, 0xF9	; 249
     e98:	81 3c       	cpi	r24, 0xC1	; 193
     e9a:	92 07       	cpc	r25, r18
     e9c:	0c f4       	brge	.+2      	; 0xea0 <buttonHandler+0x788>
     e9e:	fd c0       	rjmp	.+506    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 - 10;
     ea0:	0a 97       	sbiw	r24, 0x0a	; 10
     ea2:	84 8b       	std	Z+20, r24	; 0x14
     ea4:	95 8b       	std	Z+21, r25	; 0x15
     ea6:	f9 c0       	rjmp	.+498    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     ea8:	85 30       	cpi	r24, 0x05	; 5
     eaa:	09 f0       	breq	.+2      	; 0xeae <buttonHandler+0x796>
     eac:	f6 c0       	rjmp	.+492    	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op3>9)
     eae:	84 89       	ldd	r24, Z+20	; 0x14
     eb0:	95 89       	ldd	r25, Z+21	; 0x15
     eb2:	8a 30       	cpi	r24, 0x0A	; 10
     eb4:	91 05       	cpc	r25, r1
     eb6:	0c f4       	brge	.+2      	; 0xeba <buttonHandler+0x7a2>
     eb8:	f0 c0       	rjmp	.+480    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op3 = profiles[*profile_index].op3 - 10;
     eba:	0a 97       	sbiw	r24, 0x0a	; 10
     ebc:	84 8b       	std	Z+20, r24	; 0x14
     ebe:	95 8b       	std	Z+21, r25	; 0x15
     ec0:	ec c0       	rjmp	.+472    	; 0x109a <buttonHandler+0x982>
				}
				
			}
			else if(*profile_edit_index == 4)
     ec2:	74 30       	cpi	r23, 0x04	; 4
     ec4:	09 f0       	breq	.+2      	; 0xec8 <buttonHandler+0x7b0>
     ec6:	47 c0       	rjmp	.+142    	; 0xf56 <buttonHandler+0x83e>
			{
				if(profiles[*profile_index].type == SWV)
     ec8:	9c 91       	ld	r25, X
     eca:	8d e1       	ldi	r24, 0x1D	; 29
     ecc:	98 9f       	mul	r25, r24
     ece:	f0 01       	movw	r30, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	ec 0f       	add	r30, r28
     ed4:	fd 1f       	adc	r31, r29
     ed6:	87 85       	ldd	r24, Z+15	; 0x0f
     ed8:	88 23       	and	r24, r24
     eda:	51 f4       	brne	.+20     	; 0xef0 <buttonHandler+0x7d8>
				{
					if(profiles[*profile_index].op4>0)
     edc:	86 89       	ldd	r24, Z+22	; 0x16
     ede:	97 89       	ldd	r25, Z+23	; 0x17
     ee0:	18 16       	cp	r1, r24
     ee2:	19 06       	cpc	r1, r25
     ee4:	0c f0       	brlt	.+2      	; 0xee8 <buttonHandler+0x7d0>
     ee6:	d9 c0       	rjmp	.+434    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4--;
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	86 8b       	std	Z+22, r24	; 0x16
     eec:	97 8b       	std	Z+23, r25	; 0x17
     eee:	d5 c0       	rjmp	.+426    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	51 f4       	brne	.+20     	; 0xf08 <buttonHandler+0x7f0>
				{
					if(profiles[*profile_index].op4>1)
     ef4:	86 89       	ldd	r24, Z+22	; 0x16
     ef6:	97 89       	ldd	r25, Z+23	; 0x17
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	91 05       	cpc	r25, r1
     efc:	0c f4       	brge	.+2      	; 0xf00 <buttonHandler+0x7e8>
     efe:	cd c0       	rjmp	.+410    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4--;
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	86 8b       	std	Z+22, r24	; 0x16
     f04:	97 8b       	std	Z+23, r25	; 0x17
     f06:	c9 c0       	rjmp	.+402    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	59 f4       	brne	.+22     	; 0xf22 <buttonHandler+0x80a>
				{
					if(profiles[*profile_index].op4>-1600)
     f0c:	86 89       	ldd	r24, Z+22	; 0x16
     f0e:	97 89       	ldd	r25, Z+23	; 0x17
     f10:	a9 ef       	ldi	r26, 0xF9	; 249
     f12:	81 3c       	cpi	r24, 0xC1	; 193
     f14:	9a 07       	cpc	r25, r26
     f16:	0c f4       	brge	.+2      	; 0xf1a <buttonHandler+0x802>
     f18:	c0 c0       	rjmp	.+384    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 - 10;
     f1a:	0a 97       	sbiw	r24, 0x0a	; 10
     f1c:	86 8b       	std	Z+22, r24	; 0x16
     f1e:	97 8b       	std	Z+23, r25	; 0x17
     f20:	bc c0       	rjmp	.+376    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	51 f4       	brne	.+20     	; 0xf3a <buttonHandler+0x822>
				{
					if(profiles[*profile_index].op4>10)
     f26:	86 89       	ldd	r24, Z+22	; 0x16
     f28:	97 89       	ldd	r25, Z+23	; 0x17
     f2a:	8b 30       	cpi	r24, 0x0B	; 11
     f2c:	91 05       	cpc	r25, r1
     f2e:	0c f4       	brge	.+2      	; 0xf32 <buttonHandler+0x81a>
     f30:	b4 c0       	rjmp	.+360    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 - 10;
     f32:	0a 97       	sbiw	r24, 0x0a	; 10
     f34:	86 8b       	std	Z+22, r24	; 0x16
     f36:	97 8b       	std	Z+23, r25	; 0x17
     f38:	b0 c0       	rjmp	.+352    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     f3a:	85 30       	cpi	r24, 0x05	; 5
     f3c:	09 f0       	breq	.+2      	; 0xf40 <buttonHandler+0x828>
     f3e:	ad c0       	rjmp	.+346    	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op4>99)
     f40:	86 89       	ldd	r24, Z+22	; 0x16
     f42:	97 89       	ldd	r25, Z+23	; 0x17
     f44:	84 36       	cpi	r24, 0x64	; 100
     f46:	91 05       	cpc	r25, r1
     f48:	0c f4       	brge	.+2      	; 0xf4c <buttonHandler+0x834>
     f4a:	a7 c0       	rjmp	.+334    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op4 = profiles[*profile_index].op4 - 100;
     f4c:	84 56       	subi	r24, 0x64	; 100
     f4e:	90 40       	sbci	r25, 0x00	; 0
     f50:	86 8b       	std	Z+22, r24	; 0x16
     f52:	97 8b       	std	Z+23, r25	; 0x17
     f54:	a2 c0       	rjmp	.+324    	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 5)
     f56:	75 30       	cpi	r23, 0x05	; 5
     f58:	09 f0       	breq	.+2      	; 0xf5c <buttonHandler+0x844>
     f5a:	46 c0       	rjmp	.+140    	; 0xfe8 <buttonHandler+0x8d0>
			{
				if(profiles[*profile_index].type == SWV)
     f5c:	9c 91       	ld	r25, X
     f5e:	8d e1       	ldi	r24, 0x1D	; 29
     f60:	98 9f       	mul	r25, r24
     f62:	f0 01       	movw	r30, r0
     f64:	11 24       	eor	r1, r1
     f66:	ec 0f       	add	r30, r28
     f68:	fd 1f       	adc	r31, r29
     f6a:	87 85       	ldd	r24, Z+15	; 0x0f
     f6c:	88 23       	and	r24, r24
     f6e:	51 f4       	brne	.+20     	; 0xf84 <buttonHandler+0x86c>
				{
					if(profiles[*profile_index].op5>0)
     f70:	80 8d       	ldd	r24, Z+24	; 0x18
     f72:	91 8d       	ldd	r25, Z+25	; 0x19
     f74:	18 16       	cp	r1, r24
     f76:	19 06       	cpc	r1, r25
     f78:	0c f0       	brlt	.+2      	; 0xf7c <buttonHandler+0x864>
     f7a:	8f c0       	rjmp	.+286    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5--;
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	80 8f       	std	Z+24, r24	; 0x18
     f80:	91 8f       	std	Z+25, r25	; 0x19
     f82:	8b c0       	rjmp	.+278    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	51 f4       	brne	.+20     	; 0xf9c <buttonHandler+0x884>
				{
					if(profiles[*profile_index].op5>1)
     f88:	80 8d       	ldd	r24, Z+24	; 0x18
     f8a:	91 8d       	ldd	r25, Z+25	; 0x19
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	0c f4       	brge	.+2      	; 0xf94 <buttonHandler+0x87c>
     f92:	83 c0       	rjmp	.+262    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5--;
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	80 8f       	std	Z+24, r24	; 0x18
     f98:	91 8f       	std	Z+25, r25	; 0x19
     f9a:	7f c0       	rjmp	.+254    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == ACV)
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	59 f4       	brne	.+22     	; 0xfb6 <buttonHandler+0x89e>
				{
					if(profiles[*profile_index].op5>-1600)
     fa0:	80 8d       	ldd	r24, Z+24	; 0x18
     fa2:	91 8d       	ldd	r25, Z+25	; 0x19
     fa4:	b9 ef       	ldi	r27, 0xF9	; 249
     fa6:	81 3c       	cpi	r24, 0xC1	; 193
     fa8:	9b 07       	cpc	r25, r27
     faa:	0c f4       	brge	.+2      	; 0xfae <buttonHandler+0x896>
     fac:	76 c0       	rjmp	.+236    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5 = profiles[*profile_index].op5 - 10;
     fae:	0a 97       	sbiw	r24, 0x0a	; 10
     fb0:	80 8f       	std	Z+24, r24	; 0x18
     fb2:	91 8f       	std	Z+25, r25	; 0x19
     fb4:	72 c0       	rjmp	.+228    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	51 f4       	brne	.+20     	; 0xfce <buttonHandler+0x8b6>
				{
					if(profiles[*profile_index].op5>1)
     fba:	80 8d       	ldd	r24, Z+24	; 0x18
     fbc:	91 8d       	ldd	r25, Z+25	; 0x19
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	91 05       	cpc	r25, r1
     fc2:	0c f4       	brge	.+2      	; 0xfc6 <buttonHandler+0x8ae>
     fc4:	6a c0       	rjmp	.+212    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5--;
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	80 8f       	std	Z+24, r24	; 0x18
     fca:	91 8f       	std	Z+25, r25	; 0x19
     fcc:	66 c0       	rjmp	.+204    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CA)
     fce:	85 30       	cpi	r24, 0x05	; 5
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <buttonHandler+0x8bc>
     fd2:	63 c0       	rjmp	.+198    	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op5>10)
     fd4:	80 8d       	ldd	r24, Z+24	; 0x18
     fd6:	91 8d       	ldd	r25, Z+25	; 0x19
     fd8:	8b 30       	cpi	r24, 0x0B	; 11
     fda:	91 05       	cpc	r25, r1
     fdc:	0c f4       	brge	.+2      	; 0xfe0 <buttonHandler+0x8c8>
     fde:	5d c0       	rjmp	.+186    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op5 = profiles[*profile_index].op5 - 10;
     fe0:	0a 97       	sbiw	r24, 0x0a	; 10
     fe2:	80 8f       	std	Z+24, r24	; 0x18
     fe4:	91 8f       	std	Z+25, r25	; 0x19
     fe6:	59 c0       	rjmp	.+178    	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 6)
     fe8:	76 30       	cpi	r23, 0x06	; 6
     fea:	c1 f5       	brne	.+112    	; 0x105c <buttonHandler+0x944>
			{
				if(profiles[*profile_index].type == SWV)
     fec:	9c 91       	ld	r25, X
     fee:	8d e1       	ldi	r24, 0x1D	; 29
     ff0:	98 9f       	mul	r25, r24
     ff2:	f0 01       	movw	r30, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	ec 0f       	add	r30, r28
     ff8:	fd 1f       	adc	r31, r29
     ffa:	87 85       	ldd	r24, Z+15	; 0x0f
     ffc:	88 23       	and	r24, r24
     ffe:	39 f4       	brne	.+14     	; 0x100e <buttonHandler+0x8f6>
				{
					if(profiles[*profile_index].curr_range == RANGE_10UA)
    1000:	84 8d       	ldd	r24, Z+28	; 0x1c
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	09 f0       	breq	.+2      	; 0x1008 <buttonHandler+0x8f0>
    1006:	49 c0       	rjmp	.+146    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_50UA;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	84 8f       	std	Z+28, r24	; 0x1c
    100c:	46 c0       	rjmp	.+140    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == CV)
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	39 f4       	brne	.+14     	; 0x1020 <buttonHandler+0x908>
				{
					if(profiles[*profile_index].curr_range == RANGE_10UA)
    1012:	84 8d       	ldd	r24, Z+28	; 0x1c
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <buttonHandler+0x902>
    1018:	40 c0       	rjmp	.+128    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_50UA;
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	84 8f       	std	Z+28, r24	; 0x1c
    101e:	3d c0       	rjmp	.+122    	; 0x109a <buttonHandler+0x982>
				
				}
				else if(profiles[*profile_index].type == ACV)
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	49 f4       	brne	.+18     	; 0x1036 <buttonHandler+0x91e>
				{
					if(profiles[*profile_index].op6>0)
    1024:	82 8d       	ldd	r24, Z+26	; 0x1a
    1026:	93 8d       	ldd	r25, Z+27	; 0x1b
    1028:	18 16       	cp	r1, r24
    102a:	19 06       	cpc	r1, r25
    102c:	b4 f5       	brge	.+108    	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op6 = profiles[*profile_index].op6 - 1;
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	82 8f       	std	Z+26, r24	; 0x1a
    1032:	93 8f       	std	Z+27, r25	; 0x1b
    1034:	32 c0       	rjmp	.+100    	; 0x109a <buttonHandler+0x982>
				}
				else if(profiles[*profile_index].type == LSV)
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	31 f4       	brne	.+12     	; 0x1046 <buttonHandler+0x92e>
				{
					if(profiles[*profile_index].curr_range == RANGE_10UA)
    103a:	84 8d       	ldd	r24, Z+28	; 0x1c
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	69 f5       	brne	.+90     	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].curr_range = RANGE_50UA;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	84 8f       	std	Z+28, r24	; 0x1c
    1044:	2a c0       	rjmp	.+84     	; 0x109a <buttonHandler+0x982>
				
				}
				else if(profiles[*profile_index].type == CA)
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	41 f5       	brne	.+80     	; 0x109a <buttonHandler+0x982>
				{
					if(profiles[*profile_index].op6>1)
    104a:	82 8d       	ldd	r24, Z+26	; 0x1a
    104c:	93 8d       	ldd	r25, Z+27	; 0x1b
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	91 05       	cpc	r25, r1
    1052:	1c f1       	brlt	.+70     	; 0x109a <buttonHandler+0x982>
						profiles[*profile_index].op6 = profiles[*profile_index].op6 - 1;
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	82 8f       	std	Z+26, r24	; 0x1a
    1058:	93 8f       	std	Z+27, r25	; 0x1b
    105a:	1f c0       	rjmp	.+62     	; 0x109a <buttonHandler+0x982>
				}
			}
			else if(*profile_edit_index == 7)
    105c:	77 30       	cpi	r23, 0x07	; 7
    105e:	e9 f4       	brne	.+58     	; 0x109a <buttonHandler+0x982>
			{
				if(profiles[*profile_index].curr_range == RANGE_10UA)
    1060:	8c 91       	ld	r24, X
    1062:	9d e1       	ldi	r25, 0x1D	; 29
    1064:	89 9f       	mul	r24, r25
    1066:	f0 01       	movw	r30, r0
    1068:	11 24       	eor	r1, r1
    106a:	ec 0f       	add	r30, r28
    106c:	fd 1f       	adc	r31, r29
    106e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	99 f4       	brne	.+38     	; 0x109a <buttonHandler+0x982>
					profiles[*profile_index].curr_range = RANGE_50UA;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	84 8f       	std	Z+28, r24	; 0x1c
    1078:	10 c0       	rjmp	.+32     	; 0x109a <buttonHandler+0x982>
			}
		}
			
	}
	else if (*status == PROFILE_RESULTS)
    107a:	24 30       	cpi	r18, 0x04	; 4
    107c:	29 f4       	brne	.+10     	; 0x1088 <buttonHandler+0x970>
	{
		if(dir == RIGHT)
    107e:	92 30       	cpi	r25, 0x02	; 2
    1080:	61 f0       	breq	.+24     	; 0x109a <buttonHandler+0x982>
		{//TODO write results to EEPROM
		}
		else
			*status = PROFILE_SEL;
    1082:	f6 01       	movw	r30, r12
    1084:	10 82       	st	Z, r1
    1086:	09 c0       	rjmp	.+18     	; 0x109a <buttonHandler+0x982>
    1088:	80 e1       	ldi	r24, 0x10	; 16
    108a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    108c:	22 e3       	ldi	r18, 0x32	; 50
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	f9 01       	movw	r30, r18
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <buttonHandler+0x97a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	d9 f7       	brne	.-10     	; 0x1090 <buttonHandler+0x978>
    109a:	80 ed       	ldi	r24, 0xD0	; 208
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	22 e3       	ldi	r18, 0x32	; 50
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <buttonHandler+0x98c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10aa:	d9 f7       	brne	.-10     	; 0x10a2 <buttonHandler+0x98a>
	else
		_delay_ms(1000);//return 0;

	_delay_ms(200);
	return 1;
}
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	08 95       	ret

000010c2 <CONSTVOLT_test>:

	return i;

}

int16_t CONSTVOLT_test (char* name, int16_t voltage, int16_t time) {
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	8b 01       	movw	r16, r22
    10cc:	ea 01       	movw	r28, r20

	uint16_t elapsed;
	int16_t current_DAC;

	//check limits
	if(voltage<-1600 || voltage>1600 || time<0 || time>9999)
    10ce:	cb 01       	movw	r24, r22
    10d0:	80 5c       	subi	r24, 0xC0	; 192
    10d2:	99 4f       	sbci	r25, 0xF9	; 249
    10d4:	81 58       	subi	r24, 0x81	; 129
    10d6:	9c 40       	sbci	r25, 0x0C	; 12
    10d8:	30 f4       	brcc	.+12     	; 0x10e6 <CONSTVOLT_test+0x24>
    10da:	57 fd       	sbrc	r21, 7
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <CONSTVOLT_test+0x24>
    10de:	47 e2       	ldi	r20, 0x27	; 39
    10e0:	c0 31       	cpi	r28, 0x10	; 16
    10e2:	d4 07       	cpc	r29, r20
    10e4:	64 f0       	brlt	.+24     	; 0x10fe <CONSTVOLT_test+0x3c>
	{
		lcdClear();
    10e6:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    10ea:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("outside limits",14);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e2       	ldi	r25, 0x20	; 32
    10f2:	6e e0       	ldi	r22, 0x0E	; 14
    10f4:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    10f8:	4f ef       	ldi	r20, 0xFF	; 255
    10fa:	5f ef       	ldi	r21, 0xFF	; 255
    10fc:	61 c0       	rjmp	.+194    	; 0x11c0 <CONSTVOLT_test+0xfe>
	}

	current_DAC = (int16_t) (round(voltage*(4096.0/3300))+2048);  

	//init timer
	TIMER.CTRLA = TC_CLKSEL_DIV1024_gc;
    10fe:	87 e0       	ldi	r24, 0x07	; 7
    1100:	80 93 00 08 	sts	0x0800, r24

	//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    1104:	e0 e8       	ldi	r30, 0x80	; 128
    1106:	f6 e0       	ldi	r31, 0x06	; 6
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN3_bm; //switch3
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTCLR = PIN0_bm; //switch1
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	86 83       	std	Z+6, r24	; 0x06

	//apply voltage
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    1122:	88 23       	and	r24, r24
    1124:	c9 f3       	breq	.-14     	; 0x1118 <CONSTVOLT_test+0x56>
		lcdHome();
		lcdPrintData("outside limits",14);
		return -1;
	}

	current_DAC = (int16_t) (round(voltage*(4096.0/3300))+2048);  
    1126:	b8 01       	movw	r22, r16
    1128:	88 27       	eor	r24, r24
    112a:	77 fd       	sbrc	r23, 7
    112c:	80 95       	com	r24
    112e:	98 2f       	mov	r25, r24
    1130:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1134:	2a e0       	ldi	r18, 0x0A	; 10
    1136:	30 ee       	ldi	r19, 0xE0	; 224
    1138:	4e e9       	ldi	r20, 0x9E	; 158
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1140:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
	PORTE.OUTSET = PIN3_bm; //switch3
	PORTE.OUTCLR = PIN0_bm; //switch1

	//apply voltage
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	55 e4       	ldi	r21, 0x45	; 69
    114c:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    1150:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	b9 01       	movw	r22, r18
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	
	//start timer
	TIMER.CNT = 0;
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f8 e0       	ldi	r31, 0x08	; 8
    1168:	10 a2       	std	Z+32, r1	; 0x20
    116a:	11 a2       	std	Z+33, r1	; 0x21
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <CONSTVOLT_test+0xc6>

	elapsed = 0;
	while(elapsed < time) {

		//wait for 1 sec
		while(TIMER.CNT<1953) {}
    1172:	80 91 20 08 	lds	r24, 0x0820
    1176:	90 91 21 08 	lds	r25, 0x0821
    117a:	81 5a       	subi	r24, 0xA1	; 161
    117c:	97 40       	sbci	r25, 0x07	; 7
    117e:	c8 f3       	brcs	.-14     	; 0x1172 <CONSTVOLT_test+0xb0>

		//reset timer
		TIMER.CNT = 0;
    1180:	10 a2       	std	Z+32, r1	; 0x20
    1182:	11 a2       	std	Z+33, r1	; 0x21

		//increment elapsed
		elapsed++;
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//start timer
	TIMER.CNT = 0;

	elapsed = 0;
	while(elapsed < time) {
    1188:	2c 17       	cp	r18, r28
    118a:	3d 07       	cpc	r19, r29
    118c:	90 f3       	brcs	.-28     	; 0x1172 <CONSTVOLT_test+0xb0>
		elapsed++;

	}
	
	
	PORTE.OUTSET = PIN0_bm; //switch1
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	f6 e0       	ldi	r31, 0x06	; 6
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTCLR = PIN1_bm; //switch0
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	86 83       	std	Z+6, r24	; 0x06

	current_DAC = 2048;
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    11ac:	88 23       	and	r24, r24
    11ae:	c9 f3       	breq	.-14     	; 0x11a2 <CONSTVOLT_test+0xe0>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	78 e0       	ldi	r23, 0x08	; 8
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	return elapsed;
    11be:	ae 01       	movw	r20, r28
}
    11c0:	ca 01       	movw	r24, r20
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <LSV_test>:
	return k;

}

int16_t LSV_test (char* name, int16_t settle, int16_t start, int16_t stop, int16_t slope, int16_t sample_rate, uint8_t curr_range)
{
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	c6 5c       	subi	r28, 0xC6	; 198
    11f6:	db 40       	sbci	r29, 0x0B	; 11
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	c4 54       	subi	r28, 0x44	; 68
    11fe:	d4 4f       	sbci	r29, 0xF4	; 244
    1200:	88 83       	st	Y, r24
    1202:	99 83       	std	Y+1, r25	; 0x01
    1204:	cc 5b       	subi	r28, 0xBC	; 188
    1206:	db 40       	sbci	r29, 0x0B	; 11
    1208:	c2 54       	subi	r28, 0x42	; 66
    120a:	d4 4f       	sbci	r29, 0xF4	; 244
    120c:	68 83       	st	Y, r22
    120e:	79 83       	std	Y+1, r23	; 0x01
    1210:	ce 5b       	subi	r28, 0xBE	; 190
    1212:	db 40       	sbci	r29, 0x0B	; 11
    1214:	c0 54       	subi	r28, 0x40	; 64
    1216:	d4 4f       	sbci	r29, 0xF4	; 244
    1218:	48 83       	st	Y, r20
    121a:	59 83       	std	Y+1, r21	; 0x01
    121c:	c0 5c       	subi	r28, 0xC0	; 192
    121e:	db 40       	sbci	r29, 0x0B	; 11
    1220:	19 01       	movw	r2, r18
    1222:	ce 53       	subi	r28, 0x3E	; 62
    1224:	d4 4f       	sbci	r29, 0xF4	; 244
    1226:	08 83       	st	Y, r16
    1228:	19 83       	std	Y+1, r17	; 0x01
    122a:	c2 5c       	subi	r28, 0xC2	; 194
    122c:	db 40       	sbci	r29, 0x0B	; 11
    122e:	cc 53       	subi	r28, 0x3C	; 60
    1230:	d4 4f       	sbci	r29, 0xF4	; 244
    1232:	e8 82       	st	Y, r14
    1234:	f9 82       	std	Y+1, r15	; 0x01
    1236:	c4 5c       	subi	r28, 0xC4	; 196
    1238:	db 40       	sbci	r29, 0x0B	; 11
    123a:	ca 53       	subi	r28, 0x3A	; 58
    123c:	d4 4f       	sbci	r29, 0xF4	; 244
    123e:	c8 82       	st	Y, r12
    1240:	c6 5c       	subi	r28, 0xC6	; 198
    1242:	db 40       	sbci	r29, 0x0B	; 11
	//storing ADC results
	int16_t current[LSV_MAX_DATAPOINTS];
	int16_t result_buffer[LSV_BUFFER_SIZE];

	//check limits
	if(start<-1600 || start>1600 || stop<-1600 || stop>1600 || slope>5000 || slope<10 || sample_rate<1 || sample_rate>1600)
    1244:	ca 01       	movw	r24, r20
    1246:	80 5c       	subi	r24, 0xC0	; 192
    1248:	99 4f       	sbci	r25, 0xF9	; 249
    124a:	81 58       	subi	r24, 0x81	; 129
    124c:	9c 40       	sbci	r25, 0x0C	; 12
    124e:	c0 f4       	brcc	.+48     	; 0x1280 <LSV_test+0xb4>
    1250:	30 ec       	ldi	r19, 0xC0	; 192
    1252:	23 16       	cp	r2, r19
    1254:	39 ef       	ldi	r19, 0xF9	; 249
    1256:	33 06       	cpc	r3, r19
    1258:	9c f0       	brlt	.+38     	; 0x1280 <LSV_test+0xb4>
    125a:	61 e4       	ldi	r22, 0x41	; 65
    125c:	26 16       	cp	r2, r22
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	36 06       	cpc	r3, r22
    1262:	74 f4       	brge	.+28     	; 0x1280 <LSV_test+0xb4>
    1264:	73 e1       	ldi	r23, 0x13	; 19
    1266:	09 38       	cpi	r16, 0x89	; 137
    1268:	17 07       	cpc	r17, r23
    126a:	54 f4       	brge	.+20     	; 0x1280 <LSV_test+0xb4>
    126c:	0a 30       	cpi	r16, 0x0A	; 10
    126e:	11 05       	cpc	r17, r1
    1270:	3c f0       	brlt	.+14     	; 0x1280 <LSV_test+0xb4>
    1272:	1e 14       	cp	r1, r14
    1274:	1f 04       	cpc	r1, r15
    1276:	24 f4       	brge	.+8      	; 0x1280 <LSV_test+0xb4>
    1278:	c7 01       	movw	r24, r14
    127a:	81 54       	subi	r24, 0x41	; 65
    127c:	96 40       	sbci	r25, 0x06	; 6
    127e:	44 f0       	brlt	.+16     	; 0x1290 <LSV_test+0xc4>
	{
		lcdClear();
    1280:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    1284:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("outside limits",14);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e2       	ldi	r25, 0x20	; 32
    128c:	6e e0       	ldi	r22, 0x0E	; 14
    128e:	85 c0       	rjmp	.+266    	; 0x139a <LSV_test+0x1ce>
		return -1;
	}

	start_DAC = (int16_t) (round(start*(4096.0/3300))+2048);  
    1290:	c0 54       	subi	r28, 0x40	; 64
    1292:	d4 4f       	sbci	r29, 0xF4	; 244
    1294:	28 81       	ld	r18, Y
    1296:	39 81       	ldd	r19, Y+1	; 0x01
    1298:	c0 5c       	subi	r28, 0xC0	; 192
    129a:	db 40       	sbci	r29, 0x0B	; 11
    129c:	b9 01       	movw	r22, r18
    129e:	88 27       	eor	r24, r24
    12a0:	77 fd       	sbrc	r23, 7
    12a2:	80 95       	com	r24
    12a4:	98 2f       	mov	r25, r24
    12a6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    12aa:	2a e0       	ldi	r18, 0x0A	; 10
    12ac:	30 ee       	ldi	r19, 0xE0	; 224
    12ae:	4e e9       	ldi	r20, 0x9E	; 158
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    12b6:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	55 e4       	ldi	r21, 0x45	; 69
    12c2:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    12c6:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    12ca:	6b 01       	movw	r12, r22
	stop_DAC = (int16_t) (round(stop*(4096.0/3300))+2048);  
    12cc:	b1 01       	movw	r22, r2
    12ce:	88 27       	eor	r24, r24
    12d0:	77 fd       	sbrc	r23, 7
    12d2:	80 95       	com	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 ee       	ldi	r19, 0xE0	; 224
    12de:	4e e9       	ldi	r20, 0x9E	; 158
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    12e6:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	55 e4       	ldi	r21, 0x45	; 69
    12f2:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    12f6:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    12fa:	2b 01       	movw	r4, r22
	steps_per_sample = (uint16_t) (round(sample_rate*(4096.0/3300)));
    12fc:	cc 53       	subi	r28, 0x3C	; 60
    12fe:	d4 4f       	sbci	r29, 0xF4	; 244
    1300:	e8 81       	ld	r30, Y
    1302:	f9 81       	ldd	r31, Y+1	; 0x01
    1304:	c4 5c       	subi	r28, 0xC4	; 196
    1306:	db 40       	sbci	r29, 0x0B	; 11
    1308:	bf 01       	movw	r22, r30
    130a:	88 27       	eor	r24, r24
    130c:	77 fd       	sbrc	r23, 7
    130e:	80 95       	com	r24
    1310:	98 2f       	mov	r25, r24
    1312:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	30 ee       	ldi	r19, 0xE0	; 224
    131a:	4e e9       	ldi	r20, 0x9E	; 158
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1322:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1326:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	c6 54       	subi	r28, 0x46	; 70
    1330:	d4 4f       	sbci	r29, 0xF4	; 244
    1332:	68 83       	st	Y, r22
    1334:	79 83       	std	Y+1, r23	; 0x01
    1336:	ca 5b       	subi	r28, 0xBA	; 186
    1338:	db 40       	sbci	r29, 0x0B	; 11

	//determine starting direction and calculate
	if((stop-start)>0)
    133a:	c1 01       	movw	r24, r2
    133c:	c0 54       	subi	r28, 0x40	; 64
    133e:	d4 4f       	sbci	r29, 0xF4	; 244
    1340:	68 81       	ld	r22, Y
    1342:	79 81       	ldd	r23, Y+1	; 0x01
    1344:	c0 5c       	subi	r28, 0xC0	; 192
    1346:	db 40       	sbci	r29, 0x0B	; 11
    1348:	86 1b       	sub	r24, r22
    134a:	97 0b       	sbc	r25, r23
    134c:	18 16       	cp	r1, r24
    134e:	19 06       	cpc	r1, r25
    1350:	74 f4       	brge	.+28     	; 0x136e <LSV_test+0x1a2>
	{
		up=true;
		samples = (stop_DAC-start_DAC)/steps_per_sample;
    1352:	c2 01       	movw	r24, r4
    1354:	8c 19       	sub	r24, r12
    1356:	9d 09       	sbc	r25, r13
    1358:	b9 01       	movw	r22, r18
    135a:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodhi4>
    135e:	cb 01       	movw	r24, r22
    1360:	71 e0       	ldi	r23, 0x01	; 1
    1362:	c7 54       	subi	r28, 0x47	; 71
    1364:	d4 4f       	sbci	r29, 0xF4	; 244
    1366:	78 83       	st	Y, r23
    1368:	c9 5b       	subi	r28, 0xB9	; 185
    136a:	db 40       	sbci	r29, 0x0B	; 11
    136c:	0c c0       	rjmp	.+24     	; 0x1386 <LSV_test+0x1ba>
	}
	else
	{
		up=false;
		samples = (start_DAC-stop_DAC)/steps_per_sample;
    136e:	c6 01       	movw	r24, r12
    1370:	84 19       	sub	r24, r4
    1372:	95 09       	sbc	r25, r5
    1374:	b9 01       	movw	r22, r18
    1376:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodhi4>
    137a:	cb 01       	movw	r24, r22
    137c:	c7 54       	subi	r28, 0x47	; 71
    137e:	d4 4f       	sbci	r29, 0xF4	; 244
    1380:	18 82       	st	Y, r1
    1382:	c9 5b       	subi	r28, 0xB9	; 185
    1384:	db 40       	sbci	r29, 0x0B	; 11
	}

	if(samples > LSV_MAX_DATAPOINTS)
    1386:	8d 5d       	subi	r24, 0xDD	; 221
    1388:	95 40       	sbci	r25, 0x05	; 5
    138a:	60 f0       	brcs	.+24     	; 0x13a4 <LSV_test+0x1d8>
	{
		lcdClear();
    138c:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    1390:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("too many data points",20);
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	90 e2       	ldi	r25, 0x20	; 32
    1398:	64 e1       	ldi	r22, 0x14	; 20
    139a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    139e:	ef ef       	ldi	r30, 0xFF	; 255
    13a0:	ff ef       	ldi	r31, 0xFF	; 255
    13a2:	ff c1       	rjmp	.+1022   	; 0x17a2 <LSV_test+0x5d6>
    13a4:	ce 53       	subi	r28, 0x3E	; 62
    13a6:	d4 4f       	sbci	r29, 0xF4	; 244
    13a8:	28 81       	ld	r18, Y
    13aa:	39 81       	ldd	r19, Y+1	; 0x01
    13ac:	c2 5c       	subi	r28, 0xC2	; 194
    13ae:	db 40       	sbci	r29, 0x0B	; 11
    13b0:	b9 01       	movw	r22, r18
    13b2:	88 27       	eor	r24, r24
    13b4:	77 fd       	sbrc	r23, 7
    13b6:	80 95       	com	r24
    13b8:	98 2f       	mov	r25, r24
		return -1;
	}

	//2,000,000 [cycles/sec] * 1/slope [sec/mV] * 3300/4096 [mv/index]
	if(slope > 30)
    13ba:	2f 31       	cpi	r18, 0x1F	; 31
    13bc:	31 05       	cpc	r19, r1
    13be:	ec f0       	brlt	.+58     	; 0x13fa <LSV_test+0x22e>
	{
		step_time = (uint16_t) (round(2000000*(1.0/slope)*(3300.0/4096)));
    13c0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	9f e3       	ldi	r25, 0x3F	; 63
    13d0:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__divsf3>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	34 e2       	ldi	r19, 0x24	; 36
    13d8:	44 ef       	ldi	r20, 0xF4	; 244
    13da:	59 e4       	ldi	r21, 0x49	; 73
    13dc:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e4       	ldi	r19, 0x40	; 64
    13e4:	4e e4       	ldi	r20, 0x4E	; 78
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    13ec:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    13f0:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    13f4:	3b 01       	movw	r6, r22
		TIMER.CTRLA = TC_CLKSEL_DIV1_gc;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	1c c0       	rjmp	.+56     	; 0x1432 <LSV_test+0x266>
	}
	else
	{
		step_time = (uint16_t) (round(500000*(1.0/slope)*(3300.0/4096)));
    13fa:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    13fe:	9b 01       	movw	r18, r22
    1400:	ac 01       	movw	r20, r24
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	9f e3       	ldi	r25, 0x3F	; 63
    140a:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__divsf3>
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	34 e2       	ldi	r19, 0x24	; 36
    1412:	44 ef       	ldi	r20, 0xF4	; 244
    1414:	58 e4       	ldi	r21, 0x48	; 72
    1416:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e4       	ldi	r19, 0x40	; 64
    141e:	4e e4       	ldi	r20, 0x4E	; 78
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1426:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    142a:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    142e:	3b 01       	movw	r6, r22
		TIMER.CTRLA = TC_CLKSEL_DIV4_gc;
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	80 93 00 08 	sts	0x0800, r24

	for(k = 0; k < CV_BUFFER_SIZE; k++)
		result_buffer[k] = 0;

	//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    1436:	e0 e8       	ldi	r30, 0x80	; 128
    1438:	f6 e0       	ldi	r31, 0x06	; 6
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	85 83       	std	Z+5, r24	; 0x05
	if(curr_range == RANGE_10UA)
    1442:	ca 53       	subi	r28, 0x3A	; 58
    1444:	d4 4f       	sbci	r29, 0xF4	; 244
    1446:	38 81       	ld	r19, Y
    1448:	c6 5c       	subi	r28, 0xC6	; 198
    144a:	db 40       	sbci	r29, 0x0B	; 11
    144c:	31 30       	cpi	r19, 0x01	; 1
    144e:	19 f4       	brne	.+6      	; 0x1456 <LSV_test+0x28a>
		PORTE.OUTCLR = PIN3_bm; //switch3
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	86 83       	std	Z+6, r24	; 0x06
    1454:	02 c0       	rjmp	.+4      	; 0x145a <LSV_test+0x28e>
	else
		PORTE.OUTSET = PIN3_bm; //switch3
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	85 83       	std	Z+5, r24	; 0x05
	//_delay_ms(50);
	PORTE.OUTCLR = PIN0_bm; //switch1
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	e0 e8       	ldi	r30, 0x80	; 128
    145e:	f6 e0       	ldi	r31, 0x06	; 6
    1460:	86 83       	std	Z+6, r24	; 0x06

	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    1462:	80 e2       	ldi	r24, 0x20	; 32
    1464:	93 e0       	ldi	r25, 0x03	; 3
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    146c:	88 23       	and	r24, r24
    146e:	c9 f3       	breq	.-14     	; 0x1462 <LSV_test+0x296>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	93 e0       	ldi	r25, 0x03	; 3
    1474:	b6 01       	movw	r22, r12
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    147c:	84 ec       	ldi	r24, 0xC4	; 196
    147e:	99 e0       	ldi	r25, 0x09	; 9
    1480:	22 e3       	ldi	r18, 0x32	; 50
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	f9 01       	movw	r30, r18
    1486:	31 97       	sbiw	r30, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LSV_test+0x2ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	d9 f7       	brne	.-10     	; 0x1484 <LSV_test+0x2b8>
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	42 e3       	ldi	r20, 0x32	; 50
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <LSV_test+0x2de>
    1498:	80 e1       	ldi	r24, 0x10	; 16
    149a:	97 e2       	ldi	r25, 0x27	; 39
    149c:	fa 01       	movw	r30, r20
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LSV_test+0x2d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	d9 f7       	brne	.-10     	; 0x149c <LSV_test+0x2d0>
	_delay_ms(250);

	//wait for settle time
	for(l = 0; l < settle; l++)
    14a6:	2f 5f       	subi	r18, 0xFF	; 255
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	c2 54       	subi	r28, 0x42	; 66
    14ac:	d4 4f       	sbci	r29, 0xF4	; 244
    14ae:	68 81       	ld	r22, Y
    14b0:	79 81       	ldd	r23, Y+1	; 0x01
    14b2:	ce 5b       	subi	r28, 0xBE	; 190
    14b4:	db 40       	sbci	r29, 0x0B	; 11
    14b6:	26 17       	cp	r18, r22
    14b8:	37 07       	cpc	r19, r23
    14ba:	70 f3       	brcs	.-36     	; 0x1498 <LSV_test+0x2cc>
    14bc:	76 01       	movw	r14, r12
    14be:	aa 24       	eor	r10, r10
    14c0:	bb 24       	eor	r11, r11
    14c2:	88 24       	eor	r8, r8
    14c4:	99 24       	eor	r9, r9
    14c6:	6f c0       	rjmp	.+222    	; 0x15a6 <LSV_test+0x3da>
		_delay_ms(1000);

	while((up&&(current_DAC<stop_DAC))||(!up&&current_DAC>stop_DAC))
	{
		//set DAC and trigger timer
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    14d2:	88 23       	and	r24, r24
    14d4:	c9 f3       	breq	.-14     	; 0x14c8 <LSV_test+0x2fc>
			DAC_Channel_Write(&DACB,current_DAC,CH0);
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	b7 01       	movw	r22, r14
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
		TIMER.CNT = 0;
    14e2:	10 92 20 08 	sts	0x0820, r1
    14e6:	10 92 21 08 	sts	0x0821, r1

		//calculate next DAC value
		if(up)
    14ea:	c7 54       	subi	r28, 0x47	; 71
    14ec:	d4 4f       	sbci	r29, 0xF4	; 244
    14ee:	78 81       	ld	r23, Y
    14f0:	c9 5b       	subi	r28, 0xB9	; 185
    14f2:	db 40       	sbci	r29, 0x0B	; 11
    14f4:	77 23       	and	r23, r23
    14f6:	21 f0       	breq	.+8      	; 0x1500 <LSV_test+0x334>
			current_DAC++;
    14f8:	08 94       	sec
    14fa:	e1 1c       	adc	r14, r1
    14fc:	f1 1c       	adc	r15, r1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <LSV_test+0x33a>
		else
			current_DAC--;
    1500:	08 94       	sec
    1502:	e1 08       	sbc	r14, r1
    1504:	f1 08       	sbc	r15, r1

		current[i] = 0;
    1506:	f4 01       	movw	r30, r8
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	8c 0f       	add	r24, r28
    1512:	9d 1f       	adc	r25, r29
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	10 82       	st	Z, r1
    151a:	11 82       	std	Z+1, r1	; 0x01
		//ADC measurements
		while(TIMER.CNT<step_time) {
			ADC_Ch_Conversion_Start(&ADCA.CH1);
			while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<step_time) {}
		
			if(current[i] == 0)
    151c:	6f 01       	movw	r12, r30
    151e:	2b c0       	rjmp	.+86     	; 0x1576 <LSV_test+0x3aa>

		current[i] = 0;

		//ADC measurements
		while(TIMER.CNT<step_time) {
			ADC_Ch_Conversion_Start(&ADCA.CH1);
    1520:	80 91 28 02 	lds	r24, 0x0228
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	80 93 28 02 	sts	0x0228, r24
			while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<step_time) {}
    152a:	80 91 2b 02 	lds	r24, 0x022B
    152e:	80 fd       	sbrc	r24, 0
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <LSV_test+0x374>
    1532:	80 91 20 08 	lds	r24, 0x0820
    1536:	90 91 21 08 	lds	r25, 0x0821
    153a:	86 15       	cp	r24, r6
    153c:	97 05       	cpc	r25, r7
    153e:	a8 f3       	brcs	.-22     	; 0x152a <LSV_test+0x35e>
		
			if(current[i] == 0)
    1540:	f6 01       	movw	r30, r12
    1542:	00 81       	ld	r16, Z
    1544:	11 81       	ldd	r17, Z+1	; 0x01
    1546:	01 15       	cp	r16, r1
    1548:	11 05       	cpc	r17, r1
    154a:	49 f4       	brne	.+18     	; 0x155e <LSV_test+0x392>
				current[i] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    154c:	88 e2       	ldi	r24, 0x28	; 40
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    1556:	f6 01       	movw	r30, r12
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	0c c0       	rjmp	.+24     	; 0x1576 <LSV_test+0x3aa>
			else
				current[i] = (current[i] + ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET)) >> 1;
    155e:	88 e2       	ldi	r24, 0x28	; 40
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    1568:	08 0f       	add	r16, r24
    156a:	19 1f       	adc	r17, r25
    156c:	15 95       	asr	r17
    156e:	07 95       	ror	r16
    1570:	f6 01       	movw	r30, r12
    1572:	00 83       	st	Z, r16
    1574:	11 83       	std	Z+1, r17	; 0x01
			current_DAC--;

		current[i] = 0;

		//ADC measurements
		while(TIMER.CNT<step_time) {
    1576:	80 91 20 08 	lds	r24, 0x0820
    157a:	90 91 21 08 	lds	r25, 0x0821
    157e:	86 15       	cp	r24, r6
    1580:	97 05       	cpc	r25, r7
    1582:	70 f2       	brcs	.-100    	; 0x1520 <LSV_test+0x354>
				current[i] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
			else
				current[i] = (current[i] + ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET)) >> 1;
		}

		steps_taken++;
    1584:	08 94       	sec
    1586:	a1 1c       	adc	r10, r1
    1588:	b1 1c       	adc	r11, r1
		if(steps_taken >= steps_per_sample)
    158a:	c6 54       	subi	r28, 0x46	; 70
    158c:	d4 4f       	sbci	r29, 0xF4	; 244
    158e:	28 81       	ld	r18, Y
    1590:	39 81       	ldd	r19, Y+1	; 0x01
    1592:	ca 5b       	subi	r28, 0xBA	; 186
    1594:	db 40       	sbci	r29, 0x0B	; 11
    1596:	a2 16       	cp	r10, r18
    1598:	b3 06       	cpc	r11, r19
    159a:	28 f0       	brcs	.+10     	; 0x15a6 <LSV_test+0x3da>
		{
			steps_taken = 0;
			i++;
    159c:	08 94       	sec
    159e:	81 1c       	adc	r8, r1
    15a0:	91 1c       	adc	r9, r1
    15a2:	aa 24       	eor	r10, r10
    15a4:	bb 24       	eor	r11, r11

	//wait for settle time
	for(l = 0; l < settle; l++)
		_delay_ms(1000);

	while((up&&(current_DAC<stop_DAC))||(!up&&current_DAC>stop_DAC))
    15a6:	c7 54       	subi	r28, 0x47	; 71
    15a8:	d4 4f       	sbci	r29, 0xF4	; 244
    15aa:	38 81       	ld	r19, Y
    15ac:	c9 5b       	subi	r28, 0xB9	; 185
    15ae:	db 40       	sbci	r29, 0x0B	; 11
    15b0:	33 23       	and	r19, r19
    15b2:	29 f0       	breq	.+10     	; 0x15be <LSV_test+0x3f2>
    15b4:	e4 14       	cp	r14, r4
    15b6:	f5 04       	cpc	r15, r5
    15b8:	0c f4       	brge	.+2      	; 0x15bc <LSV_test+0x3f0>
    15ba:	86 cf       	rjmp	.-244    	; 0x14c8 <LSV_test+0x2fc>
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <LSV_test+0x3fa>
    15be:	4e 14       	cp	r4, r14
    15c0:	5f 04       	cpc	r5, r15
    15c2:	0c f4       	brge	.+2      	; 0x15c6 <LSV_test+0x3fa>
    15c4:	81 cf       	rjmp	.-254    	; 0x14c8 <LSV_test+0x2fc>
			steps_taken = 0;
			i++;
		}
	}

	PORTE.OUTSET = PIN0_bm; //switch1
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	f6 e0       	ldi	r31, 0x06	; 6
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	85 83       	std	Z+5, r24	; 0x05
	//PORTE.OUTCLR = PIN0_bm; //switch1
	PORTE.OUTCLR = PIN1_bm; //switch0
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    15d2:	84 e0       	ldi	r24, 0x04	; 4
    15d4:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    15d6:	88 e0       	ldi	r24, 0x08	; 8
    15d8:	86 83       	std	Z+6, r24	; 0x06

	current_DAC = 2048;
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	93 e0       	ldi	r25, 0x03	; 3
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    15e4:	88 23       	and	r24, r24
    15e6:	c9 f3       	breq	.-14     	; 0x15da <LSV_test+0x40e>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	93 e0       	ldi	r25, 0x03	; 3
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	78 e0       	ldi	r23, 0x08	; 8
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    15f6:	80 91 a1 08 	lds	r24, 0x08A1
    15fa:	85 ff       	sbrs	r24, 5
    15fc:	fc cf       	rjmp	.-8      	; 0x15f6 <LSV_test+0x42a>
	USART_PutChar(&USARTC0, LSV);
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	80 93 a0 08 	sts	0x08A0, r24
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
	for(j = 0; j < 15; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1608:	80 91 a1 08 	lds	r24, 0x08A1
    160c:	85 ff       	sbrs	r24, 5
    160e:	fc cf       	rjmp	.-8      	; 0x1608 <LSV_test+0x43c>
		USART_PutChar(&USARTC0, name[j]);
    1610:	c4 54       	subi	r28, 0x44	; 68
    1612:	d4 4f       	sbci	r29, 0xF4	; 244
    1614:	e8 81       	ld	r30, Y
    1616:	f9 81       	ldd	r31, Y+1	; 0x01
    1618:	cc 5b       	subi	r28, 0xBC	; 188
    161a:	db 40       	sbci	r29, 0x0B	; 11
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	80 81       	ld	r24, Z
    1622:	80 93 a0 08 	sts	0x08A0, r24
		DAC_Channel_Write(&DACB,current_DAC,CH0);

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, LSV);
	for(j = 0; j < 15; j++)
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	2f 30       	cpi	r18, 0x0F	; 15
    162c:	31 05       	cpc	r19, r1
    162e:	61 f7       	brne	.-40     	; 0x1608 <LSV_test+0x43c>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, name[j]);
	}
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1630:	80 91 a1 08 	lds	r24, 0x08A1
    1634:	85 ff       	sbrs	r24, 5
    1636:	fc cf       	rjmp	.-8      	; 0x1630 <LSV_test+0x464>
	USART_PutChar(&USARTC0, settle>>8);
    1638:	c2 54       	subi	r28, 0x42	; 66
    163a:	d4 4f       	sbci	r29, 0xF4	; 244
    163c:	68 81       	ld	r22, Y
    163e:	79 81       	ldd	r23, Y+1	; 0x01
    1640:	ce 5b       	subi	r28, 0xBE	; 190
    1642:	db 40       	sbci	r29, 0x0B	; 11
    1644:	87 2f       	mov	r24, r23
    1646:	99 27       	eor	r25, r25
    1648:	87 fd       	sbrc	r24, 7
    164a:	9a 95       	dec	r25
    164c:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1650:	80 91 a1 08 	lds	r24, 0x08A1
    1654:	85 ff       	sbrs	r24, 5
    1656:	fc cf       	rjmp	.-8      	; 0x1650 <LSV_test+0x484>
	USART_PutChar(&USARTC0, settle);
    1658:	c2 54       	subi	r28, 0x42	; 66
    165a:	d4 4f       	sbci	r29, 0xF4	; 244
    165c:	78 81       	ld	r23, Y
    165e:	ce 5b       	subi	r28, 0xBE	; 190
    1660:	db 40       	sbci	r29, 0x0B	; 11
    1662:	70 93 a0 08 	sts	0x08A0, r23
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1666:	80 91 a1 08 	lds	r24, 0x08A1
    166a:	85 ff       	sbrs	r24, 5
    166c:	fc cf       	rjmp	.-8      	; 0x1666 <LSV_test+0x49a>
	USART_PutChar(&USARTC0, start>>8);
    166e:	c0 54       	subi	r28, 0x40	; 64
    1670:	d4 4f       	sbci	r29, 0xF4	; 244
    1672:	e8 81       	ld	r30, Y
    1674:	f9 81       	ldd	r31, Y+1	; 0x01
    1676:	c0 5c       	subi	r28, 0xC0	; 192
    1678:	db 40       	sbci	r29, 0x0B	; 11
    167a:	8f 2f       	mov	r24, r31
    167c:	99 27       	eor	r25, r25
    167e:	87 fd       	sbrc	r24, 7
    1680:	9a 95       	dec	r25
    1682:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1686:	80 91 a1 08 	lds	r24, 0x08A1
    168a:	85 ff       	sbrs	r24, 5
    168c:	fc cf       	rjmp	.-8      	; 0x1686 <LSV_test+0x4ba>
	USART_PutChar(&USARTC0, start);
    168e:	c0 54       	subi	r28, 0x40	; 64
    1690:	d4 4f       	sbci	r29, 0xF4	; 244
    1692:	f8 81       	ld	r31, Y
    1694:	c0 5c       	subi	r28, 0xC0	; 192
    1696:	db 40       	sbci	r29, 0x0B	; 11
    1698:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    169c:	80 91 a1 08 	lds	r24, 0x08A1
    16a0:	85 ff       	sbrs	r24, 5
    16a2:	fc cf       	rjmp	.-8      	; 0x169c <LSV_test+0x4d0>
	USART_PutChar(&USARTC0, stop>>8);
    16a4:	83 2d       	mov	r24, r3
    16a6:	99 27       	eor	r25, r25
    16a8:	87 fd       	sbrc	r24, 7
    16aa:	9a 95       	dec	r25
    16ac:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    16b0:	80 91 a1 08 	lds	r24, 0x08A1
    16b4:	85 ff       	sbrs	r24, 5
    16b6:	fc cf       	rjmp	.-8      	; 0x16b0 <LSV_test+0x4e4>
	USART_PutChar(&USARTC0, stop);
    16b8:	20 92 a0 08 	sts	0x08A0, r2
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    16bc:	80 91 a1 08 	lds	r24, 0x08A1
    16c0:	85 ff       	sbrs	r24, 5
    16c2:	fc cf       	rjmp	.-8      	; 0x16bc <LSV_test+0x4f0>
	USART_PutChar(&USARTC0, slope>>8);
    16c4:	ce 53       	subi	r28, 0x3E	; 62
    16c6:	d4 4f       	sbci	r29, 0xF4	; 244
    16c8:	28 81       	ld	r18, Y
    16ca:	39 81       	ldd	r19, Y+1	; 0x01
    16cc:	c2 5c       	subi	r28, 0xC2	; 194
    16ce:	db 40       	sbci	r29, 0x0B	; 11
    16d0:	83 2f       	mov	r24, r19
    16d2:	99 27       	eor	r25, r25
    16d4:	87 fd       	sbrc	r24, 7
    16d6:	9a 95       	dec	r25
    16d8:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    16dc:	80 91 a1 08 	lds	r24, 0x08A1
    16e0:	85 ff       	sbrs	r24, 5
    16e2:	fc cf       	rjmp	.-8      	; 0x16dc <LSV_test+0x510>
	USART_PutChar(&USARTC0, slope);
    16e4:	ce 53       	subi	r28, 0x3E	; 62
    16e6:	d4 4f       	sbci	r29, 0xF4	; 244
    16e8:	38 81       	ld	r19, Y
    16ea:	c2 5c       	subi	r28, 0xC2	; 194
    16ec:	db 40       	sbci	r29, 0x0B	; 11
    16ee:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    16f2:	80 91 a1 08 	lds	r24, 0x08A1
    16f6:	85 ff       	sbrs	r24, 5
    16f8:	fc cf       	rjmp	.-8      	; 0x16f2 <LSV_test+0x526>
	USART_PutChar(&USARTC0, sample_rate>>8);
    16fa:	cc 53       	subi	r28, 0x3C	; 60
    16fc:	d4 4f       	sbci	r29, 0xF4	; 244
    16fe:	68 81       	ld	r22, Y
    1700:	79 81       	ldd	r23, Y+1	; 0x01
    1702:	c4 5c       	subi	r28, 0xC4	; 196
    1704:	db 40       	sbci	r29, 0x0B	; 11
    1706:	87 2f       	mov	r24, r23
    1708:	99 27       	eor	r25, r25
    170a:	87 fd       	sbrc	r24, 7
    170c:	9a 95       	dec	r25
    170e:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1712:	80 91 a1 08 	lds	r24, 0x08A1
    1716:	85 ff       	sbrs	r24, 5
    1718:	fc cf       	rjmp	.-8      	; 0x1712 <LSV_test+0x546>
	USART_PutChar(&USARTC0, sample_rate);
    171a:	cc 53       	subi	r28, 0x3C	; 60
    171c:	d4 4f       	sbci	r29, 0xF4	; 244
    171e:	78 81       	ld	r23, Y
    1720:	c4 5c       	subi	r28, 0xC4	; 196
    1722:	db 40       	sbci	r29, 0x0B	; 11
    1724:	70 93 a0 08 	sts	0x08A0, r23
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1728:	80 91 a1 08 	lds	r24, 0x08A1
    172c:	85 ff       	sbrs	r24, 5
    172e:	fc cf       	rjmp	.-8      	; 0x1728 <LSV_test+0x55c>
	USART_PutChar(&USARTC0, curr_range);
    1730:	ca 53       	subi	r28, 0x3A	; 58
    1732:	d4 4f       	sbci	r29, 0xF4	; 244
    1734:	88 81       	ld	r24, Y
    1736:	c6 5c       	subi	r28, 0xC6	; 198
    1738:	db 40       	sbci	r29, 0x0B	; 11
    173a:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    173e:	80 91 a1 08 	lds	r24, 0x08A1
    1742:	85 ff       	sbrs	r24, 5
    1744:	fc cf       	rjmp	.-8      	; 0x173e <LSV_test+0x572>
	USART_PutChar(&USARTC0, i>>8);
    1746:	90 92 a0 08 	sts	0x08A0, r9
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    174a:	80 91 a1 08 	lds	r24, 0x08A1
    174e:	85 ff       	sbrs	r24, 5
    1750:	fc cf       	rjmp	.-8      	; 0x174a <LSV_test+0x57e>
	USART_PutChar(&USARTC0, i);
    1752:	80 92 a0 08 	sts	0x08A0, r8
    1756:	fe 01       	movw	r30, r28
    1758:	31 96       	adiw	r30, 0x01	; 1

	for(j = 0; j < i; j++)
    175a:	94 01       	movw	r18, r8
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	2e 0f       	add	r18, r30
    1762:	3f 1f       	adc	r19, r31
    1764:	13 c0       	rjmp	.+38     	; 0x178c <LSV_test+0x5c0>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1766:	80 91 a1 08 	lds	r24, 0x08A1
    176a:	85 ff       	sbrs	r24, 5
    176c:	fc cf       	rjmp	.-8      	; 0x1766 <LSV_test+0x59a>
		USART_PutChar(&USARTC0, current[j]>>8);
    176e:	40 81       	ld	r20, Z
    1770:	51 81       	ldd	r21, Z+1	; 0x01
    1772:	85 2f       	mov	r24, r21
    1774:	99 27       	eor	r25, r25
    1776:	87 fd       	sbrc	r24, 7
    1778:	9a 95       	dec	r25
    177a:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    177e:	80 91 a1 08 	lds	r24, 0x08A1
    1782:	85 ff       	sbrs	r24, 5
    1784:	fc cf       	rjmp	.-8      	; 0x177e <LSV_test+0x5b2>
		USART_PutChar(&USARTC0, current[j]);
    1786:	40 93 a0 08 	sts	0x08A0, r20
    178a:	32 96       	adiw	r30, 0x02	; 2
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, i>>8);
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, i);

	for(j = 0; j < i; j++)
    178c:	e2 17       	cp	r30, r18
    178e:	f3 07       	cpc	r31, r19
    1790:	51 f7       	brne	.-44     	; 0x1766 <LSV_test+0x59a>
		USART_PutChar(&USARTC0, current[j]>>8);
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, current[j]);
	}

	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1792:	80 91 a1 08 	lds	r24, 0x08A1
    1796:	85 ff       	sbrs	r24, 5
    1798:	fc cf       	rjmp	.-8      	; 0x1792 <LSV_test+0x5c6>
		USART_PutChar(&USARTC0,LSV);
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	80 93 a0 08 	sts	0x08A0, r24

	return i;
    17a0:	f4 01       	movw	r30, r8

}
    17a2:	cf 01       	movw	r24, r30
    17a4:	ca 53       	subi	r28, 0x3A	; 58
    17a6:	d4 4f       	sbci	r29, 0xF4	; 244
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	9f 90       	pop	r9
    17c2:	8f 90       	pop	r8
    17c4:	7f 90       	pop	r7
    17c6:	6f 90       	pop	r6
    17c8:	5f 90       	pop	r5
    17ca:	4f 90       	pop	r4
    17cc:	3f 90       	pop	r3
    17ce:	2f 90       	pop	r2
    17d0:	08 95       	ret

000017d2 <CV_test>:

	return i;
}

int16_t CV_test (char* name, int16_t slope, int16_t start, int16_t stop, int16_t scans, int16_t sample_rate, uint8_t curr_range)
{
    17d2:	2f 92       	push	r2
    17d4:	3f 92       	push	r3
    17d6:	4f 92       	push	r4
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	ca 5c       	subi	r28, 0xCA	; 202
    17fc:	db 40       	sbci	r29, 0x0B	; 11
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	c2 54       	subi	r28, 0x42	; 66
    1804:	d4 4f       	sbci	r29, 0xF4	; 244
    1806:	88 83       	st	Y, r24
    1808:	99 83       	std	Y+1, r25	; 0x01
    180a:	ce 5b       	subi	r28, 0xBE	; 190
    180c:	db 40       	sbci	r29, 0x0B	; 11
    180e:	c0 54       	subi	r28, 0x40	; 64
    1810:	d4 4f       	sbci	r29, 0xF4	; 244
    1812:	68 83       	st	Y, r22
    1814:	79 83       	std	Y+1, r23	; 0x01
    1816:	c0 5c       	subi	r28, 0xC0	; 192
    1818:	db 40       	sbci	r29, 0x0B	; 11
    181a:	ce 53       	subi	r28, 0x3E	; 62
    181c:	d4 4f       	sbci	r29, 0xF4	; 244
    181e:	48 83       	st	Y, r20
    1820:	59 83       	std	Y+1, r21	; 0x01
    1822:	c2 5c       	subi	r28, 0xC2	; 194
    1824:	db 40       	sbci	r29, 0x0B	; 11
    1826:	cc 53       	subi	r28, 0x3C	; 60
    1828:	d4 4f       	sbci	r29, 0xF4	; 244
    182a:	28 83       	st	Y, r18
    182c:	39 83       	std	Y+1, r19	; 0x01
    182e:	c4 5c       	subi	r28, 0xC4	; 196
    1830:	db 40       	sbci	r29, 0x0B	; 11
    1832:	ca 53       	subi	r28, 0x3A	; 58
    1834:	d4 4f       	sbci	r29, 0xF4	; 244
    1836:	08 83       	st	Y, r16
    1838:	19 83       	std	Y+1, r17	; 0x01
    183a:	c6 5c       	subi	r28, 0xC6	; 198
    183c:	db 40       	sbci	r29, 0x0B	; 11
    183e:	c8 53       	subi	r28, 0x38	; 56
    1840:	d4 4f       	sbci	r29, 0xF4	; 244
    1842:	e8 82       	st	Y, r14
    1844:	f9 82       	std	Y+1, r15	; 0x01
    1846:	c8 5c       	subi	r28, 0xC8	; 200
    1848:	db 40       	sbci	r29, 0x0B	; 11
    184a:	c6 53       	subi	r28, 0x36	; 54
    184c:	d4 4f       	sbci	r29, 0xF4	; 244
    184e:	c8 82       	st	Y, r12
    1850:	ca 5c       	subi	r28, 0xCA	; 202
    1852:	db 40       	sbci	r29, 0x0B	; 11
	//storing ADC results
	int16_t current[CV_MAX_DATAPOINTS];
	int16_t result_buffer[CV_BUFFER_SIZE];

	//check limits
	if(start<-1600 || start>1600 || stop<-1600 || stop>1600 || slope>5000 || slope<10 || sample_rate<1 || sample_rate>1600)
    1854:	ca 01       	movw	r24, r20
    1856:	80 5c       	subi	r24, 0xC0	; 192
    1858:	99 4f       	sbci	r25, 0xF9	; 249
    185a:	81 58       	subi	r24, 0x81	; 129
    185c:	9c 40       	sbci	r25, 0x0C	; 12
    185e:	00 f5       	brcc	.+64     	; 0x18a0 <CV_test+0xce>
    1860:	cc 53       	subi	r28, 0x3C	; 60
    1862:	d4 4f       	sbci	r29, 0xF4	; 244
    1864:	68 81       	ld	r22, Y
    1866:	79 81       	ldd	r23, Y+1	; 0x01
    1868:	c4 5c       	subi	r28, 0xC4	; 196
    186a:	db 40       	sbci	r29, 0x0B	; 11
    186c:	89 ef       	ldi	r24, 0xF9	; 249
    186e:	60 3c       	cpi	r22, 0xC0	; 192
    1870:	78 07       	cpc	r23, r24
    1872:	b4 f0       	brlt	.+44     	; 0x18a0 <CV_test+0xce>
    1874:	61 54       	subi	r22, 0x41	; 65
    1876:	76 40       	sbci	r23, 0x06	; 6
    1878:	9c f4       	brge	.+38     	; 0x18a0 <CV_test+0xce>
    187a:	c0 54       	subi	r28, 0x40	; 64
    187c:	d4 4f       	sbci	r29, 0xF4	; 244
    187e:	e8 81       	ld	r30, Y
    1880:	f9 81       	ldd	r31, Y+1	; 0x01
    1882:	c0 5c       	subi	r28, 0xC0	; 192
    1884:	db 40       	sbci	r29, 0x0B	; 11
    1886:	23 e1       	ldi	r18, 0x13	; 19
    1888:	e9 38       	cpi	r30, 0x89	; 137
    188a:	f2 07       	cpc	r31, r18
    188c:	4c f4       	brge	.+18     	; 0x18a0 <CV_test+0xce>
    188e:	3a 97       	sbiw	r30, 0x0a	; 10
    1890:	3c f0       	brlt	.+14     	; 0x18a0 <CV_test+0xce>
    1892:	1e 14       	cp	r1, r14
    1894:	1f 04       	cpc	r1, r15
    1896:	24 f4       	brge	.+8      	; 0x18a0 <CV_test+0xce>
    1898:	b7 01       	movw	r22, r14
    189a:	61 54       	subi	r22, 0x41	; 65
    189c:	76 40       	sbci	r23, 0x06	; 6
    189e:	44 f0       	brlt	.+16     	; 0x18b0 <CV_test+0xde>
	{
		lcdClear();
    18a0:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    18a4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("outside limits",14);
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e2       	ldi	r25, 0x20	; 32
    18ac:	6e e0       	ldi	r22, 0x0E	; 14
    18ae:	cf c0       	rjmp	.+414    	; 0x1a4e <CV_test+0x27c>
		return -1;
	}

	//determine starting direction and calculate
	if((stop-start)>0)
    18b0:	cc 53       	subi	r28, 0x3C	; 60
    18b2:	d4 4f       	sbci	r29, 0xF4	; 244
    18b4:	88 81       	ld	r24, Y
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	c4 5c       	subi	r28, 0xC4	; 196
    18ba:	db 40       	sbci	r29, 0x0B	; 11
    18bc:	ce 53       	subi	r28, 0x3E	; 62
    18be:	d4 4f       	sbci	r29, 0xF4	; 244
    18c0:	e8 81       	ld	r30, Y
    18c2:	f9 81       	ldd	r31, Y+1	; 0x01
    18c4:	c2 5c       	subi	r28, 0xC2	; 194
    18c6:	db 40       	sbci	r29, 0x0B	; 11
    18c8:	8e 1b       	sub	r24, r30
    18ca:	9f 0b       	sbc	r25, r31
    18cc:	9f 01       	movw	r18, r30
    18ce:	44 27       	eor	r20, r20
    18d0:	37 fd       	sbrc	r19, 7
    18d2:	40 95       	com	r20
    18d4:	54 2f       	mov	r21, r20
    18d6:	cc 53       	subi	r28, 0x3C	; 60
    18d8:	d4 4f       	sbci	r29, 0xF4	; 244
    18da:	68 81       	ld	r22, Y
    18dc:	79 81       	ldd	r23, Y+1	; 0x01
    18de:	c4 5c       	subi	r28, 0xC4	; 196
    18e0:	db 40       	sbci	r29, 0x0B	; 11
    18e2:	5b 01       	movw	r10, r22
    18e4:	cc 24       	eor	r12, r12
    18e6:	b7 fc       	sbrc	r11, 7
    18e8:	c0 94       	com	r12
    18ea:	dc 2c       	mov	r13, r12
    18ec:	18 16       	cp	r1, r24
    18ee:	19 06       	cpc	r1, r25
    18f0:	b4 f5       	brge	.+108    	; 0x195e <CV_test+0x18c>
	{
		up=true;
		min_DAC = (int16_t) (round(start*(4096.0/3300))+2048);  
    18f2:	ca 01       	movw	r24, r20
    18f4:	b9 01       	movw	r22, r18
    18f6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	30 ee       	ldi	r19, 0xE0	; 224
    18fe:	4e e9       	ldi	r20, 0x9E	; 158
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1906:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	55 e4       	ldi	r21, 0x45	; 69
    1912:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    1916:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    191a:	c7 54       	subi	r28, 0x47	; 71
    191c:	d4 4f       	sbci	r29, 0xF4	; 244
    191e:	68 83       	st	Y, r22
    1920:	79 83       	std	Y+1, r23	; 0x01
    1922:	c9 5b       	subi	r28, 0xB9	; 185
    1924:	db 40       	sbci	r29, 0x0B	; 11
		max_DAC = (int16_t) (round(stop*(4096.0/3300))+2048);   
    1926:	c6 01       	movw	r24, r12
    1928:	b5 01       	movw	r22, r10
    192a:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    192e:	2a e0       	ldi	r18, 0x0A	; 10
    1930:	30 ee       	ldi	r19, 0xE0	; 224
    1932:	4e e9       	ldi	r20, 0x9E	; 158
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    193a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	55 e4       	ldi	r21, 0x45	; 69
    1946:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    194a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    194e:	1b 01       	movw	r2, r22
    1950:	71 e0       	ldi	r23, 0x01	; 1
    1952:	c5 54       	subi	r28, 0x45	; 69
    1954:	d4 4f       	sbci	r29, 0xF4	; 244
    1956:	78 83       	st	Y, r23
    1958:	cb 5b       	subi	r28, 0xBB	; 187
    195a:	db 40       	sbci	r29, 0x0B	; 11
    195c:	34 c0       	rjmp	.+104    	; 0x19c6 <CV_test+0x1f4>
	}
	else
	{
		up=false;
		max_DAC = (int16_t) (round(start*(4096.0/3300))+2048);  
    195e:	ca 01       	movw	r24, r20
    1960:	b9 01       	movw	r22, r18
    1962:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1966:	2a e0       	ldi	r18, 0x0A	; 10
    1968:	30 ee       	ldi	r19, 0xE0	; 224
    196a:	4e e9       	ldi	r20, 0x9E	; 158
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1972:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	55 e4       	ldi	r21, 0x45	; 69
    197e:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    1982:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    1986:	1b 01       	movw	r2, r22
		min_DAC = (int16_t) (round(stop*(4096.0/3300))+2048);   
    1988:	c6 01       	movw	r24, r12
    198a:	b5 01       	movw	r22, r10
    198c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1990:	2a e0       	ldi	r18, 0x0A	; 10
    1992:	30 ee       	ldi	r19, 0xE0	; 224
    1994:	4e e9       	ldi	r20, 0x9E	; 158
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    199c:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	55 e4       	ldi	r21, 0x45	; 69
    19a8:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    19ac:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    19b0:	c7 54       	subi	r28, 0x47	; 71
    19b2:	d4 4f       	sbci	r29, 0xF4	; 244
    19b4:	68 83       	st	Y, r22
    19b6:	79 83       	std	Y+1, r23	; 0x01
    19b8:	c9 5b       	subi	r28, 0xB9	; 185
    19ba:	db 40       	sbci	r29, 0x0B	; 11
    19bc:	c5 54       	subi	r28, 0x45	; 69
    19be:	d4 4f       	sbci	r29, 0xF4	; 244
    19c0:	18 82       	st	Y, r1
    19c2:	cb 5b       	subi	r28, 0xBB	; 187
    19c4:	db 40       	sbci	r29, 0x0B	; 11
	}

	ramps = 2*scans;

	steps_per_sample = (uint16_t) (round(sample_rate*(4096.0/3300)));
    19c6:	c8 53       	subi	r28, 0x38	; 56
    19c8:	d4 4f       	sbci	r29, 0xF4	; 244
    19ca:	e8 81       	ld	r30, Y
    19cc:	f9 81       	ldd	r31, Y+1	; 0x01
    19ce:	c8 5c       	subi	r28, 0xC8	; 200
    19d0:	db 40       	sbci	r29, 0x0B	; 11
    19d2:	bf 01       	movw	r22, r30
    19d4:	88 27       	eor	r24, r24
    19d6:	77 fd       	sbrc	r23, 7
    19d8:	80 95       	com	r24
    19da:	98 2f       	mov	r25, r24
    19dc:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    19e0:	2a e0       	ldi	r18, 0x0A	; 10
    19e2:	30 ee       	ldi	r19, 0xE0	; 224
    19e4:	4e e9       	ldi	r20, 0x9E	; 158
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    19ec:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    19f0:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	c4 54       	subi	r28, 0x44	; 68
    19fa:	d4 4f       	sbci	r29, 0xF4	; 244
    19fc:	68 83       	st	Y, r22
    19fe:	79 83       	std	Y+1, r23	; 0x01
    1a00:	cc 5b       	subi	r28, 0xBC	; 188
    1a02:	db 40       	sbci	r29, 0x0B	; 11
	
	samples = 2*scans*((max_DAC-min_DAC)/steps_per_sample);

	if(samples > CV_MAX_DATAPOINTS)
    1a04:	ca 53       	subi	r28, 0x3A	; 58
    1a06:	d4 4f       	sbci	r29, 0xF4	; 244
    1a08:	e8 81       	ld	r30, Y
    1a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0c:	c6 5c       	subi	r28, 0xC6	; 198
    1a0e:	db 40       	sbci	r29, 0x0B	; 11
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	c1 01       	movw	r24, r2
    1a16:	c7 54       	subi	r28, 0x47	; 71
    1a18:	d4 4f       	sbci	r29, 0xF4	; 244
    1a1a:	68 81       	ld	r22, Y
    1a1c:	79 81       	ldd	r23, Y+1	; 0x01
    1a1e:	c9 5b       	subi	r28, 0xB9	; 185
    1a20:	db 40       	sbci	r29, 0x0B	; 11
    1a22:	86 1b       	sub	r24, r22
    1a24:	97 0b       	sbc	r25, r23
    1a26:	b9 01       	movw	r22, r18
    1a28:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodhi4>
    1a2c:	e6 9f       	mul	r30, r22
    1a2e:	c0 01       	movw	r24, r0
    1a30:	e7 9f       	mul	r30, r23
    1a32:	90 0d       	add	r25, r0
    1a34:	f6 9f       	mul	r31, r22
    1a36:	90 0d       	add	r25, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	8d 5d       	subi	r24, 0xDD	; 221
    1a3c:	95 40       	sbci	r25, 0x05	; 5
    1a3e:	60 f0       	brcs	.+24     	; 0x1a58 <CV_test+0x286>
	{
		lcdClear();
    1a40:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    1a44:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("too many data points",20);
    1a48:	8f e0       	ldi	r24, 0x0F	; 15
    1a4a:	90 e2       	ldi	r25, 0x20	; 32
    1a4c:	64 e1       	ldi	r22, 0x14	; 20
    1a4e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    1a52:	ef ef       	ldi	r30, 0xFF	; 255
    1a54:	ff ef       	ldi	r31, 0xFF	; 255
    1a56:	20 c2       	rjmp	.+1088   	; 0x1e98 <CV_test+0x6c6>
    1a58:	c0 54       	subi	r28, 0x40	; 64
    1a5a:	d4 4f       	sbci	r29, 0xF4	; 244
    1a5c:	e8 81       	ld	r30, Y
    1a5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a60:	c0 5c       	subi	r28, 0xC0	; 192
    1a62:	db 40       	sbci	r29, 0x0B	; 11
    1a64:	bf 01       	movw	r22, r30
    1a66:	88 27       	eor	r24, r24
    1a68:	77 fd       	sbrc	r23, 7
    1a6a:	80 95       	com	r24
    1a6c:	98 2f       	mov	r25, r24
		return -1;
	}

	//2,000,000 [cycles/sec] * 1/slope [sec/mV] * 3300/4096 [mv/index]
	if(slope > 30)
    1a6e:	7f 97       	sbiw	r30, 0x1f	; 31
    1a70:	ec f0       	brlt	.+58     	; 0x1aac <CV_test+0x2da>
	{
		step_time = (uint16_t) (round(2000000*(1.0/slope)*(3300.0/4096)));
    1a72:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1a76:	9b 01       	movw	r18, r22
    1a78:	ac 01       	movw	r20, r24
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	80 e8       	ldi	r24, 0x80	; 128
    1a80:	9f e3       	ldi	r25, 0x3F	; 63
    1a82:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__divsf3>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	34 e2       	ldi	r19, 0x24	; 36
    1a8a:	44 ef       	ldi	r20, 0xF4	; 244
    1a8c:	59 e4       	ldi	r21, 0x49	; 73
    1a8e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e4       	ldi	r19, 0x40	; 64
    1a96:	4e e4       	ldi	r20, 0x4E	; 78
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1a9e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1aa2:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    1aa6:	2b 01       	movw	r4, r22
		TIMER.CTRLA = TC_CLKSEL_DIV1_gc;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	1c c0       	rjmp	.+56     	; 0x1ae4 <CV_test+0x312>
	}
	else
	{
		step_time = (uint16_t) (round(500000*(1.0/slope)*(3300.0/4096)));
    1aac:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	9f e3       	ldi	r25, 0x3F	; 63
    1abc:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__divsf3>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	34 e2       	ldi	r19, 0x24	; 36
    1ac4:	44 ef       	ldi	r20, 0xF4	; 244
    1ac6:	58 e4       	ldi	r21, 0x48	; 72
    1ac8:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e4       	ldi	r19, 0x40	; 64
    1ad0:	4e e4       	ldi	r20, 0x4E	; 78
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    1ad8:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1adc:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    1ae0:	2b 01       	movw	r4, r22
		TIMER.CTRLA = TC_CLKSEL_DIV4_gc;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	80 93 00 08 	sts	0x0800, r24
	}
	

	if(up)
    1ae8:	c5 54       	subi	r28, 0x45	; 69
    1aea:	d4 4f       	sbci	r29, 0xF4	; 244
    1aec:	f8 81       	ld	r31, Y
    1aee:	cb 5b       	subi	r28, 0xBB	; 187
    1af0:	db 40       	sbci	r29, 0x0B	; 11
    1af2:	ff 23       	and	r31, r31
    1af4:	11 f4       	brne	.+4      	; 0x1afa <CV_test+0x328>
    1af6:	61 01       	movw	r12, r2
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <CV_test+0x334>
    1afa:	c7 54       	subi	r28, 0x47	; 71
    1afc:	d4 4f       	sbci	r29, 0xF4	; 244
    1afe:	c8 80       	ld	r12, Y
    1b00:	d9 80       	ldd	r13, Y+1	; 0x01
    1b02:	c9 5b       	subi	r28, 0xB9	; 185
    1b04:	db 40       	sbci	r29, 0x0B	; 11

	for(k = 0; k < CV_BUFFER_SIZE; k++)
		result_buffer[k] = 0;

	//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    1b06:	e0 e8       	ldi	r30, 0x80	; 128
    1b08:	f6 e0       	ldi	r31, 0x06	; 6
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	85 83       	std	Z+5, r24	; 0x05
	if(curr_range == RANGE_10UA)
    1b12:	c6 53       	subi	r28, 0x36	; 54
    1b14:	d4 4f       	sbci	r29, 0xF4	; 244
    1b16:	28 81       	ld	r18, Y
    1b18:	ca 5c       	subi	r28, 0xCA	; 202
    1b1a:	db 40       	sbci	r29, 0x0B	; 11
    1b1c:	21 30       	cpi	r18, 0x01	; 1
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <CV_test+0x354>
		PORTE.OUTCLR = PIN3_bm; //switch3
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	86 83       	std	Z+6, r24	; 0x06
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <CV_test+0x358>
	else
		PORTE.OUTSET = PIN3_bm; //switch3
    1b26:	88 e0       	ldi	r24, 0x08	; 8
    1b28:	85 83       	std	Z+5, r24	; 0x05
	//_delay_ms(50);
	PORTE.OUTCLR = PIN0_bm; //switch1
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	e0 e8       	ldi	r30, 0x80	; 128
    1b2e:	f6 e0       	ldi	r31, 0x06	; 6
    1b30:	86 83       	std	Z+6, r24	; 0x06

	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	93 e0       	ldi	r25, 0x03	; 3
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    1b3c:	88 23       	and	r24, r24
    1b3e:	c9 f3       	breq	.-14     	; 0x1b32 <CV_test+0x360>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	b6 01       	movw	r22, r12
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    1b4c:	84 ec       	ldi	r24, 0xC4	; 196
    1b4e:	99 e0       	ldi	r25, 0x09	; 9
    1b50:	22 e3       	ldi	r18, 0x32	; 50
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	f9 01       	movw	r30, r18
    1b56:	31 97       	sbiw	r30, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <CV_test+0x384>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	d9 f7       	brne	.-10     	; 0x1b54 <CV_test+0x382>
		up=false;
		max_DAC = (int16_t) (round(start*(4096.0/3300))+2048);  
		min_DAC = (int16_t) (round(stop*(4096.0/3300))+2048);   
	}

	ramps = 2*scans;
    1b5e:	ca 53       	subi	r28, 0x3A	; 58
    1b60:	d4 4f       	sbci	r29, 0xF4	; 244
    1b62:	a8 80       	ld	r10, Y
    1b64:	b9 80       	ldd	r11, Y+1	; 0x01
    1b66:	c6 5c       	subi	r28, 0xC6	; 198
    1b68:	db 40       	sbci	r29, 0x0B	; 11
    1b6a:	aa 0c       	add	r10, r10
    1b6c:	bb 1c       	adc	r11, r11
    1b6e:	66 24       	eor	r6, r6
    1b70:	77 24       	eor	r7, r7
    1b72:	88 24       	eor	r8, r8
    1b74:	99 24       	eor	r9, r9
	_delay_ms(250);

while(1)
{
	//set DAC and trigger timer
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    1b76:	80 e2       	ldi	r24, 0x20	; 32
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    1b80:	88 23       	and	r24, r24
    1b82:	c9 f3       	breq	.-14     	; 0x1b76 <CV_test+0x3a4>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	b6 01       	movw	r22, r12
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
	TIMER.CNT = 0;
    1b90:	10 92 20 08 	sts	0x0820, r1
    1b94:	10 92 21 08 	sts	0x0821, r1

	//calculate next DAC value
	if(up)
    1b98:	c5 54       	subi	r28, 0x45	; 69
    1b9a:	d4 4f       	sbci	r29, 0xF4	; 244
    1b9c:	38 81       	ld	r19, Y
    1b9e:	cb 5b       	subi	r28, 0xBB	; 187
    1ba0:	db 40       	sbci	r29, 0x0B	; 11
    1ba2:	33 23       	and	r19, r19
    1ba4:	39 f0       	breq	.+14     	; 0x1bb4 <CV_test+0x3e2>
		current_DAC++;
    1ba6:	08 94       	sec
    1ba8:	c1 1c       	adc	r12, r1
    1baa:	d1 1c       	adc	r13, r1
	else
		current_DAC--;

	//decision making
	if(up && current_DAC >= max_DAC)
    1bac:	c2 14       	cp	r12, r2
    1bae:	d3 04       	cpc	r13, r3
    1bb0:	44 f1       	brlt	.+80     	; 0x1c02 <CV_test+0x430>
    1bb2:	0d c0       	rjmp	.+26     	; 0x1bce <CV_test+0x3fc>

	//calculate next DAC value
	if(up)
		current_DAC++;
	else
		current_DAC--;
    1bb4:	08 94       	sec
    1bb6:	c1 08       	sbc	r12, r1
    1bb8:	d1 08       	sbc	r13, r1
		up = false; //switch to going down
		ramps--;
		if(ramps==0)
			break;
	}
	else if(!up && current_DAC <= min_DAC)
    1bba:	c7 54       	subi	r28, 0x47	; 71
    1bbc:	d4 4f       	sbci	r29, 0xF4	; 244
    1bbe:	68 81       	ld	r22, Y
    1bc0:	79 81       	ldd	r23, Y+1	; 0x01
    1bc2:	c9 5b       	subi	r28, 0xB9	; 185
    1bc4:	db 40       	sbci	r29, 0x0B	; 11
    1bc6:	6c 15       	cp	r22, r12
    1bc8:	7d 05       	cpc	r23, r13
    1bca:	74 f4       	brge	.+28     	; 0x1be8 <CV_test+0x416>
    1bcc:	1a c0       	rjmp	.+52     	; 0x1c02 <CV_test+0x430>

	//decision making
	if(up && current_DAC >= max_DAC)
	{
		up = false; //switch to going down
		ramps--;
    1bce:	08 94       	sec
    1bd0:	a1 08       	sbc	r10, r1
    1bd2:	b1 08       	sbc	r11, r1
		if(ramps==0)
    1bd4:	a1 14       	cp	r10, r1
    1bd6:	b1 04       	cpc	r11, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <CV_test+0x40a>
    1bda:	65 c0       	rjmp	.+202    	; 0x1ca6 <CV_test+0x4d4>
			break;
    1bdc:	c5 54       	subi	r28, 0x45	; 69
    1bde:	d4 4f       	sbci	r29, 0xF4	; 244
    1be0:	18 82       	st	Y, r1
    1be2:	cb 5b       	subi	r28, 0xBB	; 187
    1be4:	db 40       	sbci	r29, 0x0B	; 11
    1be6:	0d c0       	rjmp	.+26     	; 0x1c02 <CV_test+0x430>
	}
	else if(!up && current_DAC <= min_DAC)
	{
		up = true; //switch to going up
		ramps--;
    1be8:	08 94       	sec
    1bea:	a1 08       	sbc	r10, r1
    1bec:	b1 08       	sbc	r11, r1
		if(ramps==0)
    1bee:	a1 14       	cp	r10, r1
    1bf0:	b1 04       	cpc	r11, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <CV_test+0x424>
    1bf4:	58 c0       	rjmp	.+176    	; 0x1ca6 <CV_test+0x4d4>
			break;
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	c5 54       	subi	r28, 0x45	; 69
    1bfa:	d4 4f       	sbci	r29, 0xF4	; 244
    1bfc:	78 83       	st	Y, r23
    1bfe:	cb 5b       	subi	r28, 0xBB	; 187
    1c00:	db 40       	sbci	r29, 0x0B	; 11
	}

	current[i] = 0;
    1c02:	f4 01       	movw	r30, r8
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	8c 0f       	add	r24, r28
    1c0e:	9d 1f       	adc	r25, r29
    1c10:	e8 0f       	add	r30, r24
    1c12:	f9 1f       	adc	r31, r25
    1c14:	10 82       	st	Z, r1
    1c16:	11 82       	std	Z+1, r1	; 0x01
	//ADC measurements
	while(TIMER.CNT<step_time) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<step_time) {}
		
		if(current[i] == 0)
    1c18:	7f 01       	movw	r14, r30
    1c1a:	2b c0       	rjmp	.+86     	; 0x1c72 <CV_test+0x4a0>
	}

	current[i] = 0;
	//ADC measurements
	while(TIMER.CNT<step_time) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
    1c1c:	80 91 28 02 	lds	r24, 0x0228
    1c20:	80 68       	ori	r24, 0x80	; 128
    1c22:	80 93 28 02 	sts	0x0228, r24
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<step_time) {}
    1c26:	80 91 2b 02 	lds	r24, 0x022B
    1c2a:	80 fd       	sbrc	r24, 0
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <CV_test+0x46a>
    1c2e:	80 91 20 08 	lds	r24, 0x0820
    1c32:	90 91 21 08 	lds	r25, 0x0821
    1c36:	84 15       	cp	r24, r4
    1c38:	95 05       	cpc	r25, r5
    1c3a:	a8 f3       	brcs	.-22     	; 0x1c26 <CV_test+0x454>
		
		if(current[i] == 0)
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	00 81       	ld	r16, Z
    1c40:	11 81       	ldd	r17, Z+1	; 0x01
    1c42:	01 15       	cp	r16, r1
    1c44:	11 05       	cpc	r17, r1
    1c46:	49 f4       	brne	.+18     	; 0x1c5a <CV_test+0x488>
			current[i] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    1c48:	88 e2       	ldi	r24, 0x28	; 40
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    1c52:	f7 01       	movw	r30, r14
    1c54:	80 83       	st	Z, r24
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	0c c0       	rjmp	.+24     	; 0x1c72 <CV_test+0x4a0>
		else
			current[i] = (current[i] + ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET)) >> 1;
    1c5a:	88 e2       	ldi	r24, 0x28	; 40
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    1c64:	08 0f       	add	r16, r24
    1c66:	19 1f       	adc	r17, r25
    1c68:	15 95       	asr	r17
    1c6a:	07 95       	ror	r16
    1c6c:	f7 01       	movw	r30, r14
    1c6e:	00 83       	st	Z, r16
    1c70:	11 83       	std	Z+1, r17	; 0x01
			break;
	}

	current[i] = 0;
	//ADC measurements
	while(TIMER.CNT<step_time) {
    1c72:	80 91 20 08 	lds	r24, 0x0820
    1c76:	90 91 21 08 	lds	r25, 0x0821
    1c7a:	84 15       	cp	r24, r4
    1c7c:	95 05       	cpc	r25, r5
    1c7e:	70 f2       	brcs	.-100    	; 0x1c1c <CV_test+0x44a>
			current[i] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
		else
			current[i] = (current[i] + ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET)) >> 1;
	}

	steps_taken++;
    1c80:	08 94       	sec
    1c82:	61 1c       	adc	r6, r1
    1c84:	71 1c       	adc	r7, r1
	if(steps_taken >= steps_per_sample)
    1c86:	c4 54       	subi	r28, 0x44	; 68
    1c88:	d4 4f       	sbci	r29, 0xF4	; 244
    1c8a:	28 81       	ld	r18, Y
    1c8c:	39 81       	ldd	r19, Y+1	; 0x01
    1c8e:	cc 5b       	subi	r28, 0xBC	; 188
    1c90:	db 40       	sbci	r29, 0x0B	; 11
    1c92:	62 16       	cp	r6, r18
    1c94:	73 06       	cpc	r7, r19
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <CV_test+0x4c8>
    1c98:	6e cf       	rjmp	.-292    	; 0x1b76 <CV_test+0x3a4>
	{
		steps_taken = 0;
		i++;
    1c9a:	08 94       	sec
    1c9c:	81 1c       	adc	r8, r1
    1c9e:	91 1c       	adc	r9, r1
    1ca0:	66 24       	eor	r6, r6
    1ca2:	77 24       	eor	r7, r7
    1ca4:	68 cf       	rjmp	.-304    	; 0x1b76 <CV_test+0x3a4>
	}
}

	PORTE.OUTSET = PIN0_bm; //switch1
    1ca6:	e0 e8       	ldi	r30, 0x80	; 128
    1ca8:	f6 e0       	ldi	r31, 0x06	; 6
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	85 83       	std	Z+5, r24	; 0x05
	//PORTE.OUTCLR = PIN0_bm; //switch1
	PORTE.OUTCLR = PIN1_bm; //switch0
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	86 83       	std	Z+6, r24	; 0x06
	current_DAC = 2048;
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    1cba:	80 e2       	ldi	r24, 0x20	; 32
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    1cc4:	88 23       	and	r24, r24
    1cc6:	c9 f3       	breq	.-14     	; 0x1cba <CV_test+0x4e8>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	78 e0       	ldi	r23, 0x08	; 8
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1cd6:	80 91 a1 08 	lds	r24, 0x08A1
    1cda:	85 ff       	sbrs	r24, 5
    1cdc:	fc cf       	rjmp	.-8      	; 0x1cd6 <CV_test+0x504>
	USART_PutChar(&USARTC0, CV);
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 a0 08 	sts	0x08A0, r24
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
	for(j = 0; j < 15; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1ce8:	80 91 a1 08 	lds	r24, 0x08A1
    1cec:	85 ff       	sbrs	r24, 5
    1cee:	fc cf       	rjmp	.-8      	; 0x1ce8 <CV_test+0x516>
		USART_PutChar(&USARTC0, name[j]);
    1cf0:	c2 54       	subi	r28, 0x42	; 66
    1cf2:	d4 4f       	sbci	r29, 0xF4	; 244
    1cf4:	e8 81       	ld	r30, Y
    1cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf8:	ce 5b       	subi	r28, 0xBE	; 190
    1cfa:	db 40       	sbci	r29, 0x0B	; 11
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	80 81       	ld	r24, Z
    1d02:	80 93 a0 08 	sts	0x08A0, r24
		DAC_Channel_Write(&DACB,current_DAC,CH0);

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, CV);
	for(j = 0; j < 15; j++)
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	2f 30       	cpi	r18, 0x0F	; 15
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	61 f7       	brne	.-40     	; 0x1ce8 <CV_test+0x516>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, name[j]);
	}
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d10:	80 91 a1 08 	lds	r24, 0x08A1
    1d14:	85 ff       	sbrs	r24, 5
    1d16:	fc cf       	rjmp	.-8      	; 0x1d10 <CV_test+0x53e>
	USART_PutChar(&USARTC0, slope>>8);
    1d18:	c0 54       	subi	r28, 0x40	; 64
    1d1a:	d4 4f       	sbci	r29, 0xF4	; 244
    1d1c:	68 81       	ld	r22, Y
    1d1e:	79 81       	ldd	r23, Y+1	; 0x01
    1d20:	c0 5c       	subi	r28, 0xC0	; 192
    1d22:	db 40       	sbci	r29, 0x0B	; 11
    1d24:	87 2f       	mov	r24, r23
    1d26:	99 27       	eor	r25, r25
    1d28:	87 fd       	sbrc	r24, 7
    1d2a:	9a 95       	dec	r25
    1d2c:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d30:	80 91 a1 08 	lds	r24, 0x08A1
    1d34:	85 ff       	sbrs	r24, 5
    1d36:	fc cf       	rjmp	.-8      	; 0x1d30 <CV_test+0x55e>
	USART_PutChar(&USARTC0, slope);
    1d38:	c0 54       	subi	r28, 0x40	; 64
    1d3a:	d4 4f       	sbci	r29, 0xF4	; 244
    1d3c:	78 81       	ld	r23, Y
    1d3e:	c0 5c       	subi	r28, 0xC0	; 192
    1d40:	db 40       	sbci	r29, 0x0B	; 11
    1d42:	70 93 a0 08 	sts	0x08A0, r23
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d46:	80 91 a1 08 	lds	r24, 0x08A1
    1d4a:	85 ff       	sbrs	r24, 5
    1d4c:	fc cf       	rjmp	.-8      	; 0x1d46 <CV_test+0x574>
	USART_PutChar(&USARTC0, start>>8);
    1d4e:	ce 53       	subi	r28, 0x3E	; 62
    1d50:	d4 4f       	sbci	r29, 0xF4	; 244
    1d52:	e8 81       	ld	r30, Y
    1d54:	f9 81       	ldd	r31, Y+1	; 0x01
    1d56:	c2 5c       	subi	r28, 0xC2	; 194
    1d58:	db 40       	sbci	r29, 0x0B	; 11
    1d5a:	8f 2f       	mov	r24, r31
    1d5c:	99 27       	eor	r25, r25
    1d5e:	87 fd       	sbrc	r24, 7
    1d60:	9a 95       	dec	r25
    1d62:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d66:	80 91 a1 08 	lds	r24, 0x08A1
    1d6a:	85 ff       	sbrs	r24, 5
    1d6c:	fc cf       	rjmp	.-8      	; 0x1d66 <CV_test+0x594>
	USART_PutChar(&USARTC0, start);
    1d6e:	ce 53       	subi	r28, 0x3E	; 62
    1d70:	d4 4f       	sbci	r29, 0xF4	; 244
    1d72:	f8 81       	ld	r31, Y
    1d74:	c2 5c       	subi	r28, 0xC2	; 194
    1d76:	db 40       	sbci	r29, 0x0B	; 11
    1d78:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d7c:	80 91 a1 08 	lds	r24, 0x08A1
    1d80:	85 ff       	sbrs	r24, 5
    1d82:	fc cf       	rjmp	.-8      	; 0x1d7c <CV_test+0x5aa>
	USART_PutChar(&USARTC0, stop>>8);
    1d84:	cc 53       	subi	r28, 0x3C	; 60
    1d86:	d4 4f       	sbci	r29, 0xF4	; 244
    1d88:	28 81       	ld	r18, Y
    1d8a:	39 81       	ldd	r19, Y+1	; 0x01
    1d8c:	c4 5c       	subi	r28, 0xC4	; 196
    1d8e:	db 40       	sbci	r29, 0x0B	; 11
    1d90:	83 2f       	mov	r24, r19
    1d92:	99 27       	eor	r25, r25
    1d94:	87 fd       	sbrc	r24, 7
    1d96:	9a 95       	dec	r25
    1d98:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1d9c:	80 91 a1 08 	lds	r24, 0x08A1
    1da0:	85 ff       	sbrs	r24, 5
    1da2:	fc cf       	rjmp	.-8      	; 0x1d9c <CV_test+0x5ca>
	USART_PutChar(&USARTC0, stop);
    1da4:	cc 53       	subi	r28, 0x3C	; 60
    1da6:	d4 4f       	sbci	r29, 0xF4	; 244
    1da8:	38 81       	ld	r19, Y
    1daa:	c4 5c       	subi	r28, 0xC4	; 196
    1dac:	db 40       	sbci	r29, 0x0B	; 11
    1dae:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1db2:	80 91 a1 08 	lds	r24, 0x08A1
    1db6:	85 ff       	sbrs	r24, 5
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <CV_test+0x5e0>
	USART_PutChar(&USARTC0, scans>>8);
    1dba:	ca 53       	subi	r28, 0x3A	; 58
    1dbc:	d4 4f       	sbci	r29, 0xF4	; 244
    1dbe:	68 81       	ld	r22, Y
    1dc0:	79 81       	ldd	r23, Y+1	; 0x01
    1dc2:	c6 5c       	subi	r28, 0xC6	; 198
    1dc4:	db 40       	sbci	r29, 0x0B	; 11
    1dc6:	87 2f       	mov	r24, r23
    1dc8:	99 27       	eor	r25, r25
    1dca:	87 fd       	sbrc	r24, 7
    1dcc:	9a 95       	dec	r25
    1dce:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1dd2:	80 91 a1 08 	lds	r24, 0x08A1
    1dd6:	85 ff       	sbrs	r24, 5
    1dd8:	fc cf       	rjmp	.-8      	; 0x1dd2 <CV_test+0x600>
	USART_PutChar(&USARTC0, scans);
    1dda:	ca 53       	subi	r28, 0x3A	; 58
    1ddc:	d4 4f       	sbci	r29, 0xF4	; 244
    1dde:	78 81       	ld	r23, Y
    1de0:	c6 5c       	subi	r28, 0xC6	; 198
    1de2:	db 40       	sbci	r29, 0x0B	; 11
    1de4:	70 93 a0 08 	sts	0x08A0, r23
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1de8:	80 91 a1 08 	lds	r24, 0x08A1
    1dec:	85 ff       	sbrs	r24, 5
    1dee:	fc cf       	rjmp	.-8      	; 0x1de8 <CV_test+0x616>
	USART_PutChar(&USARTC0, sample_rate>>8);
    1df0:	c8 53       	subi	r28, 0x38	; 56
    1df2:	d4 4f       	sbci	r29, 0xF4	; 244
    1df4:	e8 81       	ld	r30, Y
    1df6:	f9 81       	ldd	r31, Y+1	; 0x01
    1df8:	c8 5c       	subi	r28, 0xC8	; 200
    1dfa:	db 40       	sbci	r29, 0x0B	; 11
    1dfc:	8f 2f       	mov	r24, r31
    1dfe:	99 27       	eor	r25, r25
    1e00:	87 fd       	sbrc	r24, 7
    1e02:	9a 95       	dec	r25
    1e04:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e08:	80 91 a1 08 	lds	r24, 0x08A1
    1e0c:	85 ff       	sbrs	r24, 5
    1e0e:	fc cf       	rjmp	.-8      	; 0x1e08 <CV_test+0x636>
	USART_PutChar(&USARTC0, sample_rate);
    1e10:	c8 53       	subi	r28, 0x38	; 56
    1e12:	d4 4f       	sbci	r29, 0xF4	; 244
    1e14:	f8 81       	ld	r31, Y
    1e16:	c8 5c       	subi	r28, 0xC8	; 200
    1e18:	db 40       	sbci	r29, 0x0B	; 11
    1e1a:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e1e:	80 91 a1 08 	lds	r24, 0x08A1
    1e22:	85 ff       	sbrs	r24, 5
    1e24:	fc cf       	rjmp	.-8      	; 0x1e1e <CV_test+0x64c>
	USART_PutChar(&USARTC0, curr_range);
    1e26:	c6 53       	subi	r28, 0x36	; 54
    1e28:	d4 4f       	sbci	r29, 0xF4	; 244
    1e2a:	28 81       	ld	r18, Y
    1e2c:	ca 5c       	subi	r28, 0xCA	; 202
    1e2e:	db 40       	sbci	r29, 0x0B	; 11
    1e30:	20 93 a0 08 	sts	0x08A0, r18
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e34:	80 91 a1 08 	lds	r24, 0x08A1
    1e38:	85 ff       	sbrs	r24, 5
    1e3a:	fc cf       	rjmp	.-8      	; 0x1e34 <CV_test+0x662>
	USART_PutChar(&USARTC0, i>>8);
    1e3c:	90 92 a0 08 	sts	0x08A0, r9
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e40:	80 91 a1 08 	lds	r24, 0x08A1
    1e44:	85 ff       	sbrs	r24, 5
    1e46:	fc cf       	rjmp	.-8      	; 0x1e40 <CV_test+0x66e>
	USART_PutChar(&USARTC0, i);
    1e48:	80 92 a0 08 	sts	0x08A0, r8
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	31 96       	adiw	r30, 0x01	; 1

	for(j = 0; j < i; j++)
    1e50:	94 01       	movw	r18, r8
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	2e 0f       	add	r18, r30
    1e58:	3f 1f       	adc	r19, r31
    1e5a:	13 c0       	rjmp	.+38     	; 0x1e82 <CV_test+0x6b0>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e5c:	80 91 a1 08 	lds	r24, 0x08A1
    1e60:	85 ff       	sbrs	r24, 5
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <CV_test+0x68a>
		USART_PutChar(&USARTC0, current[j]>>8);
    1e64:	40 81       	ld	r20, Z
    1e66:	51 81       	ldd	r21, Z+1	; 0x01
    1e68:	85 2f       	mov	r24, r21
    1e6a:	99 27       	eor	r25, r25
    1e6c:	87 fd       	sbrc	r24, 7
    1e6e:	9a 95       	dec	r25
    1e70:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e74:	80 91 a1 08 	lds	r24, 0x08A1
    1e78:	85 ff       	sbrs	r24, 5
    1e7a:	fc cf       	rjmp	.-8      	; 0x1e74 <CV_test+0x6a2>
		USART_PutChar(&USARTC0, current[j]);
    1e7c:	40 93 a0 08 	sts	0x08A0, r20
    1e80:	32 96       	adiw	r30, 0x02	; 2
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, i>>8);
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, i);

	for(j = 0; j < i; j++)
    1e82:	e2 17       	cp	r30, r18
    1e84:	f3 07       	cpc	r31, r19
    1e86:	51 f7       	brne	.-44     	; 0x1e5c <CV_test+0x68a>
		USART_PutChar(&USARTC0, current[j]>>8);
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, current[j]);
	}

	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    1e88:	80 91 a1 08 	lds	r24, 0x08A1
    1e8c:	85 ff       	sbrs	r24, 5
    1e8e:	fc cf       	rjmp	.-8      	; 0x1e88 <CV_test+0x6b6>
		USART_PutChar(&USARTC0,CV);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	80 93 a0 08 	sts	0x08A0, r24

	return i;
    1e96:	f4 01       	movw	r30, r8
}
    1e98:	cf 01       	movw	r24, r30
    1e9a:	c6 53       	subi	r28, 0x36	; 54
    1e9c:	d4 4f       	sbci	r29, 0xF4	; 244
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	bf 90       	pop	r11
    1eb4:	af 90       	pop	r10
    1eb6:	9f 90       	pop	r9
    1eb8:	8f 90       	pop	r8
    1eba:	7f 90       	pop	r7
    1ebc:	6f 90       	pop	r6
    1ebe:	5f 90       	pop	r5
    1ec0:	4f 90       	pop	r4
    1ec2:	3f 90       	pop	r3
    1ec4:	2f 90       	pop	r2
    1ec6:	08 95       	ret

00001ec8 <SWV_test>:
	_delay_ms(200);
	return 1;
}

int16_t SWV_test (char* name, int16_t freq, int16_t start, int16_t stop, int16_t height, int16_t increment, uint8_t curr_range)
{
    1ec8:	2f 92       	push	r2
    1eca:	3f 92       	push	r3
    1ecc:	4f 92       	push	r4
    1ece:	5f 92       	push	r5
    1ed0:	6f 92       	push	r6
    1ed2:	7f 92       	push	r7
    1ed4:	8f 92       	push	r8
    1ed6:	9f 92       	push	r9
    1ed8:	af 92       	push	r10
    1eda:	bf 92       	push	r11
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	ca 50       	subi	r28, 0x0A	; 10
    1ef2:	d8 40       	sbci	r29, 0x08	; 8
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	c4 50       	subi	r28, 0x04	; 4
    1efa:	d8 4f       	sbci	r29, 0xF8	; 248
    1efc:	88 83       	st	Y, r24
    1efe:	99 83       	std	Y+1, r25	; 0x01
    1f00:	cc 5f       	subi	r28, 0xFC	; 252
    1f02:	d7 40       	sbci	r29, 0x07	; 7
    1f04:	c2 50       	subi	r28, 0x02	; 2
    1f06:	d8 4f       	sbci	r29, 0xF8	; 248
    1f08:	68 83       	st	Y, r22
    1f0a:	79 83       	std	Y+1, r23	; 0x01
    1f0c:	ce 5f       	subi	r28, 0xFE	; 254
    1f0e:	d7 40       	sbci	r29, 0x07	; 7
    1f10:	c0 50       	subi	r28, 0x00	; 0
    1f12:	d8 4f       	sbci	r29, 0xF8	; 248
    1f14:	48 83       	st	Y, r20
    1f16:	59 83       	std	Y+1, r21	; 0x01
    1f18:	c0 50       	subi	r28, 0x00	; 0
    1f1a:	d8 40       	sbci	r29, 0x08	; 8
    1f1c:	ce 5f       	subi	r28, 0xFE	; 254
    1f1e:	d7 4f       	sbci	r29, 0xF7	; 247
    1f20:	28 83       	st	Y, r18
    1f22:	39 83       	std	Y+1, r19	; 0x01
    1f24:	c2 50       	subi	r28, 0x02	; 2
    1f26:	d8 40       	sbci	r29, 0x08	; 8
    1f28:	cc 5f       	subi	r28, 0xFC	; 252
    1f2a:	d7 4f       	sbci	r29, 0xF7	; 247
    1f2c:	08 83       	st	Y, r16
    1f2e:	19 83       	std	Y+1, r17	; 0x01
    1f30:	c4 50       	subi	r28, 0x04	; 4
    1f32:	d8 40       	sbci	r29, 0x08	; 8
    1f34:	ca 5f       	subi	r28, 0xFA	; 250
    1f36:	d7 4f       	sbci	r29, 0xF7	; 247
    1f38:	e8 82       	st	Y, r14
    1f3a:	f9 82       	std	Y+1, r15	; 0x01
    1f3c:	c6 50       	subi	r28, 0x06	; 6
    1f3e:	d8 40       	sbci	r29, 0x08	; 8
    1f40:	c8 5f       	subi	r28, 0xF8	; 248
    1f42:	d7 4f       	sbci	r29, 0xF7	; 247
    1f44:	c8 82       	st	Y, r12
    1f46:	c8 50       	subi	r28, 0x08	; 8
    1f48:	d8 40       	sbci	r29, 0x08	; 8
		int16_t ADC_waveform[SWV_MAX_DATAPOINTS/2];
		int16_t DAC_waveform[SWV_MAX_DATAPOINTS/2];
	#endif

	//check limits
	if(start<-1600 || start>1600 || stop<-1600 || stop>1600 || freq>200 || freq<1 || height>1600 || increment>1600)
    1f4a:	ca 01       	movw	r24, r20
    1f4c:	80 5c       	subi	r24, 0xC0	; 192
    1f4e:	99 4f       	sbci	r25, 0xF9	; 249
    1f50:	81 58       	subi	r24, 0x81	; 129
    1f52:	9c 40       	sbci	r25, 0x0C	; 12
    1f54:	d0 f4       	brcc	.+52     	; 0x1f8a <SWV_test+0xc2>
    1f56:	ce 5f       	subi	r28, 0xFE	; 254
    1f58:	d7 4f       	sbci	r29, 0xF7	; 247
    1f5a:	48 81       	ld	r20, Y
    1f5c:	59 81       	ldd	r21, Y+1	; 0x01
    1f5e:	c2 50       	subi	r28, 0x02	; 2
    1f60:	d8 40       	sbci	r29, 0x08	; 8
    1f62:	89 ef       	ldi	r24, 0xF9	; 249
    1f64:	40 3c       	cpi	r20, 0xC0	; 192
    1f66:	58 07       	cpc	r21, r24
    1f68:	84 f0       	brlt	.+32     	; 0x1f8a <SWV_test+0xc2>
    1f6a:	41 54       	subi	r20, 0x41	; 65
    1f6c:	56 40       	sbci	r21, 0x06	; 6
    1f6e:	6c f4       	brge	.+26     	; 0x1f8a <SWV_test+0xc2>
    1f70:	69 3c       	cpi	r22, 0xC9	; 201
    1f72:	71 05       	cpc	r23, r1
    1f74:	54 f4       	brge	.+20     	; 0x1f8a <SWV_test+0xc2>
    1f76:	16 16       	cp	r1, r22
    1f78:	17 06       	cpc	r1, r23
    1f7a:	3c f4       	brge	.+14     	; 0x1f8a <SWV_test+0xc2>
    1f7c:	01 54       	subi	r16, 0x41	; 65
    1f7e:	16 40       	sbci	r17, 0x06	; 6
    1f80:	24 f4       	brge	.+8      	; 0x1f8a <SWV_test+0xc2>
    1f82:	97 01       	movw	r18, r14
    1f84:	21 54       	subi	r18, 0x41	; 65
    1f86:	36 40       	sbci	r19, 0x06	; 6
    1f88:	44 f0       	brlt	.+16     	; 0x1f9a <SWV_test+0xd2>
	{
		lcdClear();
    1f8a:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    1f8e:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("outside limits",14);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e2       	ldi	r25, 0x20	; 32
    1f96:	6e e0       	ldi	r22, 0x0E	; 14
    1f98:	be c0       	rjmp	.+380    	; 0x2116 <SWV_test+0x24e>
		return -1;
	}

	//convert to DAC index
	start_DAC = (int16_t) (round(start*(2048/1600))+2048);  
    1f9a:	c0 50       	subi	r28, 0x00	; 0
    1f9c:	d8 4f       	sbci	r29, 0xF8	; 248
    1f9e:	e8 81       	ld	r30, Y
    1fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa2:	c0 50       	subi	r28, 0x00	; 0
    1fa4:	d8 40       	sbci	r29, 0x08	; 8
    1fa6:	bf 01       	movw	r22, r30
    1fa8:	88 27       	eor	r24, r24
    1faa:	77 fd       	sbrc	r23, 7
    1fac:	80 95       	com	r24
    1fae:	98 2f       	mov	r25, r24
    1fb0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1fb4:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	55 e4       	ldi	r21, 0x45	; 69
    1fc0:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    1fc4:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    1fc8:	7b 01       	movw	r14, r22
	stop_DAC = (int16_t) (round(stop*(2048/1600))+2048);   
    1fca:	ce 5f       	subi	r28, 0xFE	; 254
    1fcc:	d7 4f       	sbci	r29, 0xF7	; 247
    1fce:	28 81       	ld	r18, Y
    1fd0:	39 81       	ldd	r19, Y+1	; 0x01
    1fd2:	c2 50       	subi	r28, 0x02	; 2
    1fd4:	d8 40       	sbci	r29, 0x08	; 8
    1fd6:	b9 01       	movw	r22, r18
    1fd8:	88 27       	eor	r24, r24
    1fda:	77 fd       	sbrc	r23, 7
    1fdc:	80 95       	com	r24
    1fde:	98 2f       	mov	r25, r24
    1fe0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    1fe4:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	55 e4       	ldi	r21, 0x45	; 69
    1ff0:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    1ff4:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    1ff8:	c9 50       	subi	r28, 0x09	; 9
    1ffa:	d8 4f       	sbci	r29, 0xF8	; 248
    1ffc:	68 83       	st	Y, r22
    1ffe:	79 83       	std	Y+1, r23	; 0x01
    2000:	c7 5f       	subi	r28, 0xF7	; 247
    2002:	d7 40       	sbci	r29, 0x07	; 7

	//determine direction
	if((stop-start)>0)
    2004:	ce 5f       	subi	r28, 0xFE	; 254
    2006:	d7 4f       	sbci	r29, 0xF7	; 247
    2008:	88 81       	ld	r24, Y
    200a:	99 81       	ldd	r25, Y+1	; 0x01
    200c:	c2 50       	subi	r28, 0x02	; 2
    200e:	d8 40       	sbci	r29, 0x08	; 8
    2010:	c0 50       	subi	r28, 0x00	; 0
    2012:	d8 4f       	sbci	r29, 0xF8	; 248
    2014:	48 81       	ld	r20, Y
    2016:	59 81       	ldd	r21, Y+1	; 0x01
    2018:	c0 50       	subi	r28, 0x00	; 0
    201a:	d8 40       	sbci	r29, 0x08	; 8
    201c:	84 1b       	sub	r24, r20
    201e:	95 0b       	sbc	r25, r21
    2020:	18 16       	cp	r1, r24
    2022:	19 06       	cpc	r1, r25
    2024:	5c f5       	brge	.+86     	; 0x207c <SWV_test+0x1b4>
	{
		//up
		increment_DAC = (int16_t) (round(increment*(2048/1600)));
    2026:	ca 5f       	subi	r28, 0xFA	; 250
    2028:	d7 4f       	sbci	r29, 0xF7	; 247
    202a:	e8 81       	ld	r30, Y
    202c:	f9 81       	ldd	r31, Y+1	; 0x01
    202e:	c6 50       	subi	r28, 0x06	; 6
    2030:	d8 40       	sbci	r29, 0x08	; 8
    2032:	bf 01       	movw	r22, r30
    2034:	88 27       	eor	r24, r24
    2036:	77 fd       	sbrc	r23, 7
    2038:	80 95       	com	r24
    203a:	98 2f       	mov	r25, r24
    203c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2040:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2044:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2048:	8b 01       	movw	r16, r22
		height_DAC = (int16_t) (round(height*(2048/1600)));
    204a:	cc 5f       	subi	r28, 0xFC	; 252
    204c:	d7 4f       	sbci	r29, 0xF7	; 247
    204e:	28 81       	ld	r18, Y
    2050:	39 81       	ldd	r19, Y+1	; 0x01
    2052:	c4 50       	subi	r28, 0x04	; 4
    2054:	d8 40       	sbci	r29, 0x08	; 8
    2056:	b9 01       	movw	r22, r18
    2058:	88 27       	eor	r24, r24
    205a:	77 fd       	sbrc	r23, 7
    205c:	80 95       	com	r24
    205e:	98 2f       	mov	r25, r24
    2060:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2064:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2068:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    206c:	5b 01       	movw	r10, r22
    206e:	31 e0       	ldi	r19, 0x01	; 1
    2070:	c7 50       	subi	r28, 0x07	; 7
    2072:	d8 4f       	sbci	r29, 0xF8	; 248
    2074:	38 83       	st	Y, r19
    2076:	c9 5f       	subi	r28, 0xF9	; 249
    2078:	d7 40       	sbci	r29, 0x07	; 7
    207a:	2d c0       	rjmp	.+90     	; 0x20d6 <SWV_test+0x20e>
		up=true;
	}
	else
	{
		//down
		increment_DAC = (int16_t) (round(increment*(-2048/1600)));
    207c:	ca 5f       	subi	r28, 0xFA	; 250
    207e:	d7 4f       	sbci	r29, 0xF7	; 247
    2080:	68 81       	ld	r22, Y
    2082:	79 81       	ldd	r23, Y+1	; 0x01
    2084:	c6 50       	subi	r28, 0x06	; 6
    2086:	d8 40       	sbci	r29, 0x08	; 8
    2088:	70 95       	com	r23
    208a:	61 95       	neg	r22
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	88 27       	eor	r24, r24
    2090:	77 fd       	sbrc	r23, 7
    2092:	80 95       	com	r24
    2094:	98 2f       	mov	r25, r24
    2096:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    209a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    209e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    20a2:	8b 01       	movw	r16, r22
		height_DAC = (int16_t) (round(height*(-2048/1600)));
    20a4:	cc 5f       	subi	r28, 0xFC	; 252
    20a6:	d7 4f       	sbci	r29, 0xF7	; 247
    20a8:	68 81       	ld	r22, Y
    20aa:	79 81       	ldd	r23, Y+1	; 0x01
    20ac:	c4 50       	subi	r28, 0x04	; 4
    20ae:	d8 40       	sbci	r29, 0x08	; 8
    20b0:	70 95       	com	r23
    20b2:	61 95       	neg	r22
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	88 27       	eor	r24, r24
    20b8:	77 fd       	sbrc	r23, 7
    20ba:	80 95       	com	r24
    20bc:	98 2f       	mov	r25, r24
    20be:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    20c2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    20c6:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    20ca:	5b 01       	movw	r10, r22
    20cc:	c7 50       	subi	r28, 0x07	; 7
    20ce:	d8 4f       	sbci	r29, 0xF8	; 248
    20d0:	18 82       	st	Y, r1
    20d2:	c9 5f       	subi	r28, 0xF9	; 249
    20d4:	d7 40       	sbci	r29, 0x07	; 7
		up=false;
	}

	samples = (stop_DAC-start_DAC-height_DAC/2)/increment_DAC;
    20d6:	c5 01       	movw	r24, r10
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__divmodhi4>
    20e0:	88 24       	eor	r8, r8
    20e2:	99 24       	eor	r9, r9
    20e4:	86 1a       	sub	r8, r22
    20e6:	97 0a       	sbc	r9, r23
	if(samples > SWV_MAX_DATAPOINTS/2)
    20e8:	c9 50       	subi	r28, 0x09	; 9
    20ea:	d8 4f       	sbci	r29, 0xF8	; 248
    20ec:	88 81       	ld	r24, Y
    20ee:	99 81       	ldd	r25, Y+1	; 0x01
    20f0:	c7 5f       	subi	r28, 0xF7	; 247
    20f2:	d7 40       	sbci	r29, 0x07	; 7
    20f4:	8e 19       	sub	r24, r14
    20f6:	9f 09       	sbc	r25, r15
    20f8:	88 0d       	add	r24, r8
    20fa:	99 1d       	adc	r25, r9
    20fc:	b8 01       	movw	r22, r16
    20fe:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__divmodhi4>
    2102:	65 5f       	subi	r22, 0xF5	; 245
    2104:	71 40       	sbci	r23, 0x01	; 1
    2106:	60 f0       	brcs	.+24     	; 0x2120 <SWV_test+0x258>
	{
		lcdClear();
    2108:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    210c:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("too many data points",20);
    2110:	8f e0       	ldi	r24, 0x0F	; 15
    2112:	90 e2       	ldi	r25, 0x20	; 32
    2114:	64 e1       	ldi	r22, 0x14	; 20
    2116:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    211a:	2f ef       	ldi	r18, 0xFF	; 255
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	f1 c2       	rjmp	.+1506   	; 0x2702 <SWV_test+0x83a>
		return -1;
	}


	//calculate period in clock cycles
	half_period_temp = (int32_t) (round(F_CPU/(2*freq)));
    2120:	c2 50       	subi	r28, 0x02	; 2
    2122:	d8 4f       	sbci	r29, 0xF8	; 248
    2124:	28 81       	ld	r18, Y
    2126:	39 81       	ldd	r19, Y+1	; 0x01
    2128:	ce 5f       	subi	r28, 0xFE	; 254
    212a:	d7 40       	sbci	r29, 0x07	; 7
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	44 27       	eor	r20, r20
    2132:	37 fd       	sbrc	r19, 7
    2134:	40 95       	com	r20
    2136:	54 2f       	mov	r21, r20
    2138:	60 e8       	ldi	r22, 0x80	; 128
    213a:	74 e8       	ldi	r23, 0x84	; 132
    213c:	8e e1       	ldi	r24, 0x1E	; 30
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <__udivmodsi4>
    2144:	ca 01       	movw	r24, r20
    2146:	b9 01       	movw	r22, r18
    2148:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__floatunsisf>
    214c:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2150:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2154:	9b 01       	movw	r18, r22
    2156:	ac 01       	movw	r20, r24
	if(half_period_temp <= 50000) //above 20Hz
    2158:	21 35       	cpi	r18, 0x51	; 81
    215a:	83 ec       	ldi	r24, 0xC3	; 195
    215c:	38 07       	cpc	r19, r24
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	48 07       	cpc	r20, r24
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	58 07       	cpc	r21, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <SWV_test+0x2aa>
	{
		TIMER.CTRLA = TC_CLKSEL_DIV1_gc;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 00 08 	sts	0x0800, r24
		half_period = half_period_temp;
    216e:	69 01       	movw	r12, r18
    2170:	49 c0       	rjmp	.+146    	; 0x2204 <SWV_test+0x33c>
	}
	else if(half_period_temp <= 100000) //10-20Hz
    2172:	21 3a       	cpi	r18, 0xA1	; 161
    2174:	96 e8       	ldi	r25, 0x86	; 134
    2176:	39 07       	cpc	r19, r25
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	49 07       	cpc	r20, r25
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	59 07       	cpc	r21, r25
    2180:	54 f4       	brge	.+20     	; 0x2196 <SWV_test+0x2ce>
	{
		TIMER.CTRLA = TC_CLKSEL_DIV2_gc;
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	80 93 00 08 	sts	0x0800, r24
		half_period = half_period_temp/2;
    2188:	da 01       	movw	r26, r20
    218a:	c9 01       	movw	r24, r18
    218c:	b5 95       	asr	r27
    218e:	a7 95       	ror	r26
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	36 c0       	rjmp	.+108    	; 0x2202 <SWV_test+0x33a>
	}
	else if(half_period_temp <= 200000) //5-10Hz
    2196:	21 34       	cpi	r18, 0x41	; 65
    2198:	ed e0       	ldi	r30, 0x0D	; 13
    219a:	3e 07       	cpc	r19, r30
    219c:	e3 e0       	ldi	r30, 0x03	; 3
    219e:	4e 07       	cpc	r20, r30
    21a0:	e0 e0       	ldi	r30, 0x00	; 0
    21a2:	5e 07       	cpc	r21, r30
    21a4:	6c f4       	brge	.+26     	; 0x21c0 <SWV_test+0x2f8>
	{
		TIMER.CTRLA = TC_CLKSEL_DIV4_gc;
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	80 93 00 08 	sts	0x0800, r24
		half_period = half_period_temp/4;
    21ac:	da 01       	movw	r26, r20
    21ae:	c9 01       	movw	r24, r18
    21b0:	e2 e0       	ldi	r30, 0x02	; 2
    21b2:	b5 95       	asr	r27
    21b4:	a7 95       	ror	r26
    21b6:	97 95       	ror	r25
    21b8:	87 95       	ror	r24
    21ba:	ea 95       	dec	r30
    21bc:	d1 f7       	brne	.-12     	; 0x21b2 <SWV_test+0x2ea>
    21be:	21 c0       	rjmp	.+66     	; 0x2202 <SWV_test+0x33a>
	}
	else if(half_period_temp <= 400000) //2.5-5Hz
    21c0:	21 38       	cpi	r18, 0x81	; 129
    21c2:	fa e1       	ldi	r31, 0x1A	; 26
    21c4:	3f 07       	cpc	r19, r31
    21c6:	f6 e0       	ldi	r31, 0x06	; 6
    21c8:	4f 07       	cpc	r20, r31
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	5f 07       	cpc	r21, r31
    21ce:	6c f4       	brge	.+26     	; 0x21ea <SWV_test+0x322>
	{
		TIMER.CTRLA = TC_CLKSEL_DIV8_gc;
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	80 93 00 08 	sts	0x0800, r24
		half_period = half_period_temp/8;
    21d6:	da 01       	movw	r26, r20
    21d8:	c9 01       	movw	r24, r18
    21da:	73 e0       	ldi	r23, 0x03	; 3
    21dc:	b5 95       	asr	r27
    21de:	a7 95       	ror	r26
    21e0:	97 95       	ror	r25
    21e2:	87 95       	ror	r24
    21e4:	7a 95       	dec	r23
    21e6:	d1 f7       	brne	.-12     	; 0x21dc <SWV_test+0x314>
    21e8:	0c c0       	rjmp	.+24     	; 0x2202 <SWV_test+0x33a>
	}
	else //if(half_period_temp <= 3200000) //0.3125-2.5Hz
	{
		TIMER.CTRLA = TC_CLKSEL_DIV64_gc;
    21ea:	85 e0       	ldi	r24, 0x05	; 5
    21ec:	80 93 00 08 	sts	0x0800, r24
		half_period = half_period_temp/64;
    21f0:	da 01       	movw	r26, r20
    21f2:	c9 01       	movw	r24, r18
    21f4:	66 e0       	ldi	r22, 0x06	; 6
    21f6:	b5 95       	asr	r27
    21f8:	a7 95       	ror	r26
    21fa:	97 95       	ror	r25
    21fc:	87 95       	ror	r24
    21fe:	6a 95       	dec	r22
    2200:	d1 f7       	brne	.-12     	; 0x21f6 <SWV_test+0x32e>
    2202:	6c 01       	movw	r12, r24
		l = 0;
		cont = true;
	#endif

	//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    2204:	e0 e8       	ldi	r30, 0x80	; 128
    2206:	f6 e0       	ldi	r31, 0x06	; 6
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	85 83       	std	Z+5, r24	; 0x05
	if(curr_range == RANGE_10UA)
    2210:	c8 5f       	subi	r28, 0xF8	; 248
    2212:	d7 4f       	sbci	r29, 0xF7	; 247
    2214:	28 81       	ld	r18, Y
    2216:	c8 50       	subi	r28, 0x08	; 8
    2218:	d8 40       	sbci	r29, 0x08	; 8
    221a:	21 30       	cpi	r18, 0x01	; 1
    221c:	19 f4       	brne	.+6      	; 0x2224 <SWV_test+0x35c>
		PORTE.OUTCLR = PIN3_bm; //switch3
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	86 83       	std	Z+6, r24	; 0x06
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <SWV_test+0x360>
	else
		PORTE.OUTSET = PIN3_bm; //switch3
    2224:	88 e0       	ldi	r24, 0x08	; 8
    2226:	85 83       	std	Z+5, r24	; 0x05
	//_delay_ms(50);
	PORTE.OUTCLR = PIN0_bm; //switch1
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	e0 e8       	ldi	r30, 0x80	; 128
    222c:	f6 e0       	ldi	r31, 0x06	; 6
    222e:	86 83       	std	Z+6, r24	; 0x06
    2230:	80 ed       	ldi	r24, 0xD0	; 208
    2232:	97 e0       	ldi	r25, 0x07	; 7
    2234:	22 e3       	ldi	r18, 0x32	; 50
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	f9 01       	movw	r30, r18
    223a:	31 97       	sbiw	r30, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <SWV_test+0x372>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	d9 f7       	brne	.-10     	; 0x2238 <SWV_test+0x370>
	{
		TIMER.CTRLA = TC_CLKSEL_DIV64_gc;
		half_period = half_period_temp/64;
	}

	current = start_DAC-(height_DAC/2);
    2242:	34 01       	movw	r6, r8
    2244:	6e 0c       	add	r6, r14
    2246:	7f 1c       	adc	r7, r15
    2248:	ae 01       	movw	r20, r28
    224a:	47 5f       	subi	r20, 0xF7	; 247
    224c:	5b 4f       	sbci	r21, 0xFB	; 251
    224e:	cb 50       	subi	r28, 0x0B	; 11
    2250:	d8 4f       	sbci	r29, 0xF8	; 248
    2252:	48 83       	st	Y, r20
    2254:	59 83       	std	Y+1, r21	; 0x01
    2256:	c5 5f       	subi	r28, 0xF5	; 245
    2258:	d7 40       	sbci	r29, 0x07	; 7
    225a:	48 01       	movw	r8, r16
    225c:	23 01       	movw	r4, r6
    225e:	4a 0c       	add	r4, r10
    2260:	5b 1c       	adc	r5, r11
    2262:	ce 01       	movw	r24, r28
    2264:	81 96       	adiw	r24, 0x21	; 33
    2266:	cd 50       	subi	r28, 0x0D	; 13
    2268:	d8 4f       	sbci	r29, 0xF8	; 248
    226a:	88 83       	st	Y, r24
    226c:	99 83       	std	Y+1, r25	; 0x01
    226e:	c3 5f       	subi	r28, 0xF3	; 243
    2270:	d7 40       	sbci	r29, 0x07	; 7
    2272:	cf 50       	subi	r28, 0x0F	; 15
    2274:	d8 4f       	sbci	r29, 0xF8	; 248
    2276:	48 83       	st	Y, r20
    2278:	59 83       	std	Y+1, r21	; 0x01
    227a:	c1 5f       	subi	r28, 0xF1	; 241
    227c:	d7 40       	sbci	r29, 0x07	; 7
    227e:	1c 01       	movw	r2, r24
    2280:	c6 50       	subi	r28, 0x06	; 6
    2282:	d8 4f       	sbci	r29, 0xF8	; 248
    2284:	18 82       	st	Y, r1
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	ca 5f       	subi	r28, 0xFA	; 250
    228a:	d7 40       	sbci	r29, 0x07	; 7
    228c:	00 e0       	ldi	r16, 0x00	; 0
    228e:	10 e0       	ldi	r17, 0x00	; 0
			}	
		#endif		
	}

	forwardCurrent[i] = 0;
	for(k = 0; k < SWV_BUFFER_SIZE; k++)
    2290:	c7 5f       	subi	r28, 0xF7	; 247
    2292:	d7 4f       	sbci	r29, 0xF7	; 247
    2294:	88 83       	st	Y, r24
    2296:	99 83       	std	Y+1, r25	; 0x01
    2298:	c9 50       	subi	r28, 0x09	; 9
    229a:	d8 40       	sbci	r29, 0x08	; 8
	_delay_ms(200);

while(1)
{
	//set DAC and trigger timer
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	93 e0       	ldi	r25, 0x03	; 3
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    22a6:	88 23       	and	r24, r24
    22a8:	c9 f3       	breq	.-14     	; 0x229c <SWV_test+0x3d4>
		DAC_Channel_Write(&DACB,current,CH0);
    22aa:	80 e2       	ldi	r24, 0x20	; 32
    22ac:	93 e0       	ldi	r25, 0x03	; 3
    22ae:	b3 01       	movw	r22, r6
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
	TIMER.CNT = 0;
    22b6:	10 92 20 08 	sts	0x0820, r1
    22ba:	10 92 21 08 	sts	0x0821, r1

	//calculate next DAC value
	current += height_DAC;
	//break if complete
	if((up&&(current>stop_DAC)) || (!up&&(current<stop_DAC)))
    22be:	c7 50       	subi	r28, 0x07	; 7
    22c0:	d8 4f       	sbci	r29, 0xF8	; 248
    22c2:	98 81       	ld	r25, Y
    22c4:	c9 5f       	subi	r28, 0xF9	; 249
    22c6:	d7 40       	sbci	r29, 0x07	; 7
    22c8:	99 23       	and	r25, r25
    22ca:	51 f0       	breq	.+20     	; 0x22e0 <SWV_test+0x418>
    22cc:	c9 50       	subi	r28, 0x09	; 9
    22ce:	d8 4f       	sbci	r29, 0xF8	; 248
    22d0:	e8 81       	ld	r30, Y
    22d2:	f9 81       	ldd	r31, Y+1	; 0x01
    22d4:	c7 5f       	subi	r28, 0xF7	; 247
    22d6:	d7 40       	sbci	r29, 0x07	; 7
    22d8:	e4 15       	cp	r30, r4
    22da:	f5 05       	cpc	r31, r5
    22dc:	a4 f5       	brge	.+104    	; 0x2346 <SWV_test+0x47e>
    22de:	d0 c0       	rjmp	.+416    	; 0x2480 <SWV_test+0x5b8>
    22e0:	c9 50       	subi	r28, 0x09	; 9
    22e2:	d8 4f       	sbci	r29, 0xF8	; 248
    22e4:	28 81       	ld	r18, Y
    22e6:	39 81       	ldd	r19, Y+1	; 0x01
    22e8:	c7 5f       	subi	r28, 0xF7	; 247
    22ea:	d7 40       	sbci	r29, 0x07	; 7
    22ec:	42 16       	cp	r4, r18
    22ee:	53 06       	cpc	r5, r19
    22f0:	54 f5       	brge	.+84     	; 0x2346 <SWV_test+0x47e>
    22f2:	c6 c0       	rjmp	.+396    	; 0x2480 <SWV_test+0x5b8>
			cont = false;	
	#endif

	//ADC measurements
	while(TIMER.CNT<half_period) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
    22f4:	80 91 28 02 	lds	r24, 0x0228
    22f8:	80 68       	ori	r24, 0x80	; 128
    22fa:	80 93 28 02 	sts	0x0228, r24
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<half_period) {}
    22fe:	80 91 2b 02 	lds	r24, 0x022B
    2302:	80 fd       	sbrc	r24, 0
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <SWV_test+0x44c>
    2306:	80 91 20 08 	lds	r24, 0x0820
    230a:	90 91 21 08 	lds	r25, 0x0821
    230e:	8c 15       	cp	r24, r12
    2310:	9d 05       	cpc	r25, r13
    2312:	a8 f3       	brcs	.-22     	; 0x22fe <SWV_test+0x436>
		
		//get end point
		result_buffer[j] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    2314:	88 e2       	ldi	r24, 0x28	; 40
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
		j++;
    231e:	98 01       	movw	r18, r16
    2320:	2f 5f       	subi	r18, 0xFF	; 255
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
		if(j==SWV_BUFFER_SIZE)
    2324:	20 31       	cpi	r18, 0x10	; 16
    2326:	31 05       	cpc	r19, r1
    2328:	11 f4       	brne	.+4      	; 0x232e <SWV_test+0x466>
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
	while(TIMER.CNT<half_period) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<half_period) {}
		
		//get end point
		result_buffer[j] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    232e:	00 0f       	add	r16, r16
    2330:	11 1f       	adc	r17, r17
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	4c 0f       	add	r20, r28
    2338:	5d 1f       	adc	r21, r29
    233a:	04 0f       	add	r16, r20
    233c:	15 1f       	adc	r17, r21
    233e:	f8 01       	movw	r30, r16
    2340:	80 83       	st	Z, r24
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	89 01       	movw	r16, r18
		if((up&&(current>DEBUG_INDEX_STOP))||(!up&&(current<DEBUG_INDEX_STOP)))
			cont = false;	
	#endif

	//ADC measurements
	while(TIMER.CNT<half_period) {
    2346:	80 91 20 08 	lds	r24, 0x0820
    234a:	90 91 21 08 	lds	r25, 0x0821
    234e:	8c 15       	cp	r24, r12
    2350:	9d 05       	cpc	r25, r13
    2352:	80 f2       	brcs	.-96     	; 0x22f4 <SWV_test+0x42c>
					l = 0;
			}	
		#endif		
	}

	forwardCurrent[i] = 0;
    2354:	f1 01       	movw	r30, r2
    2356:	10 82       	st	Z, r1
    2358:	11 82       	std	Z+1, r1	; 0x01
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	5e 01       	movw	r10, r28
    2360:	08 94       	sec
    2362:	a1 1c       	adc	r10, r1
    2364:	b1 1c       	adc	r11, r1
    2366:	75 01       	movw	r14, r10
	for(k = 0; k < SWV_BUFFER_SIZE; k++)
		forwardCurrent[i] += result_buffer[k];
    2368:	f7 01       	movw	r30, r14
    236a:	81 91       	ld	r24, Z+
    236c:	91 91       	ld	r25, Z+
    236e:	7f 01       	movw	r14, r30
    2370:	28 0f       	add	r18, r24
    2372:	39 1f       	adc	r19, r25
			}	
		#endif		
	}

	forwardCurrent[i] = 0;
	for(k = 0; k < SWV_BUFFER_SIZE; k++)
    2374:	c7 5f       	subi	r28, 0xF7	; 247
    2376:	d7 4f       	sbci	r29, 0xF7	; 247
    2378:	48 81       	ld	r20, Y
    237a:	59 81       	ldd	r21, Y+1	; 0x01
    237c:	c9 50       	subi	r28, 0x09	; 9
    237e:	d8 40       	sbci	r29, 0x08	; 8
    2380:	e4 17       	cp	r30, r20
    2382:	f5 07       	cpc	r31, r21
    2384:	89 f7       	brne	.-30     	; 0x2368 <SWV_test+0x4a0>
    2386:	f1 01       	movw	r30, r2
    2388:	20 83       	st	Z, r18
    238a:	31 83       	std	Z+1, r19	; 0x01
		forwardCurrent[i] += result_buffer[k];

	//set DAC and trigger timer
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    238c:	80 e2       	ldi	r24, 0x20	; 32
    238e:	93 e0       	ldi	r25, 0x03	; 3
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    2396:	88 23       	and	r24, r24
    2398:	c9 f3       	breq	.-14     	; 0x238c <SWV_test+0x4c4>
		DAC_Channel_Write(&DACB,current,CH0);
    239a:	80 e2       	ldi	r24, 0x20	; 32
    239c:	93 e0       	ldi	r25, 0x03	; 3
    239e:	b2 01       	movw	r22, r4
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
	TIMER.CNT = 0;
    23a6:	10 92 20 08 	sts	0x0820, r1
    23aa:	10 92 21 08 	sts	0x0821, r1
    23ae:	29 c0       	rjmp	.+82     	; 0x2402 <SWV_test+0x53a>
	//calculate next DAC value
	current -= (height_DAC-increment_DAC);

	//ADC measurements
	while(TIMER.CNT<half_period) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
    23b0:	80 91 28 02 	lds	r24, 0x0228
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	80 93 28 02 	sts	0x0228, r24
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<half_period) {}
    23ba:	80 91 2b 02 	lds	r24, 0x022B
    23be:	80 fd       	sbrc	r24, 0
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <SWV_test+0x508>
    23c2:	80 91 20 08 	lds	r24, 0x0820
    23c6:	90 91 21 08 	lds	r25, 0x0821
    23ca:	8c 15       	cp	r24, r12
    23cc:	9d 05       	cpc	r25, r13
    23ce:	a8 f3       	brcs	.-22     	; 0x23ba <SWV_test+0x4f2>
		
		//get end point
		result_buffer[j] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    23d0:	88 e2       	ldi	r24, 0x28	; 40
    23d2:	92 e0       	ldi	r25, 0x02	; 2
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
		j++;
    23da:	98 01       	movw	r18, r16
    23dc:	2f 5f       	subi	r18, 0xFF	; 255
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
		if(j==SWV_BUFFER_SIZE)
    23e0:	20 31       	cpi	r18, 0x10	; 16
    23e2:	31 05       	cpc	r19, r1
    23e4:	11 f4       	brne	.+4      	; 0x23ea <SWV_test+0x522>
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
	while(TIMER.CNT<half_period) {
		ADC_Ch_Conversion_Start(&ADCA.CH1);
		while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<half_period) {}
		
		//get end point
		result_buffer[j] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    23ea:	00 0f       	add	r16, r16
    23ec:	11 1f       	adc	r17, r17
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	4c 0f       	add	r20, r28
    23f4:	5d 1f       	adc	r21, r29
    23f6:	04 0f       	add	r16, r20
    23f8:	15 1f       	adc	r17, r21
    23fa:	f8 01       	movw	r30, r16
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	89 01       	movw	r16, r18

	//calculate next DAC value
	current -= (height_DAC-increment_DAC);

	//ADC measurements
	while(TIMER.CNT<half_period) {
    2402:	80 91 20 08 	lds	r24, 0x0820
    2406:	90 91 21 08 	lds	r25, 0x0821
    240a:	8c 15       	cp	r24, r12
    240c:	9d 05       	cpc	r25, r13
    240e:	80 f2       	brcs	.-96     	; 0x23b0 <SWV_test+0x4e8>
			}	
		#endif
				
	}

	reverseCurrent[i] = 0;
    2410:	cf 50       	subi	r28, 0x0F	; 15
    2412:	d8 4f       	sbci	r29, 0xF8	; 248
    2414:	e8 81       	ld	r30, Y
    2416:	f9 81       	ldd	r31, Y+1	; 0x01
    2418:	c1 5f       	subi	r28, 0xF1	; 241
    241a:	d7 40       	sbci	r29, 0x07	; 7
    241c:	10 82       	st	Z, r1
    241e:	11 82       	std	Z+1, r1	; 0x01
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
	for(k = 0; k < 16; k++)
		reverseCurrent[i] += result_buffer[k];
    2424:	f5 01       	movw	r30, r10
    2426:	81 91       	ld	r24, Z+
    2428:	91 91       	ld	r25, Z+
    242a:	5f 01       	movw	r10, r30
    242c:	28 0f       	add	r18, r24
    242e:	39 1f       	adc	r19, r25
		#endif
				
	}

	reverseCurrent[i] = 0;
	for(k = 0; k < 16; k++)
    2430:	ee 15       	cp	r30, r14
    2432:	ff 05       	cpc	r31, r15
    2434:	b9 f7       	brne	.-18     	; 0x2424 <SWV_test+0x55c>
    2436:	cf 50       	subi	r28, 0x0F	; 15
    2438:	d8 4f       	sbci	r29, 0xF8	; 248
    243a:	e8 81       	ld	r30, Y
    243c:	f9 81       	ldd	r31, Y+1	; 0x01
    243e:	c1 5f       	subi	r28, 0xF1	; 241
    2440:	d7 40       	sbci	r29, 0x07	; 7
    2442:	21 93       	st	Z+, r18
    2444:	31 93       	st	Z+, r19
    2446:	cf 50       	subi	r28, 0x0F	; 15
    2448:	d8 4f       	sbci	r29, 0xF8	; 248
    244a:	e8 83       	st	Y, r30
    244c:	f9 83       	std	Y+1, r31	; 0x01
    244e:	c1 5f       	subi	r28, 0xF1	; 241
    2450:	d7 40       	sbci	r29, 0x07	; 7
    2452:	68 0c       	add	r6, r8
    2454:	79 1c       	adc	r7, r9
		reverseCurrent[i] += result_buffer[k];
	
	i++;
    2456:	c6 50       	subi	r28, 0x06	; 6
    2458:	d8 4f       	sbci	r29, 0xF8	; 248
    245a:	28 81       	ld	r18, Y
    245c:	39 81       	ldd	r19, Y+1	; 0x01
    245e:	ca 5f       	subi	r28, 0xFA	; 250
    2460:	d7 40       	sbci	r29, 0x07	; 7
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	c6 50       	subi	r28, 0x06	; 6
    2468:	d8 4f       	sbci	r29, 0xF8	; 248
    246a:	28 83       	st	Y, r18
    246c:	39 83       	std	Y+1, r19	; 0x01
    246e:	ca 5f       	subi	r28, 0xFA	; 250
    2470:	d7 40       	sbci	r29, 0x07	; 7
    2472:	48 0c       	add	r4, r8
    2474:	59 1c       	adc	r5, r9
    2476:	42 e0       	ldi	r20, 0x02	; 2
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	24 0e       	add	r2, r20
    247c:	35 1e       	adc	r3, r21
    247e:	0e cf       	rjmp	.-484    	; 0x229c <SWV_test+0x3d4>
}

	PORTE.OUTSET = PIN0_bm; //switch1
    2480:	e0 e8       	ldi	r30, 0x80	; 128
    2482:	f6 e0       	ldi	r31, 0x06	; 6
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	85 83       	std	Z+5, r24	; 0x05
	//PORTE.OUTCLR = PIN0_bm; //switch1
	PORTE.OUTCLR = PIN1_bm; //switch0
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    2490:	88 e0       	ldi	r24, 0x08	; 8
    2492:	86 83       	std	Z+6, r24	; 0x06
	current = 2048;
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	93 e0       	ldi	r25, 0x03	; 3
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    249e:	88 23       	and	r24, r24
    24a0:	c9 f3       	breq	.-14     	; 0x2494 <SWV_test+0x5cc>
		DAC_Channel_Write(&DACB,current,CH0);
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	93 e0       	ldi	r25, 0x03	; 3
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	78 e0       	ldi	r23, 0x08	; 8
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	//start output to USB
	#ifndef DEBUG

		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    24b0:	80 91 a1 08 	lds	r24, 0x08A1
    24b4:	85 ff       	sbrs	r24, 5
    24b6:	fc cf       	rjmp	.-8      	; 0x24b0 <SWV_test+0x5e8>
		USART_PutChar(&USARTC0, SWV);
    24b8:	10 92 a0 08 	sts	0x08A0, r1
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
		for(j = 0; j < 15; j++)
		{
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    24c0:	80 91 a1 08 	lds	r24, 0x08A1
    24c4:	85 ff       	sbrs	r24, 5
    24c6:	fc cf       	rjmp	.-8      	; 0x24c0 <SWV_test+0x5f8>
			USART_PutChar(&USARTC0, name[j]);
    24c8:	c4 50       	subi	r28, 0x04	; 4
    24ca:	d8 4f       	sbci	r29, 0xF8	; 248
    24cc:	e8 81       	ld	r30, Y
    24ce:	f9 81       	ldd	r31, Y+1	; 0x01
    24d0:	cc 5f       	subi	r28, 0xFC	; 252
    24d2:	d7 40       	sbci	r29, 0x07	; 7
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	80 93 a0 08 	sts	0x08A0, r24
	//start output to USB
	#ifndef DEBUG

		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, SWV);
		for(j = 0; j < 15; j++)
    24de:	2f 5f       	subi	r18, 0xFF	; 255
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	2f 30       	cpi	r18, 0x0F	; 15
    24e4:	31 05       	cpc	r19, r1
    24e6:	61 f7       	brne	.-40     	; 0x24c0 <SWV_test+0x5f8>
		{
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
			USART_PutChar(&USARTC0, name[j]);
		}
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    24e8:	80 91 a1 08 	lds	r24, 0x08A1
    24ec:	85 ff       	sbrs	r24, 5
    24ee:	fc cf       	rjmp	.-8      	; 0x24e8 <SWV_test+0x620>
		USART_PutChar(&USARTC0, freq>>8);
    24f0:	10 92 a0 08 	sts	0x08A0, r1
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    24f4:	80 91 a1 08 	lds	r24, 0x08A1
    24f8:	85 ff       	sbrs	r24, 5
    24fa:	fc cf       	rjmp	.-8      	; 0x24f4 <SWV_test+0x62c>
		USART_PutChar(&USARTC0, freq);
    24fc:	c2 50       	subi	r28, 0x02	; 2
    24fe:	d8 4f       	sbci	r29, 0xF8	; 248
    2500:	58 81       	ld	r21, Y
    2502:	ce 5f       	subi	r28, 0xFE	; 254
    2504:	d7 40       	sbci	r29, 0x07	; 7
    2506:	50 93 a0 08 	sts	0x08A0, r21
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    250a:	80 91 a1 08 	lds	r24, 0x08A1
    250e:	85 ff       	sbrs	r24, 5
    2510:	fc cf       	rjmp	.-8      	; 0x250a <SWV_test+0x642>
		USART_PutChar(&USARTC0, start>>8);
    2512:	c0 50       	subi	r28, 0x00	; 0
    2514:	d8 4f       	sbci	r29, 0xF8	; 248
    2516:	e8 81       	ld	r30, Y
    2518:	f9 81       	ldd	r31, Y+1	; 0x01
    251a:	c0 50       	subi	r28, 0x00	; 0
    251c:	d8 40       	sbci	r29, 0x08	; 8
    251e:	8f 2f       	mov	r24, r31
    2520:	99 27       	eor	r25, r25
    2522:	87 fd       	sbrc	r24, 7
    2524:	9a 95       	dec	r25
    2526:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    252a:	80 91 a1 08 	lds	r24, 0x08A1
    252e:	85 ff       	sbrs	r24, 5
    2530:	fc cf       	rjmp	.-8      	; 0x252a <SWV_test+0x662>
		USART_PutChar(&USARTC0, start);
    2532:	c0 50       	subi	r28, 0x00	; 0
    2534:	d8 4f       	sbci	r29, 0xF8	; 248
    2536:	f8 81       	ld	r31, Y
    2538:	c0 50       	subi	r28, 0x00	; 0
    253a:	d8 40       	sbci	r29, 0x08	; 8
    253c:	f0 93 a0 08 	sts	0x08A0, r31
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2540:	80 91 a1 08 	lds	r24, 0x08A1
    2544:	85 ff       	sbrs	r24, 5
    2546:	fc cf       	rjmp	.-8      	; 0x2540 <SWV_test+0x678>
		USART_PutChar(&USARTC0, stop>>8);
    2548:	ce 5f       	subi	r28, 0xFE	; 254
    254a:	d7 4f       	sbci	r29, 0xF7	; 247
    254c:	28 81       	ld	r18, Y
    254e:	39 81       	ldd	r19, Y+1	; 0x01
    2550:	c2 50       	subi	r28, 0x02	; 2
    2552:	d8 40       	sbci	r29, 0x08	; 8
    2554:	83 2f       	mov	r24, r19
    2556:	99 27       	eor	r25, r25
    2558:	87 fd       	sbrc	r24, 7
    255a:	9a 95       	dec	r25
    255c:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2560:	80 91 a1 08 	lds	r24, 0x08A1
    2564:	85 ff       	sbrs	r24, 5
    2566:	fc cf       	rjmp	.-8      	; 0x2560 <SWV_test+0x698>
		USART_PutChar(&USARTC0, stop);
    2568:	ce 5f       	subi	r28, 0xFE	; 254
    256a:	d7 4f       	sbci	r29, 0xF7	; 247
    256c:	38 81       	ld	r19, Y
    256e:	c2 50       	subi	r28, 0x02	; 2
    2570:	d8 40       	sbci	r29, 0x08	; 8
    2572:	30 93 a0 08 	sts	0x08A0, r19
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2576:	80 91 a1 08 	lds	r24, 0x08A1
    257a:	85 ff       	sbrs	r24, 5
    257c:	fc cf       	rjmp	.-8      	; 0x2576 <SWV_test+0x6ae>
		USART_PutChar(&USARTC0, height>>8);
    257e:	cc 5f       	subi	r28, 0xFC	; 252
    2580:	d7 4f       	sbci	r29, 0xF7	; 247
    2582:	48 81       	ld	r20, Y
    2584:	59 81       	ldd	r21, Y+1	; 0x01
    2586:	c4 50       	subi	r28, 0x04	; 4
    2588:	d8 40       	sbci	r29, 0x08	; 8
    258a:	85 2f       	mov	r24, r21
    258c:	99 27       	eor	r25, r25
    258e:	87 fd       	sbrc	r24, 7
    2590:	9a 95       	dec	r25
    2592:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2596:	80 91 a1 08 	lds	r24, 0x08A1
    259a:	85 ff       	sbrs	r24, 5
    259c:	fc cf       	rjmp	.-8      	; 0x2596 <SWV_test+0x6ce>
		USART_PutChar(&USARTC0, height);
    259e:	cc 5f       	subi	r28, 0xFC	; 252
    25a0:	d7 4f       	sbci	r29, 0xF7	; 247
    25a2:	58 81       	ld	r21, Y
    25a4:	c4 50       	subi	r28, 0x04	; 4
    25a6:	d8 40       	sbci	r29, 0x08	; 8
    25a8:	50 93 a0 08 	sts	0x08A0, r21
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    25ac:	80 91 a1 08 	lds	r24, 0x08A1
    25b0:	85 ff       	sbrs	r24, 5
    25b2:	fc cf       	rjmp	.-8      	; 0x25ac <SWV_test+0x6e4>
		USART_PutChar(&USARTC0, increment>>8);
    25b4:	ca 5f       	subi	r28, 0xFA	; 250
    25b6:	d7 4f       	sbci	r29, 0xF7	; 247
    25b8:	e8 81       	ld	r30, Y
    25ba:	f9 81       	ldd	r31, Y+1	; 0x01
    25bc:	c6 50       	subi	r28, 0x06	; 6
    25be:	d8 40       	sbci	r29, 0x08	; 8
    25c0:	8f 2f       	mov	r24, r31
    25c2:	99 27       	eor	r25, r25
    25c4:	87 fd       	sbrc	r24, 7
    25c6:	9a 95       	dec	r25
    25c8:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    25cc:	80 91 a1 08 	lds	r24, 0x08A1
    25d0:	85 ff       	sbrs	r24, 5
    25d2:	fc cf       	rjmp	.-8      	; 0x25cc <SWV_test+0x704>
		USART_PutChar(&USARTC0, increment);
    25d4:	ca 5f       	subi	r28, 0xFA	; 250
    25d6:	d7 4f       	sbci	r29, 0xF7	; 247
    25d8:	f8 81       	ld	r31, Y
    25da:	c6 50       	subi	r28, 0x06	; 6
    25dc:	d8 40       	sbci	r29, 0x08	; 8
    25de:	f0 93 a0 08 	sts	0x08A0, r31
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    25e2:	80 91 a1 08 	lds	r24, 0x08A1
    25e6:	85 ff       	sbrs	r24, 5
    25e8:	fc cf       	rjmp	.-8      	; 0x25e2 <SWV_test+0x71a>
		USART_PutChar(&USARTC0, curr_range);
    25ea:	c8 5f       	subi	r28, 0xF8	; 248
    25ec:	d7 4f       	sbci	r29, 0xF7	; 247
    25ee:	28 81       	ld	r18, Y
    25f0:	c8 50       	subi	r28, 0x08	; 8
    25f2:	d8 40       	sbci	r29, 0x08	; 8
    25f4:	20 93 a0 08 	sts	0x08A0, r18
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    25f8:	80 91 a1 08 	lds	r24, 0x08A1
    25fc:	85 ff       	sbrs	r24, 5
    25fe:	fc cf       	rjmp	.-8      	; 0x25f8 <SWV_test+0x730>
		USART_PutChar(&USARTC0, i>>8);
    2600:	c5 50       	subi	r28, 0x05	; 5
    2602:	d8 4f       	sbci	r29, 0xF8	; 248
    2604:	38 81       	ld	r19, Y
    2606:	cb 5f       	subi	r28, 0xFB	; 251
    2608:	d7 40       	sbci	r29, 0x07	; 7
    260a:	30 93 a0 08 	sts	0x08A0, r19
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    260e:	80 91 a1 08 	lds	r24, 0x08A1
    2612:	85 ff       	sbrs	r24, 5
    2614:	fc cf       	rjmp	.-8      	; 0x260e <SWV_test+0x746>
		USART_PutChar(&USARTC0, i);
    2616:	c6 50       	subi	r28, 0x06	; 6
    2618:	d8 4f       	sbci	r29, 0xF8	; 248
    261a:	48 81       	ld	r20, Y
    261c:	ca 5f       	subi	r28, 0xFA	; 250
    261e:	d7 40       	sbci	r29, 0x07	; 7
    2620:	40 93 a0 08 	sts	0x08A0, r20

		for(j = 0; j < i; j++)
    2624:	ae 01       	movw	r20, r28
    2626:	47 5f       	subi	r20, 0xF7	; 247
    2628:	5b 4f       	sbci	r21, 0xFB	; 251
    262a:	c6 50       	subi	r28, 0x06	; 6
    262c:	d8 4f       	sbci	r29, 0xF8	; 248
    262e:	88 81       	ld	r24, Y
    2630:	99 81       	ldd	r25, Y+1	; 0x01
    2632:	ca 5f       	subi	r28, 0xFA	; 250
    2634:	d7 40       	sbci	r29, 0x07	; 7
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	48 0f       	add	r20, r24
    263c:	59 1f       	adc	r21, r25
    263e:	4b c0       	rjmp	.+150    	; 0x26d6 <SWV_test+0x80e>
		{
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2640:	80 91 a1 08 	lds	r24, 0x08A1
    2644:	85 ff       	sbrs	r24, 5
    2646:	fc cf       	rjmp	.-8      	; 0x2640 <SWV_test+0x778>
			USART_PutChar(&USARTC0, forwardCurrent[j]>>8);
    2648:	cd 50       	subi	r28, 0x0D	; 13
    264a:	d8 4f       	sbci	r29, 0xF8	; 248
    264c:	e8 81       	ld	r30, Y
    264e:	f9 81       	ldd	r31, Y+1	; 0x01
    2650:	c3 5f       	subi	r28, 0xF3	; 243
    2652:	d7 40       	sbci	r29, 0x07	; 7
    2654:	20 81       	ld	r18, Z
    2656:	31 81       	ldd	r19, Z+1	; 0x01
    2658:	83 2f       	mov	r24, r19
    265a:	99 27       	eor	r25, r25
    265c:	87 fd       	sbrc	r24, 7
    265e:	9a 95       	dec	r25
    2660:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2664:	80 91 a1 08 	lds	r24, 0x08A1
    2668:	85 ff       	sbrs	r24, 5
    266a:	fc cf       	rjmp	.-8      	; 0x2664 <SWV_test+0x79c>
			USART_PutChar(&USARTC0, forwardCurrent[j]);
    266c:	20 93 a0 08 	sts	0x08A0, r18
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2670:	80 91 a1 08 	lds	r24, 0x08A1
    2674:	85 ff       	sbrs	r24, 5
    2676:	fc cf       	rjmp	.-8      	; 0x2670 <SWV_test+0x7a8>
			USART_PutChar(&USARTC0, reverseCurrent[j]>>8);
    2678:	cb 50       	subi	r28, 0x0B	; 11
    267a:	d8 4f       	sbci	r29, 0xF8	; 248
    267c:	e8 81       	ld	r30, Y
    267e:	f9 81       	ldd	r31, Y+1	; 0x01
    2680:	c5 5f       	subi	r28, 0xF5	; 245
    2682:	d7 40       	sbci	r29, 0x07	; 7
    2684:	20 81       	ld	r18, Z
    2686:	31 81       	ldd	r19, Z+1	; 0x01
    2688:	83 2f       	mov	r24, r19
    268a:	99 27       	eor	r25, r25
    268c:	87 fd       	sbrc	r24, 7
    268e:	9a 95       	dec	r25
    2690:	80 93 a0 08 	sts	0x08A0, r24
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2694:	80 91 a1 08 	lds	r24, 0x08A1
    2698:	85 ff       	sbrs	r24, 5
    269a:	fc cf       	rjmp	.-8      	; 0x2694 <SWV_test+0x7cc>
			USART_PutChar(&USARTC0, reverseCurrent[j]);
    269c:	20 93 a0 08 	sts	0x08A0, r18
    26a0:	cb 50       	subi	r28, 0x0B	; 11
    26a2:	d8 4f       	sbci	r29, 0xF8	; 248
    26a4:	28 81       	ld	r18, Y
    26a6:	39 81       	ldd	r19, Y+1	; 0x01
    26a8:	c5 5f       	subi	r28, 0xF5	; 245
    26aa:	d7 40       	sbci	r29, 0x07	; 7
    26ac:	2e 5f       	subi	r18, 0xFE	; 254
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	cb 50       	subi	r28, 0x0B	; 11
    26b2:	d8 4f       	sbci	r29, 0xF8	; 248
    26b4:	28 83       	st	Y, r18
    26b6:	39 83       	std	Y+1, r19	; 0x01
    26b8:	c5 5f       	subi	r28, 0xF5	; 245
    26ba:	d7 40       	sbci	r29, 0x07	; 7
    26bc:	cd 50       	subi	r28, 0x0D	; 13
    26be:	d8 4f       	sbci	r29, 0xF8	; 248
    26c0:	88 81       	ld	r24, Y
    26c2:	99 81       	ldd	r25, Y+1	; 0x01
    26c4:	c3 5f       	subi	r28, 0xF3	; 243
    26c6:	d7 40       	sbci	r29, 0x07	; 7
    26c8:	02 96       	adiw	r24, 0x02	; 2
    26ca:	cd 50       	subi	r28, 0x0D	; 13
    26cc:	d8 4f       	sbci	r29, 0xF8	; 248
    26ce:	88 83       	st	Y, r24
    26d0:	99 83       	std	Y+1, r25	; 0x01
    26d2:	c3 5f       	subi	r28, 0xF3	; 243
    26d4:	d7 40       	sbci	r29, 0x07	; 7
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, i>>8);
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, i);

		for(j = 0; j < i; j++)
    26d6:	cb 50       	subi	r28, 0x0B	; 11
    26d8:	d8 4f       	sbci	r29, 0xF8	; 248
    26da:	e8 81       	ld	r30, Y
    26dc:	f9 81       	ldd	r31, Y+1	; 0x01
    26de:	c5 5f       	subi	r28, 0xF5	; 245
    26e0:	d7 40       	sbci	r29, 0x07	; 7
    26e2:	e4 17       	cp	r30, r20
    26e4:	f5 07       	cpc	r31, r21
    26e6:	09 f0       	breq	.+2      	; 0x26ea <SWV_test+0x822>
    26e8:	ab cf       	rjmp	.-170    	; 0x2640 <SWV_test+0x778>
			USART_PutChar(&USARTC0, reverseCurrent[j]>>8);
			do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
			USART_PutChar(&USARTC0, reverseCurrent[j]);
		}

		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    26ea:	80 91 a1 08 	lds	r24, 0x08A1
    26ee:	85 ff       	sbrs	r24, 5
    26f0:	fc cf       	rjmp	.-8      	; 0x26ea <SWV_test+0x822>
			USART_PutChar(&USARTC0,SWV);
    26f2:	10 92 a0 08 	sts	0x08A0, r1
			USART_PutChar(&USARTC0, ADC_waveform[j]);
		}

	#endif

	return i;
    26f6:	c6 50       	subi	r28, 0x06	; 6
    26f8:	d8 4f       	sbci	r29, 0xF8	; 248
    26fa:	28 81       	ld	r18, Y
    26fc:	39 81       	ldd	r19, Y+1	; 0x01
    26fe:	ca 5f       	subi	r28, 0xFA	; 250
    2700:	d7 40       	sbci	r29, 0x07	; 7
}
    2702:	c9 01       	movw	r24, r18
    2704:	c6 5f       	subi	r28, 0xF6	; 246
    2706:	d7 4f       	sbci	r29, 0xF7	; 247
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	3f 90       	pop	r3
    272e:	2f 90       	pop	r2
    2730:	08 95       	ret

00002732 <CA_test>:
		DAC_Channel_Write(&DACB,current_DAC,CH0);

	return elapsed;
}

int16_t CA_test (char* name, int16_t wait_time, int16_t step_voltage, int16_t step_width, int16_t quiet_time, int16_t sample_rate, uint8_t steps, uint8_t curr_range) {
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	69 97       	sbiw	r28, 0x19	; 25
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	8a 87       	std	Y+10, r24	; 0x0a
    2762:	9b 87       	std	Y+11, r25	; 0x0b
    2764:	6c 87       	std	Y+12, r22	; 0x0c
    2766:	7d 87       	std	Y+13, r23	; 0x0d
    2768:	4e 87       	std	Y+14, r20	; 0x0e
    276a:	5f 87       	std	Y+15, r21	; 0x0f
    276c:	28 8b       	std	Y+16, r18	; 0x10
    276e:	39 8b       	std	Y+17, r19	; 0x11
    2770:	0a 8b       	std	Y+18, r16	; 0x12
    2772:	1b 8b       	std	Y+19, r17	; 0x13
    2774:	ec 8a       	std	Y+20, r14	; 0x14
    2776:	fd 8a       	std	Y+21, r15	; 0x15
    2778:	ce 8a       	std	Y+22, r12	; 0x16
    277a:	af 8a       	std	Y+23, r10	; 0x17
		USART_PutChar(&USARTC0,CA);


	return i;

}
    277c:	2d b7       	in	r18, 0x3d	; 61
    277e:	3e b7       	in	r19, 0x3e	; 62
    2780:	28 8f       	std	Y+24, r18	; 0x18
    2782:	39 8f       	std	Y+25, r19	; 0x19
	uint16_t j,k;
	uint16_t length;

	char temp_string[16];

	waitTicks = (uint16_t) round(wait_time * 0.001 * sample_rate);
    2784:	57 01       	movw	r10, r14
    2786:	cc 24       	eor	r12, r12
    2788:	b7 fc       	sbrc	r11, 7
    278a:	c0 94       	com	r12
    278c:	dc 2c       	mov	r13, r12
    278e:	c6 01       	movw	r24, r12
    2790:	b5 01       	movw	r22, r10
    2792:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2796:	7b 01       	movw	r14, r22
    2798:	8c 01       	movw	r16, r24
    279a:	ec 85       	ldd	r30, Y+12	; 0x0c
    279c:	fd 85       	ldd	r31, Y+13	; 0x0d
    279e:	bf 01       	movw	r22, r30
    27a0:	88 27       	eor	r24, r24
    27a2:	77 fd       	sbrc	r23, 7
    27a4:	80 95       	com	r24
    27a6:	98 2f       	mov	r25, r24
    27a8:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    27ac:	2f e6       	ldi	r18, 0x6F	; 111
    27ae:	32 e1       	ldi	r19, 0x12	; 18
    27b0:	43 e8       	ldi	r20, 0x83	; 131
    27b2:	5a e3       	ldi	r21, 0x3A	; 58
    27b4:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    27b8:	a8 01       	movw	r20, r16
    27ba:	97 01       	movw	r18, r14
    27bc:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    27c0:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    27c4:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    27c8:	68 87       	std	Y+8, r22	; 0x08
    27ca:	79 87       	std	Y+9, r23	; 0x09
	stepTicks = (uint16_t) round(step_width * 0.001 * sample_rate);
    27cc:	28 89       	ldd	r18, Y+16	; 0x10
    27ce:	39 89       	ldd	r19, Y+17	; 0x11
    27d0:	b9 01       	movw	r22, r18
    27d2:	88 27       	eor	r24, r24
    27d4:	77 fd       	sbrc	r23, 7
    27d6:	80 95       	com	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    27de:	2f e6       	ldi	r18, 0x6F	; 111
    27e0:	32 e1       	ldi	r19, 0x12	; 18
    27e2:	43 e8       	ldi	r20, 0x83	; 131
    27e4:	5a e3       	ldi	r21, 0x3A	; 58
    27e6:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    27ea:	a8 01       	movw	r20, r16
    27ec:	97 01       	movw	r18, r14
    27ee:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    27f2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    27f6:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    27fa:	6e 83       	std	Y+6, r22	; 0x06
    27fc:	7f 83       	std	Y+7, r23	; 0x07
	quietTicks = (uint16_t) round(quiet_time * 0.001 * sample_rate);
    27fe:	ea 89       	ldd	r30, Y+18	; 0x12
    2800:	fb 89       	ldd	r31, Y+19	; 0x13
    2802:	bf 01       	movw	r22, r30
    2804:	88 27       	eor	r24, r24
    2806:	77 fd       	sbrc	r23, 7
    2808:	80 95       	com	r24
    280a:	98 2f       	mov	r25, r24
    280c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2810:	2f e6       	ldi	r18, 0x6F	; 111
    2812:	32 e1       	ldi	r19, 0x12	; 18
    2814:	43 e8       	ldi	r20, 0x83	; 131
    2816:	5a e3       	ldi	r21, 0x3A	; 58
    2818:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    281c:	a8 01       	movw	r20, r16
    281e:	97 01       	movw	r18, r14
    2820:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    2824:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2828:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    282c:	6c 83       	std	Y+4, r22	; 0x04
    282e:	7d 83       	std	Y+5, r23	; 0x05

	length = steps*(waitTicks + stepTicks + quietTicks);
    2830:	8e 80       	ldd	r8, Y+6	; 0x06
    2832:	9f 80       	ldd	r9, Y+7	; 0x07
    2834:	28 85       	ldd	r18, Y+8	; 0x08
    2836:	39 85       	ldd	r19, Y+9	; 0x09
    2838:	82 0e       	add	r8, r18
    283a:	93 1e       	adc	r9, r19
    283c:	3b 01       	movw	r6, r22
    283e:	68 0c       	add	r6, r8
    2840:	79 1c       	adc	r7, r9
    2842:	3e 89       	ldd	r19, Y+22	; 0x16
    2844:	83 2f       	mov	r24, r19
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	86 9d       	mul	r24, r6
    284a:	20 01       	movw	r4, r0
    284c:	87 9d       	mul	r24, r7
    284e:	50 0c       	add	r5, r0
    2850:	96 9d       	mul	r25, r6
    2852:	50 0c       	add	r5, r0
    2854:	11 24       	eor	r1, r1

	

	if(length > CA_MAX_DATAPOINTS)
    2856:	8d ed       	ldi	r24, 0xDD	; 221
    2858:	48 16       	cp	r4, r24
    285a:	85 e0       	ldi	r24, 0x05	; 5
    285c:	58 06       	cpc	r5, r24
    285e:	60 f0       	brcs	.+24     	; 0x2878 <CA_test+0x146>
	{
		
		
		lcdClear();
    2860:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
		lcdHome();
    2864:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
		lcdPrintData("too many data points",14);
    2868:	8f e0       	ldi	r24, 0x0F	; 15
    286a:	90 e2       	ldi	r25, 0x20	; 32
    286c:	6e e0       	ldi	r22, 0x0E	; 14
    286e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    2872:	2f ef       	ldi	r18, 0xFF	; 255
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	f8 c1       	rjmp	.+1008   	; 0x2c68 <CA_test+0x536>


		return -1;
	}

	uint16_t results[length];
    2878:	c2 01       	movw	r24, r4
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	ed b7       	in	r30, 0x3d	; 61
    2880:	fe b7       	in	r31, 0x3e	; 62
    2882:	e8 1b       	sub	r30, r24
    2884:	f9 0b       	sbc	r31, r25
    2886:	ed bf       	out	0x3d, r30	; 61
    2888:	fe bf       	out	0x3e, r31	; 62
    288a:	2d b6       	in	r2, 0x3d	; 61
    288c:	3e b6       	in	r3, 0x3e	; 62
    288e:	08 94       	sec
    2890:	21 1c       	adc	r2, r1
    2892:	31 1c       	adc	r3, r1

	step_DAC = (int16_t) (round(step_voltage*(4096.0/3300))+2048);  
    2894:	2e 85       	ldd	r18, Y+14	; 0x0e
    2896:	3f 85       	ldd	r19, Y+15	; 0x0f
    2898:	b9 01       	movw	r22, r18
    289a:	88 27       	eor	r24, r24
    289c:	77 fd       	sbrc	r23, 7
    289e:	80 95       	com	r24
    28a0:	98 2f       	mov	r25, r24
    28a2:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    28a6:	2a e0       	ldi	r18, 0x0A	; 10
    28a8:	30 ee       	ldi	r19, 0xE0	; 224
    28aa:	4e e9       	ldi	r20, 0x9E	; 158
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    28b2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	55 e4       	ldi	r21, 0x45	; 69
    28be:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    28c2:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    28c6:	6a 83       	std	Y+2, r22	; 0x02
    28c8:	7b 83       	std	Y+3, r23	; 0x03

	//init timer
	timer = (uint16_t) round(500000/sample_rate);
    28ca:	60 e2       	ldi	r22, 0x20	; 32
    28cc:	71 ea       	ldi	r23, 0xA1	; 161
    28ce:	87 e0       	ldi	r24, 0x07	; 7
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a6 01       	movw	r20, r12
    28d4:	95 01       	movw	r18, r10
    28d6:	0e 94 07 30 	call	0x600e	; 0x600e <__divmodsi4>
    28da:	ca 01       	movw	r24, r20
    28dc:	b9 01       	movw	r22, r18
    28de:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    28e2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    28e6:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <__fixunssfsi>
    28ea:	6b 01       	movw	r12, r22
	TIMER.CTRLA = TC_CLKSEL_DIV4_gc;
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	80 93 00 08 	sts	0x0800, r24

	//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    28f2:	e0 e8       	ldi	r30, 0x80	; 128
    28f4:	f6 e0       	ldi	r31, 0x06	; 6
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    28fa:	84 e0       	ldi	r24, 0x04	; 4
    28fc:	85 83       	std	Z+5, r24	; 0x05
	if(curr_range == RANGE_10UA)
    28fe:	3f 89       	ldd	r19, Y+23	; 0x17
    2900:	31 30       	cpi	r19, 0x01	; 1
    2902:	19 f4       	brne	.+6      	; 0x290a <CA_test+0x1d8>
		PORTE.OUTCLR = PIN3_bm; //switch3
    2904:	88 e0       	ldi	r24, 0x08	; 8
    2906:	86 83       	std	Z+6, r24	; 0x06
    2908:	02 c0       	rjmp	.+4      	; 0x290e <CA_test+0x1dc>
	else
		PORTE.OUTSET = PIN3_bm; //switch3
    290a:	88 e0       	ldi	r24, 0x08	; 8
    290c:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTCLR = PIN0_bm; //switch1
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	e0 e8       	ldi	r30, 0x80	; 128
    2912:	f6 e0       	ldi	r31, 0x06	; 6
    2914:	86 83       	std	Z+6, r24	; 0x06

	//apply voltage
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    2916:	80 e2       	ldi	r24, 0x20	; 32
    2918:	93 e0       	ldi	r25, 0x03	; 3
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    2920:	88 23       	and	r24, r24
    2922:	c9 f3       	breq	.-14     	; 0x2916 <CA_test+0x1e4>
		DAC_Channel_Write(&DACB,2048,CH0);
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	78 e0       	ldi	r23, 0x08	; 8
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    2932:	19 82       	std	Y+1, r1	; 0x01
    2934:	aa 24       	eor	r10, r10
    2936:	bb 24       	eor	r11, r11
    2938:	bf c0       	rjmp	.+382    	; 0x2ab8 <CA_test+0x386>

	k = 0;
	for(i = 0; i < steps; i++) {
		for(j = 0; j < waitTicks; j++) {
			TIMER.CNT = 0;
    293a:	10 92 20 08 	sts	0x0820, r1
    293e:	10 92 21 08 	sts	0x0821, r1
    2942:	18 c0       	rjmp	.+48     	; 0x2974 <CA_test+0x242>
			while(TIMER.CNT<timer) {
				ADC_Ch_Conversion_Start(&ADCA.CH1);
    2944:	80 91 28 02 	lds	r24, 0x0228
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	80 93 28 02 	sts	0x0228, r24
				while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<timer) {}
    294e:	80 91 2b 02 	lds	r24, 0x022B
    2952:	80 fd       	sbrc	r24, 0
    2954:	07 c0       	rjmp	.+14     	; 0x2964 <CA_test+0x232>
    2956:	80 91 20 08 	lds	r24, 0x0820
    295a:	90 91 21 08 	lds	r25, 0x0821
    295e:	8c 15       	cp	r24, r12
    2960:	9d 05       	cpc	r25, r13
    2962:	a8 f3       	brcs	.-22     	; 0x294e <CA_test+0x21c>
					results[k] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    2964:	88 e2       	ldi	r24, 0x28	; 40
    2966:	92 e0       	ldi	r25, 0x02	; 2
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01

	k = 0;
	for(i = 0; i < steps; i++) {
		for(j = 0; j < waitTicks; j++) {
			TIMER.CNT = 0;
			while(TIMER.CNT<timer) {
    2974:	80 91 20 08 	lds	r24, 0x0820
    2978:	90 91 21 08 	lds	r25, 0x0821
    297c:	8c 15       	cp	r24, r12
    297e:	9d 05       	cpc	r25, r13
    2980:	08 f3       	brcs	.-62     	; 0x2944 <CA_test+0x212>
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
		DAC_Channel_Write(&DACB,2048,CH0);

	k = 0;
	for(i = 0; i < steps; i++) {
		for(j = 0; j < waitTicks; j++) {
    2982:	08 94       	sec
    2984:	e1 1c       	adc	r14, r1
    2986:	f1 1c       	adc	r15, r1
    2988:	0e 5f       	subi	r16, 0xFE	; 254
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	28 85       	ldd	r18, Y+8	; 0x08
    298e:	39 85       	ldd	r19, Y+9	; 0x09
    2990:	e2 16       	cp	r14, r18
    2992:	f3 06       	cpc	r15, r19
    2994:	90 f2       	brcs	.-92     	; 0x293a <CA_test+0x208>
    2996:	89 01       	movw	r16, r18
    2998:	0a 0d       	add	r16, r10
    299a:	1b 1d       	adc	r17, r11
					results[k] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
			}
			k++;
			
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    299c:	80 e2       	ldi	r24, 0x20	; 32
    299e:	93 e0       	ldi	r25, 0x03	; 3
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    29a6:	88 23       	and	r24, r24
    29a8:	c9 f3       	breq	.-14     	; 0x299c <CA_test+0x26a>
			DAC_Channel_Write(&DACB,step_DAC,CH0);
    29aa:	80 e2       	ldi	r24, 0x20	; 32
    29ac:	93 e0       	ldi	r25, 0x03	; 3
    29ae:	6a 81       	ldd	r22, Y+2	; 0x02
    29b0:	7b 81       	ldd	r23, Y+3	; 0x03
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    29b8:	00 0f       	add	r16, r16
    29ba:	11 1f       	adc	r17, r17
    29bc:	02 0d       	add	r16, r2
    29be:	13 1d       	adc	r17, r3
    29c0:	ee 24       	eor	r14, r14
    29c2:	ff 24       	eor	r15, r15
    29c4:	29 c0       	rjmp	.+82     	; 0x2a18 <CA_test+0x2e6>
		for(j = 0; j < stepTicks; j++) {
			TIMER.CNT = 0;
    29c6:	10 92 20 08 	sts	0x0820, r1
    29ca:	10 92 21 08 	sts	0x0821, r1
    29ce:	18 c0       	rjmp	.+48     	; 0x2a00 <CA_test+0x2ce>
			while(TIMER.CNT<timer) {
				ADC_Ch_Conversion_Start(&ADCA.CH1);
    29d0:	80 91 28 02 	lds	r24, 0x0228
    29d4:	80 68       	ori	r24, 0x80	; 128
    29d6:	80 93 28 02 	sts	0x0228, r24
				while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<timer) {}
    29da:	80 91 2b 02 	lds	r24, 0x022B
    29de:	80 fd       	sbrc	r24, 0
    29e0:	07 c0       	rjmp	.+14     	; 0x29f0 <CA_test+0x2be>
    29e2:	80 91 20 08 	lds	r24, 0x0820
    29e6:	90 91 21 08 	lds	r25, 0x0821
    29ea:	8c 15       	cp	r24, r12
    29ec:	9d 05       	cpc	r25, r13
    29ee:	a8 f3       	brcs	.-22     	; 0x29da <CA_test+0x2a8>
					results[k] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    29f0:	88 e2       	ldi	r24, 0x28	; 40
    29f2:	92 e0       	ldi	r25, 0x02	; 2
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
			DAC_Channel_Write(&DACB,step_DAC,CH0);
		for(j = 0; j < stepTicks; j++) {
			TIMER.CNT = 0;
			while(TIMER.CNT<timer) {
    2a00:	80 91 20 08 	lds	r24, 0x0820
    2a04:	90 91 21 08 	lds	r25, 0x0821
    2a08:	8c 15       	cp	r24, r12
    2a0a:	9d 05       	cpc	r25, r13
    2a0c:	08 f3       	brcs	.-62     	; 0x29d0 <CA_test+0x29e>
			k++;
			
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
			DAC_Channel_Write(&DACB,step_DAC,CH0);
		for(j = 0; j < stepTicks; j++) {
    2a0e:	08 94       	sec
    2a10:	e1 1c       	adc	r14, r1
    2a12:	f1 1c       	adc	r15, r1
    2a14:	0e 5f       	subi	r16, 0xFE	; 254
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	2e 81       	ldd	r18, Y+6	; 0x06
    2a1a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a1c:	e2 16       	cp	r14, r18
    2a1e:	f3 06       	cpc	r15, r19
    2a20:	90 f2       	brcs	.-92     	; 0x29c6 <CA_test+0x294>
				while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<timer) {}
					results[k] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
			}
			k++;
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    2a22:	80 e2       	ldi	r24, 0x20	; 32
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    2a2c:	88 23       	and	r24, r24
    2a2e:	c9 f3       	breq	.-14     	; 0x2a22 <CA_test+0x2f0>
			DAC_Channel_Write(&DACB,2048,CH0);
    2a30:	80 e2       	ldi	r24, 0x20	; 32
    2a32:	93 e0       	ldi	r25, 0x03	; 3
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	78 e0       	ldi	r23, 0x08	; 8
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    2a3e:	84 01       	movw	r16, r8
    2a40:	00 0f       	add	r16, r16
    2a42:	11 1f       	adc	r17, r17
    2a44:	02 0d       	add	r16, r2
    2a46:	13 1d       	adc	r17, r3
    2a48:	ee 24       	eor	r14, r14
    2a4a:	ff 24       	eor	r15, r15
    2a4c:	29 c0       	rjmp	.+82     	; 0x2aa0 <CA_test+0x36e>
		for(j = 0; j < quietTicks; j++) {
			TIMER.CNT = 0;
    2a4e:	10 92 20 08 	sts	0x0820, r1
    2a52:	10 92 21 08 	sts	0x0821, r1
    2a56:	18 c0       	rjmp	.+48     	; 0x2a88 <CA_test+0x356>
			while(TIMER.CNT<timer) {
				ADC_Ch_Conversion_Start(&ADCA.CH1);
    2a58:	80 91 28 02 	lds	r24, 0x0228
    2a5c:	80 68       	ori	r24, 0x80	; 128
    2a5e:	80 93 28 02 	sts	0x0228, r24
				while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<timer) {}
    2a62:	80 91 2b 02 	lds	r24, 0x022B
    2a66:	80 fd       	sbrc	r24, 0
    2a68:	07 c0       	rjmp	.+14     	; 0x2a78 <CA_test+0x346>
    2a6a:	80 91 20 08 	lds	r24, 0x0820
    2a6e:	90 91 21 08 	lds	r25, 0x0821
    2a72:	8c 15       	cp	r24, r12
    2a74:	9d 05       	cpc	r25, r13
    2a76:	a8 f3       	brcs	.-22     	; 0x2a62 <CA_test+0x330>
					results[k] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    2a78:	88 e2       	ldi	r24, 0x28	; 40
    2a7a:	92 e0       	ldi	r25, 0x02	; 2
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    2a82:	f8 01       	movw	r30, r16
    2a84:	80 83       	st	Z, r24
    2a86:	91 83       	std	Z+1, r25	; 0x01
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
			DAC_Channel_Write(&DACB,2048,CH0);
		for(j = 0; j < quietTicks; j++) {
			TIMER.CNT = 0;
			while(TIMER.CNT<timer) {
    2a88:	80 91 20 08 	lds	r24, 0x0820
    2a8c:	90 91 21 08 	lds	r25, 0x0821
    2a90:	8c 15       	cp	r24, r12
    2a92:	9d 05       	cpc	r25, r13
    2a94:	08 f3       	brcs	.-62     	; 0x2a58 <CA_test+0x326>
			}
			k++;
		}
		while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
			DAC_Channel_Write(&DACB,2048,CH0);
		for(j = 0; j < quietTicks; j++) {
    2a96:	08 94       	sec
    2a98:	e1 1c       	adc	r14, r1
    2a9a:	f1 1c       	adc	r15, r1
    2a9c:	0e 5f       	subi	r16, 0xFE	; 254
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa4:	e2 16       	cp	r14, r18
    2aa6:	f3 06       	cpc	r15, r19
    2aa8:	90 f2       	brcs	.-92     	; 0x2a4e <CA_test+0x31c>
    2aaa:	a6 0c       	add	r10, r6
    2aac:	b7 1c       	adc	r11, r7
	//apply voltage
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
		DAC_Channel_Write(&DACB,2048,CH0);

	k = 0;
	for(i = 0; i < steps; i++) {
    2aae:	39 81       	ldd	r19, Y+1	; 0x01
    2ab0:	3f 5f       	subi	r19, 0xFF	; 255
    2ab2:	39 83       	std	Y+1, r19	; 0x01
    2ab4:	86 0c       	add	r8, r6
    2ab6:	97 1c       	adc	r9, r7
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9e 89       	ldd	r25, Y+22	; 0x16
    2abc:	89 17       	cp	r24, r25
    2abe:	40 f4       	brcc	.+16     	; 0x2ad0 <CA_test+0x39e>
    2ac0:	85 01       	movw	r16, r10
    2ac2:	00 0f       	add	r16, r16
    2ac4:	11 1f       	adc	r17, r17
    2ac6:	02 0d       	add	r16, r2
    2ac8:	13 1d       	adc	r17, r3
    2aca:	ee 24       	eor	r14, r14
    2acc:	ff 24       	eor	r15, r15
    2ace:	5e cf       	rjmp	.-324    	; 0x298c <CA_test+0x25a>
			k++;
		}
	}
	
	
	PORTE.OUTSET = PIN0_bm; //switch1
    2ad0:	e0 e8       	ldi	r30, 0x80	; 128
    2ad2:	f6 e0       	ldi	r31, 0x06	; 6
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTCLR = PIN1_bm; //switch0
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    2ae0:	88 e0       	ldi	r24, 0x08	; 8
    2ae2:	86 83       	std	Z+6, r24	; 0x06

	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    2ae4:	80 e2       	ldi	r24, 0x20	; 32
    2ae6:	93 e0       	ldi	r25, 0x03	; 3
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    2aee:	88 23       	and	r24, r24
    2af0:	c9 f3       	breq	.-14     	; 0x2ae4 <CA_test+0x3b2>
			DAC_Channel_Write(&DACB,2048,CH0);
    2af2:	80 e2       	ldi	r24, 0x20	; 32
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	78 e0       	ldi	r23, 0x08	; 8
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b00:	80 91 a1 08 	lds	r24, 0x08A1
    2b04:	85 ff       	sbrs	r24, 5
    2b06:	fc cf       	rjmp	.-8      	; 0x2b00 <CA_test+0x3ce>
	USART_PutChar(&USARTC0, CA);
    2b08:	85 e0       	ldi	r24, 0x05	; 5
    2b0a:	80 93 a0 08 	sts	0x08A0, r24
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
	for(j = 0; j < 15; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b12:	80 91 a1 08 	lds	r24, 0x08A1
    2b16:	85 ff       	sbrs	r24, 5
    2b18:	fc cf       	rjmp	.-8      	; 0x2b12 <CA_test+0x3e0>
		USART_PutChar(&USARTC0, name[j]);
    2b1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
    2b22:	80 81       	ld	r24, Z
    2b24:	80 93 a0 08 	sts	0x08A0, r24
			DAC_Channel_Write(&DACB,2048,CH0);

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, CA);
	for(j = 0; j < 15; j++)
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	2f 30       	cpi	r18, 0x0F	; 15
    2b2e:	31 05       	cpc	r19, r1
    2b30:	81 f7       	brne	.-32     	; 0x2b12 <CA_test+0x3e0>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, name[j]);
	}
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b32:	80 91 a1 08 	lds	r24, 0x08A1
    2b36:	85 ff       	sbrs	r24, 5
    2b38:	fc cf       	rjmp	.-8      	; 0x2b32 <CA_test+0x400>
	USART_PutChar(&USARTC0, wait_time>>8);
    2b3a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b3c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b3e:	8f 2f       	mov	r24, r31
    2b40:	99 27       	eor	r25, r25
    2b42:	87 fd       	sbrc	r24, 7
    2b44:	9a 95       	dec	r25
    2b46:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b4a:	80 91 a1 08 	lds	r24, 0x08A1
    2b4e:	85 ff       	sbrs	r24, 5
    2b50:	fc cf       	rjmp	.-8      	; 0x2b4a <CA_test+0x418>
	USART_PutChar(&USARTC0, wait_time);
    2b52:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b54:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b58:	80 91 a1 08 	lds	r24, 0x08A1
    2b5c:	85 ff       	sbrs	r24, 5
    2b5e:	fc cf       	rjmp	.-8      	; 0x2b58 <CA_test+0x426>
	USART_PutChar(&USARTC0, step_voltage>>8);
    2b60:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b62:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b64:	83 2f       	mov	r24, r19
    2b66:	99 27       	eor	r25, r25
    2b68:	87 fd       	sbrc	r24, 7
    2b6a:	9a 95       	dec	r25
    2b6c:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b70:	80 91 a1 08 	lds	r24, 0x08A1
    2b74:	85 ff       	sbrs	r24, 5
    2b76:	fc cf       	rjmp	.-8      	; 0x2b70 <CA_test+0x43e>
	USART_PutChar(&USARTC0, step_voltage);
    2b78:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b7a:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b7e:	80 91 a1 08 	lds	r24, 0x08A1
    2b82:	85 ff       	sbrs	r24, 5
    2b84:	fc cf       	rjmp	.-8      	; 0x2b7e <CA_test+0x44c>
	USART_PutChar(&USARTC0, step_width>>8);
    2b86:	e8 89       	ldd	r30, Y+16	; 0x10
    2b88:	f9 89       	ldd	r31, Y+17	; 0x11
    2b8a:	8f 2f       	mov	r24, r31
    2b8c:	99 27       	eor	r25, r25
    2b8e:	87 fd       	sbrc	r24, 7
    2b90:	9a 95       	dec	r25
    2b92:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2b96:	80 91 a1 08 	lds	r24, 0x08A1
    2b9a:	85 ff       	sbrs	r24, 5
    2b9c:	fc cf       	rjmp	.-8      	; 0x2b96 <CA_test+0x464>
	USART_PutChar(&USARTC0, step_width);
    2b9e:	f8 89       	ldd	r31, Y+16	; 0x10
    2ba0:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2ba4:	80 91 a1 08 	lds	r24, 0x08A1
    2ba8:	85 ff       	sbrs	r24, 5
    2baa:	fc cf       	rjmp	.-8      	; 0x2ba4 <CA_test+0x472>
	USART_PutChar(&USARTC0, quiet_time>>8);
    2bac:	2a 89       	ldd	r18, Y+18	; 0x12
    2bae:	3b 89       	ldd	r19, Y+19	; 0x13
    2bb0:	83 2f       	mov	r24, r19
    2bb2:	99 27       	eor	r25, r25
    2bb4:	87 fd       	sbrc	r24, 7
    2bb6:	9a 95       	dec	r25
    2bb8:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2bbc:	80 91 a1 08 	lds	r24, 0x08A1
    2bc0:	85 ff       	sbrs	r24, 5
    2bc2:	fc cf       	rjmp	.-8      	; 0x2bbc <CA_test+0x48a>
	USART_PutChar(&USARTC0, quiet_time);
    2bc4:	3a 89       	ldd	r19, Y+18	; 0x12
    2bc6:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2bca:	80 91 a1 08 	lds	r24, 0x08A1
    2bce:	85 ff       	sbrs	r24, 5
    2bd0:	fc cf       	rjmp	.-8      	; 0x2bca <CA_test+0x498>
	USART_PutChar(&USARTC0, sample_rate>>8);
    2bd2:	ec 89       	ldd	r30, Y+20	; 0x14
    2bd4:	fd 89       	ldd	r31, Y+21	; 0x15
    2bd6:	8f 2f       	mov	r24, r31
    2bd8:	99 27       	eor	r25, r25
    2bda:	87 fd       	sbrc	r24, 7
    2bdc:	9a 95       	dec	r25
    2bde:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2be2:	80 91 a1 08 	lds	r24, 0x08A1
    2be6:	85 ff       	sbrs	r24, 5
    2be8:	fc cf       	rjmp	.-8      	; 0x2be2 <CA_test+0x4b0>
	USART_PutChar(&USARTC0, sample_rate);
    2bea:	fc 89       	ldd	r31, Y+20	; 0x14
    2bec:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2bf0:	80 91 a1 08 	lds	r24, 0x08A1
    2bf4:	85 ff       	sbrs	r24, 5
    2bf6:	fc cf       	rjmp	.-8      	; 0x2bf0 <CA_test+0x4be>
	USART_PutChar(&USARTC0, steps);
    2bf8:	2e 89       	ldd	r18, Y+22	; 0x16
    2bfa:	20 93 a0 08 	sts	0x08A0, r18
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2bfe:	80 91 a1 08 	lds	r24, 0x08A1
    2c02:	85 ff       	sbrs	r24, 5
    2c04:	fc cf       	rjmp	.-8      	; 0x2bfe <CA_test+0x4cc>
	USART_PutChar(&USARTC0, curr_range);
    2c06:	3f 89       	ldd	r19, Y+23	; 0x17
    2c08:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2c0c:	80 91 a1 08 	lds	r24, 0x08A1
    2c10:	85 ff       	sbrs	r24, 5
    2c12:	fc cf       	rjmp	.-8      	; 0x2c0c <CA_test+0x4da>
	USART_PutChar(&USARTC0, length>>8);
    2c14:	50 92 a0 08 	sts	0x08A0, r5
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2c18:	80 91 a1 08 	lds	r24, 0x08A1
    2c1c:	85 ff       	sbrs	r24, 5
    2c1e:	fc cf       	rjmp	.-8      	; 0x2c18 <CA_test+0x4e6>
	USART_PutChar(&USARTC0, length);
    2c20:	40 92 a0 08 	sts	0x08A0, r4
    2c24:	f1 01       	movw	r30, r2
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	11 c0       	rjmp	.+34     	; 0x2c4e <CA_test+0x51c>


	for(j = 0; j < length; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2c2c:	80 91 a1 08 	lds	r24, 0x08A1
    2c30:	85 ff       	sbrs	r24, 5
    2c32:	fc cf       	rjmp	.-8      	; 0x2c2c <CA_test+0x4fa>
		USART_PutChar(&USARTC0, results[j]>>8);
    2c34:	90 81       	ld	r25, Z
    2c36:	81 81       	ldd	r24, Z+1	; 0x01
    2c38:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2c3c:	80 91 a1 08 	lds	r24, 0x08A1
    2c40:	85 ff       	sbrs	r24, 5
    2c42:	fc cf       	rjmp	.-8      	; 0x2c3c <CA_test+0x50a>
		USART_PutChar(&USARTC0, results[j]);
    2c44:	90 93 a0 08 	sts	0x08A0, r25
	USART_PutChar(&USARTC0, length>>8);
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, length);


	for(j = 0; j < length; j++)
    2c48:	2f 5f       	subi	r18, 0xFF	; 255
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	32 96       	adiw	r30, 0x02	; 2
    2c4e:	24 15       	cp	r18, r4
    2c50:	35 05       	cpc	r19, r5
    2c52:	60 f3       	brcs	.-40     	; 0x2c2c <CA_test+0x4fa>
		USART_PutChar(&USARTC0, results[j]>>8);
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, results[j]);
	}

	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    2c54:	80 91 a1 08 	lds	r24, 0x08A1
    2c58:	85 ff       	sbrs	r24, 5
    2c5a:	fc cf       	rjmp	.-8      	; 0x2c54 <CA_test+0x522>
		USART_PutChar(&USARTC0,CA);
    2c5c:	85 e0       	ldi	r24, 0x05	; 5
    2c5e:	80 93 a0 08 	sts	0x08A0, r24


	return i;
    2c62:	8e 89       	ldd	r24, Y+22	; 0x16
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0

}
    2c68:	c9 01       	movw	r24, r18
    2c6a:	e8 8d       	ldd	r30, Y+24	; 0x18
    2c6c:	f9 8d       	ldd	r31, Y+25	; 0x19
    2c6e:	ed bf       	out	0x3d, r30	; 61
    2c70:	fe bf       	out	0x3e, r31	; 62
    2c72:	69 96       	adiw	r28, 0x19	; 25
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	bf 90       	pop	r11
    2c8a:	af 90       	pop	r10
    2c8c:	9f 90       	pop	r9
    2c8e:	8f 90       	pop	r8
    2c90:	7f 90       	pop	r7
    2c92:	6f 90       	pop	r6
    2c94:	5f 90       	pop	r5
    2c96:	4f 90       	pop	r4
    2c98:	3f 90       	pop	r3
    2c9a:	2f 90       	pop	r2
    2c9c:	08 95       	ret

00002c9e <ACV_test>:

	return i;
}

int16_t ACV_test (char* name, int16_t freq, int16_t height, int16_t cycles, int16_t start, int16_t stop, int16_t increment, uint8_t curr_range)
{
    2c9e:	2f 92       	push	r2
    2ca0:	3f 92       	push	r3
    2ca2:	4f 92       	push	r4
    2ca4:	5f 92       	push	r5
    2ca6:	6f 92       	push	r6
    2ca8:	7f 92       	push	r7
    2caa:	8f 92       	push	r8
    2cac:	9f 92       	push	r9
    2cae:	af 92       	push	r10
    2cb0:	bf 92       	push	r11
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	cf 5e       	subi	r28, 0xEF	; 239
    2cc8:	d0 40       	sbci	r29, 0x00	; 0
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	cf 52       	subi	r28, 0x2F	; 47
    2cd0:	df 4f       	sbci	r29, 0xFF	; 255
    2cd2:	88 83       	st	Y, r24
    2cd4:	99 83       	std	Y+1, r25	; 0x01
    2cd6:	c1 5d       	subi	r28, 0xD1	; 209
    2cd8:	d0 40       	sbci	r29, 0x00	; 0
    2cda:	cd 52       	subi	r28, 0x2D	; 45
    2cdc:	df 4f       	sbci	r29, 0xFF	; 255
    2cde:	68 83       	st	Y, r22
    2ce0:	79 83       	std	Y+1, r23	; 0x01
    2ce2:	c3 5d       	subi	r28, 0xD3	; 211
    2ce4:	d0 40       	sbci	r29, 0x00	; 0
    2ce6:	cb 52       	subi	r28, 0x2B	; 43
    2ce8:	df 4f       	sbci	r29, 0xFF	; 255
    2cea:	48 83       	st	Y, r20
    2cec:	59 83       	std	Y+1, r21	; 0x01
    2cee:	c5 5d       	subi	r28, 0xD5	; 213
    2cf0:	d0 40       	sbci	r29, 0x00	; 0
    2cf2:	c9 52       	subi	r28, 0x29	; 41
    2cf4:	df 4f       	sbci	r29, 0xFF	; 255
    2cf6:	28 83       	st	Y, r18
    2cf8:	39 83       	std	Y+1, r19	; 0x01
    2cfa:	c7 5d       	subi	r28, 0xD7	; 215
    2cfc:	d0 40       	sbci	r29, 0x00	; 0
    2cfe:	c7 52       	subi	r28, 0x27	; 39
    2d00:	df 4f       	sbci	r29, 0xFF	; 255
    2d02:	08 83       	st	Y, r16
    2d04:	19 83       	std	Y+1, r17	; 0x01
    2d06:	c9 5d       	subi	r28, 0xD9	; 217
    2d08:	d0 40       	sbci	r29, 0x00	; 0
    2d0a:	c5 52       	subi	r28, 0x25	; 37
    2d0c:	df 4f       	sbci	r29, 0xFF	; 255
    2d0e:	e8 82       	st	Y, r14
    2d10:	f9 82       	std	Y+1, r15	; 0x01
    2d12:	cb 5d       	subi	r28, 0xDB	; 219
    2d14:	d0 40       	sbci	r29, 0x00	; 0
    2d16:	c3 52       	subi	r28, 0x23	; 35
    2d18:	df 4f       	sbci	r29, 0xFF	; 255
    2d1a:	c8 82       	st	Y, r12
    2d1c:	d9 82       	std	Y+1, r13	; 0x01
    2d1e:	cd 5d       	subi	r28, 0xDD	; 221
    2d20:	d0 40       	sbci	r29, 0x00	; 0
    2d22:	c1 52       	subi	r28, 0x21	; 33
    2d24:	df 4f       	sbci	r29, 0xFF	; 255
    2d26:	a8 82       	st	Y, r10
    2d28:	cf 5d       	subi	r28, 0xDF	; 223
    2d2a:	d0 40       	sbci	r29, 0x00	; 0
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0,ACV);

	return k;

}
    2d2c:	2d b7       	in	r18, 0x3d	; 61
    2d2e:	3e b7       	in	r19, 0x3e	; 62
    2d30:	cc 51       	subi	r28, 0x1C	; 28
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	28 83       	st	Y, r18
    2d36:	39 83       	std	Y+1, r19	; 0x01
    2d38:	c4 5e       	subi	r28, 0xE4	; 228
    2d3a:	d0 40       	sbci	r29, 0x00	; 0
int16_t start_DAC, stop_DAC, height_DAC, increment_DAC;
uint8_t min,max;
int32_t temp_mag, temp_phase;

	//convert to DAC index
	start_DAC = (int16_t) (round(start*(2048/1600))+2048);  
    2d3c:	b8 01       	movw	r22, r16
    2d3e:	88 27       	eor	r24, r24
    2d40:	77 fd       	sbrc	r23, 7
    2d42:	80 95       	com	r24
    2d44:	98 2f       	mov	r25, r24
    2d46:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2d4a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	55 e4       	ldi	r21, 0x45	; 69
    2d56:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    2d5a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2d5e:	2b 01       	movw	r4, r22
	stop_DAC = (int16_t) (round(stop*(2048/1600))+2048);   
	height_DAC = (int16_t) (round(height*(2048/1600)));
    2d60:	cb 52       	subi	r28, 0x2B	; 43
    2d62:	df 4f       	sbci	r29, 0xFF	; 255
    2d64:	48 81       	ld	r20, Y
    2d66:	59 81       	ldd	r21, Y+1	; 0x01
    2d68:	c5 5d       	subi	r28, 0xD5	; 213
    2d6a:	d0 40       	sbci	r29, 0x00	; 0
    2d6c:	ba 01       	movw	r22, r20
    2d6e:	88 27       	eor	r24, r24
    2d70:	77 fd       	sbrc	r23, 7
    2d72:	80 95       	com	r24
    2d74:	98 2f       	mov	r25, r24
    2d76:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2d7a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2d7e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2d82:	8b 01       	movw	r16, r22

	//determine direction
	if((stop-start)>0)
    2d84:	c7 01       	movw	r24, r14
    2d86:	c7 52       	subi	r28, 0x27	; 39
    2d88:	df 4f       	sbci	r29, 0xFF	; 255
    2d8a:	a8 81       	ld	r26, Y
    2d8c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d8e:	c9 5d       	subi	r28, 0xD9	; 217
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	8a 1b       	sub	r24, r26
    2d94:	9b 0b       	sbc	r25, r27
    2d96:	18 16       	cp	r1, r24
    2d98:	19 06       	cpc	r1, r25
    2d9a:	34 f4       	brge	.+12     	; 0x2da8 <ACV_test+0x10a>
	{
		//up
		increment_DAC = (int16_t) (round(increment*(2048/1600)));
    2d9c:	b6 01       	movw	r22, r12
    2d9e:	88 27       	eor	r24, r24
    2da0:	77 fd       	sbrc	r23, 7
    2da2:	80 95       	com	r24
    2da4:	98 2f       	mov	r25, r24
    2da6:	0d c0       	rjmp	.+26     	; 0x2dc2 <ACV_test+0x124>
		up=true;
	}
	else
	{
		//down
		increment_DAC = (int16_t) (round(increment*(-2048/1600)));
    2da8:	c3 52       	subi	r28, 0x23	; 35
    2daa:	df 4f       	sbci	r29, 0xFF	; 255
    2dac:	68 81       	ld	r22, Y
    2dae:	79 81       	ldd	r23, Y+1	; 0x01
    2db0:	cd 5d       	subi	r28, 0xDD	; 221
    2db2:	d0 40       	sbci	r29, 0x00	; 0
    2db4:	70 95       	com	r23
    2db6:	61 95       	neg	r22
    2db8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dba:	88 27       	eor	r24, r24
    2dbc:	77 fd       	sbrc	r23, 7
    2dbe:	80 95       	com	r24
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2dc6:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2dca:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2dce:	c7 53       	subi	r28, 0x37	; 55
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	68 83       	st	Y, r22
    2dd4:	79 83       	std	Y+1, r23	; 0x01
    2dd6:	c9 5c       	subi	r28, 0xC9	; 201
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
		up=false;
	}

	//calculate period in clock cycles
	point_period_temp = (int32_t) (round(F_CPU/(freq*ACV_POINTSPERCYCLE)));
    2dda:	82 e3       	ldi	r24, 0x32	; 50
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	cd 52       	subi	r28, 0x2D	; 45
    2de0:	df 4f       	sbci	r29, 0xFF	; 255
    2de2:	e8 81       	ld	r30, Y
    2de4:	f9 81       	ldd	r31, Y+1	; 0x01
    2de6:	c3 5d       	subi	r28, 0xD3	; 211
    2de8:	d0 40       	sbci	r29, 0x00	; 0
    2dea:	e8 9f       	mul	r30, r24
    2dec:	90 01       	movw	r18, r0
    2dee:	e9 9f       	mul	r30, r25
    2df0:	30 0d       	add	r19, r0
    2df2:	f8 9f       	mul	r31, r24
    2df4:	30 0d       	add	r19, r0
    2df6:	11 24       	eor	r1, r1
    2df8:	44 27       	eor	r20, r20
    2dfa:	37 fd       	sbrc	r19, 7
    2dfc:	40 95       	com	r20
    2dfe:	54 2f       	mov	r21, r20
    2e00:	60 e8       	ldi	r22, 0x80	; 128
    2e02:	74 e8       	ldi	r23, 0x84	; 132
    2e04:	8e e1       	ldi	r24, 0x1E	; 30
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <__udivmodsi4>
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	b9 01       	movw	r22, r18
    2e10:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__floatunsisf>
    2e14:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2e18:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2e1c:	ca 51       	subi	r28, 0x1A	; 26
    2e1e:	df 4f       	sbci	r29, 0xFF	; 255
    2e20:	68 83       	st	Y, r22
    2e22:	c6 5e       	subi	r28, 0xE6	; 230
    2e24:	d0 40       	sbci	r29, 0x00	; 0
    2e26:	c9 51       	subi	r28, 0x19	; 25
    2e28:	df 4f       	sbci	r29, 0xFF	; 255
    2e2a:	78 83       	st	Y, r23
    2e2c:	c7 5e       	subi	r28, 0xE7	; 231
    2e2e:	d0 40       	sbci	r29, 0x00	; 0
	if(point_period_temp <= 50000)
	{
		TIMER.CTRLA = TC_CLKSEL_DIV1_gc;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 93 00 08 	sts	0x0800, r24
uint8_t min,max;
int32_t temp_mag, temp_phase;

	//convert to DAC index
	start_DAC = (int16_t) (round(start*(2048/1600))+2048);  
	stop_DAC = (int16_t) (round(stop*(2048/1600))+2048);   
    2e36:	c5 52       	subi	r28, 0x25	; 37
    2e38:	df 4f       	sbci	r29, 0xFF	; 255
    2e3a:	28 81       	ld	r18, Y
    2e3c:	39 81       	ldd	r19, Y+1	; 0x01
    2e3e:	cb 5d       	subi	r28, 0xDB	; 219
    2e40:	d0 40       	sbci	r29, 0x00	; 0
    2e42:	b9 01       	movw	r22, r18
    2e44:	88 27       	eor	r24, r24
    2e46:	77 fd       	sbrc	r23, 7
    2e48:	80 95       	com	r24
    2e4a:	98 2f       	mov	r25, r24
    2e4c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2e50:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
		TIMER.CTRLA = TC_CLKSEL_DIV64_gc;
		point_period = point_period_temp/64;
	}

	//calculate number of DC offset steps there are
	steps = ((stop_DAC-start_DAC)/increment_DAC)+1;
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__addsf3>
    2e60:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	84 19       	sub	r24, r4
    2e6a:	95 09       	sbc	r25, r5
    2e6c:	c7 53       	subi	r28, 0x37	; 55
    2e6e:	df 4f       	sbci	r29, 0xFF	; 255
    2e70:	68 81       	ld	r22, Y
    2e72:	79 81       	ldd	r23, Y+1	; 0x01
    2e74:	c9 5c       	subi	r28, 0xC9	; 201
    2e76:	d0 40       	sbci	r29, 0x00	; 0
    2e78:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__divmodhi4>
    2e7c:	ab 01       	movw	r20, r22
    2e7e:	4f 5f       	subi	r20, 0xFF	; 255
    2e80:	5f 4f       	sbci	r21, 0xFF	; 255
    2e82:	c5 53       	subi	r28, 0x35	; 53
    2e84:	df 4f       	sbci	r29, 0xFF	; 255
    2e86:	48 83       	st	Y, r20
    2e88:	59 83       	std	Y+1, r21	; 0x01
    2e8a:	cb 5c       	subi	r28, 0xCB	; 203
    2e8c:	d0 40       	sbci	r29, 0x00	; 0
	int16_t mag[steps],phase[steps];
    2e8e:	ca 01       	movw	r24, r20
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	ad b7       	in	r26, 0x3d	; 61
    2e96:	be b7       	in	r27, 0x3e	; 62
    2e98:	a8 1b       	sub	r26, r24
    2e9a:	b9 0b       	sbc	r27, r25
    2e9c:	ad bf       	out	0x3d, r26	; 61
    2e9e:	be bf       	out	0x3e, r27	; 62
    2ea0:	ed b7       	in	r30, 0x3d	; 61
    2ea2:	fe b7       	in	r31, 0x3e	; 62
    2ea4:	31 96       	adiw	r30, 0x01	; 1
    2ea6:	c0 52       	subi	r28, 0x20	; 32
    2ea8:	df 4f       	sbci	r29, 0xFF	; 255
    2eaa:	e8 83       	st	Y, r30
    2eac:	f9 83       	std	Y+1, r31	; 0x01
    2eae:	c0 5e       	subi	r28, 0xE0	; 224
    2eb0:	d0 40       	sbci	r29, 0x00	; 0
    2eb2:	2d b7       	in	r18, 0x3d	; 61
    2eb4:	3e b7       	in	r19, 0x3e	; 62
    2eb6:	28 1b       	sub	r18, r24
    2eb8:	39 0b       	sbc	r19, r25
    2eba:	2d bf       	out	0x3d, r18	; 61
    2ebc:	3e bf       	out	0x3e, r19	; 62
    2ebe:	4d b7       	in	r20, 0x3d	; 61
    2ec0:	5e b7       	in	r21, 0x3e	; 62
    2ec2:	4f 5f       	subi	r20, 0xFF	; 255
    2ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec6:	ce 51       	subi	r28, 0x1E	; 30
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	48 83       	st	Y, r20
    2ecc:	59 83       	std	Y+1, r21	; 0x01
    2ece:	c2 5e       	subi	r28, 0xE2	; 226
    2ed0:	d0 40       	sbci	r29, 0x00	; 0
    2ed2:	3e 01       	movw	r6, r28
    2ed4:	08 94       	sec
    2ed6:	61 1c       	adc	r6, r1
    2ed8:	71 1c       	adc	r7, r1
    2eda:	cc 24       	eor	r12, r12
    2edc:	dd 24       	eor	r13, r13
	//TODO memory check?

	//calculate points for sine wave
	for(i = 0; i < ACV_POINTSPERCYCLE; i++)
	{
		V[i] = (int16_t) (round(sin(((2*M_PI)/ACV_POINTSPERCYCLE)*i)*height_DAC)) + start_DAC;
    2ede:	48 01       	movw	r8, r16
    2ee0:	aa 24       	eor	r10, r10
    2ee2:	97 fc       	sbrc	r9, 7
    2ee4:	a0 94       	com	r10
    2ee6:	ba 2c       	mov	r11, r10
    2ee8:	b6 01       	movw	r22, r12
    2eea:	88 27       	eor	r24, r24
    2eec:	77 fd       	sbrc	r23, 7
    2eee:	80 95       	com	r24
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2ef6:	2d ef       	ldi	r18, 0xFD	; 253
    2ef8:	3d ea       	ldi	r19, 0xAD	; 173
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	5e e3       	ldi	r21, 0x3E	; 62
    2efe:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    2f02:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <sin>
    2f06:	7b 01       	movw	r14, r22
    2f08:	8c 01       	movw	r16, r24
    2f0a:	c5 01       	movw	r24, r10
    2f0c:	b4 01       	movw	r22, r8
    2f0e:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__floatsisf>
    2f12:	9b 01       	movw	r18, r22
    2f14:	ac 01       	movw	r20, r24
    2f16:	c8 01       	movw	r24, r16
    2f18:	b7 01       	movw	r22, r14
    2f1a:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsf3>
    2f1e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <round>
    2f22:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__fixsfsi>
    2f26:	64 0d       	add	r22, r4
    2f28:	75 1d       	adc	r23, r5
    2f2a:	d3 01       	movw	r26, r6
    2f2c:	6d 93       	st	X+, r22
    2f2e:	7d 93       	st	X+, r23
    2f30:	3d 01       	movw	r6, r26
    2f32:	08 94       	sec
    2f34:	c1 1c       	adc	r12, r1
    2f36:	d1 1c       	adc	r13, r1

	//TODO calculate sine wave resolution?
	//TODO memory check?

	//calculate points for sine wave
	for(i = 0; i < ACV_POINTSPERCYCLE; i++)
    2f38:	b2 e3       	ldi	r27, 0x32	; 50
    2f3a:	cb 16       	cp	r12, r27
    2f3c:	d1 04       	cpc	r13, r1
    2f3e:	a1 f6       	brne	.-88     	; 0x2ee8 <ACV_test+0x24a>
		V[i] = (int16_t) (round(sin(((2*M_PI)/ACV_POINTSPERCYCLE)*i)*height_DAC)) + start_DAC;
	}
	current_DAC = start_DAC;

		//change switches
	PORTE.OUTSET = PIN1_bm; //switch0
    2f40:	e0 e8       	ldi	r30, 0x80	; 128
    2f42:	f6 e0       	ldi	r31, 0x06	; 6
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTSET = PIN2_bm; //switch2
    2f48:	84 e0       	ldi	r24, 0x04	; 4
    2f4a:	85 83       	std	Z+5, r24	; 0x05
	if(curr_range == RANGE_10UA)
    2f4c:	c1 52       	subi	r28, 0x21	; 33
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	28 81       	ld	r18, Y
    2f52:	cf 5d       	subi	r28, 0xDF	; 223
    2f54:	d0 40       	sbci	r29, 0x00	; 0
    2f56:	21 30       	cpi	r18, 0x01	; 1
    2f58:	19 f4       	brne	.+6      	; 0x2f60 <ACV_test+0x2c2>
		PORTE.OUTCLR = PIN3_bm; //switch3
    2f5a:	88 e0       	ldi	r24, 0x08	; 8
    2f5c:	86 83       	std	Z+6, r24	; 0x06
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <ACV_test+0x2c6>
	else
		PORTE.OUTSET = PIN3_bm; //switch3
    2f60:	88 e0       	ldi	r24, 0x08	; 8
    2f62:	85 83       	std	Z+5, r24	; 0x05
	//_delay_ms(50);
	PORTE.OUTCLR = PIN0_bm; //switch1
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	e0 e8       	ldi	r30, 0x80	; 128
    2f68:	f6 e0       	ldi	r31, 0x06	; 6
    2f6a:	86 83       	std	Z+6, r24	; 0x06

	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    2f6c:	80 e2       	ldi	r24, 0x20	; 32
    2f6e:	93 e0       	ldi	r25, 0x03	; 3
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    2f76:	88 23       	and	r24, r24
    2f78:	c9 f3       	breq	.-14     	; 0x2f6c <ACV_test+0x2ce>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    2f7a:	80 e2       	ldi	r24, 0x20	; 32
    2f7c:	93 e0       	ldi	r25, 0x03	; 3
    2f7e:	b2 01       	movw	r22, r4
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
    2f86:	84 ec       	ldi	r24, 0xC4	; 196
    2f88:	99 e0       	ldi	r25, 0x09	; 9
    2f8a:	22 e3       	ldi	r18, 0x32	; 50
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	f9 01       	movw	r30, r18
    2f90:	31 97       	sbiw	r30, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <ACV_test+0x2f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	d9 f7       	brne	.-10     	; 0x2f8e <ACV_test+0x2f0>
    2f98:	c3 53       	subi	r28, 0x33	; 51
    2f9a:	df 4f       	sbci	r29, 0xFF	; 255
    2f9c:	18 82       	st	Y, r1
    2f9e:	cd 5c       	subi	r28, 0xCD	; 205
    2fa0:	d0 40       	sbci	r29, 0x00	; 0
		phase[k] = 0;
		temp_mag = 0;
		temp_phase = 0;
		 
		//prform specified number of cycles at given DC offset
		for(j = 0; j < cycles; j++)
    2fa2:	ae 01       	movw	r20, r28
    2fa4:	4b 59       	subi	r20, 0x9B	; 155
    2fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa8:	c2 51       	subi	r28, 0x12	; 18
    2faa:	df 4f       	sbci	r29, 0xFF	; 255
    2fac:	48 83       	st	Y, r20
    2fae:	59 83       	std	Y+1, r21	; 0x01
    2fb0:	ce 5e       	subi	r28, 0xEE	; 238
    2fb2:	d0 40       	sbci	r29, 0x00	; 0
		{
			//apply sine wave and record current
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	87 53       	subi	r24, 0x37	; 55
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	c4 51       	subi	r28, 0x14	; 20
    2fbc:	df 4f       	sbci	r29, 0xFF	; 255
    2fbe:	88 83       	st	Y, r24
    2fc0:	99 83       	std	Y+1, r25	; 0x01
    2fc2:	cc 5e       	subi	r28, 0xEC	; 236
    2fc4:	d0 40       	sbci	r29, 0x00	; 0
			temp_phase += ((max+min) >> 1); 

		}

		//average out results
		mag[k] = temp_mag/cycles; 
    2fc6:	c9 52       	subi	r28, 0x29	; 41
    2fc8:	df 4f       	sbci	r29, 0xFF	; 255
    2fca:	28 81       	ld	r18, Y
    2fcc:	39 81       	ldd	r19, Y+1	; 0x01
    2fce:	c7 5d       	subi	r28, 0xD7	; 215
    2fd0:	d0 40       	sbci	r29, 0x00	; 0
    2fd2:	44 27       	eor	r20, r20
    2fd4:	37 fd       	sbrc	r19, 7
    2fd6:	40 95       	com	r20
    2fd8:	54 2f       	mov	r21, r20
    2fda:	c8 51       	subi	r28, 0x18	; 24
    2fdc:	df 4f       	sbci	r29, 0xFF	; 255
    2fde:	28 83       	st	Y, r18
    2fe0:	39 83       	std	Y+1, r19	; 0x01
    2fe2:	4a 83       	std	Y+2, r20	; 0x02
    2fe4:	5b 83       	std	Y+3, r21	; 0x03
    2fe6:	c8 5e       	subi	r28, 0xE8	; 232
    2fe8:	d0 40       	sbci	r29, 0x00	; 0
    2fea:	62 c1       	rjmp	.+708    	; 0x32b0 <__stack+0x2b1>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
	_delay_ms(250);

	for(k = 0; k < steps; k++)
	{
		mag[k] = 0;
    2fec:	c1 53       	subi	r28, 0x31	; 49
    2fee:	df 4f       	sbci	r29, 0xFF	; 255
    2ff0:	e8 81       	ld	r30, Y
    2ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ff4:	cf 5c       	subi	r28, 0xCF	; 207
    2ff6:	d0 40       	sbci	r29, 0x00	; 0
    2ff8:	ee 0f       	add	r30, r30
    2ffa:	ff 1f       	adc	r31, r31
    2ffc:	c0 52       	subi	r28, 0x20	; 32
    2ffe:	df 4f       	sbci	r29, 0xFF	; 255
    3000:	a8 81       	ld	r26, Y
    3002:	b9 81       	ldd	r27, Y+1	; 0x01
    3004:	c0 5e       	subi	r28, 0xE0	; 224
    3006:	d0 40       	sbci	r29, 0x00	; 0
    3008:	ae 0f       	add	r26, r30
    300a:	bf 1f       	adc	r27, r31
    300c:	1d 92       	st	X+, r1
    300e:	1c 92       	st	X, r1
		phase[k] = 0;
    3010:	ce 51       	subi	r28, 0x1E	; 30
    3012:	df 4f       	sbci	r29, 0xFF	; 255
    3014:	48 81       	ld	r20, Y
    3016:	59 81       	ldd	r21, Y+1	; 0x01
    3018:	c2 5e       	subi	r28, 0xE2	; 226
    301a:	d0 40       	sbci	r29, 0x00	; 0
    301c:	e4 0f       	add	r30, r20
    301e:	f5 1f       	adc	r31, r21
    3020:	10 82       	st	Z, r1
    3022:	11 82       	std	Z+1, r1	; 0x01
    3024:	c2 53       	subi	r28, 0x32	; 50
    3026:	df 4f       	sbci	r29, 0xFF	; 255
    3028:	18 82       	st	Y, r1
    302a:	ce 5c       	subi	r28, 0xCE	; 206
    302c:	d0 40       	sbci	r29, 0x00	; 0
    302e:	88 24       	eor	r8, r8
    3030:	99 24       	eor	r9, r9
    3032:	54 01       	movw	r10, r8
    3034:	44 24       	eor	r4, r4
    3036:	55 24       	eor	r5, r5
    3038:	32 01       	movw	r6, r4
    303a:	c7 c0       	rjmp	.+398    	; 0x31ca <__stack+0x1cb>
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
			{
				I[i] = 0;
				
				//set DAC and trigger timer
				while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    303c:	80 e2       	ldi	r24, 0x20	; 32
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    3046:	88 23       	and	r24, r24
    3048:	c9 f3       	breq	.-14     	; 0x303c <__stack+0x3d>
		for(j = 0; j < cycles; j++)
		{
			//apply sine wave and record current
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
			{
				I[i] = 0;
    304a:	d7 01       	movw	r26, r14
    304c:	1d 92       	st	X+, r1
    304e:	1c 92       	st	X, r1
				
				//set DAC and trigger timer
				while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
					DAC_Channel_Write(&DACB,V[i],CH0);
    3050:	f6 01       	movw	r30, r12
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	80 e2       	ldi	r24, 0x20	; 32
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
				TIMER.CNT = 0;
    3060:	10 92 20 08 	sts	0x0820, r1
    3064:	10 92 21 08 	sts	0x0821, r1
    3068:	2b c0       	rjmp	.+86     	; 0x30c0 <__stack+0xc1>

				//ADC measurements
				while(TIMER.CNT<point_period) 
				{
					ADC_Ch_Conversion_Start(&ADCA.CH1);
    306a:	80 91 28 02 	lds	r24, 0x0228
    306e:	80 68       	ori	r24, 0x80	; 128
    3070:	80 93 28 02 	sts	0x0228, r24
					while(!ADC_Ch_Conversion_Complete(&ADCA.CH1) && TIMER.CNT<point_period) {}
    3074:	80 91 2b 02 	lds	r24, 0x022B
    3078:	80 fd       	sbrc	r24, 0
    307a:	07 c0       	rjmp	.+14     	; 0x308a <__stack+0x8b>
    307c:	80 91 20 08 	lds	r24, 0x0820
    3080:	90 91 21 08 	lds	r25, 0x0821
    3084:	82 17       	cp	r24, r18
    3086:	93 07       	cpc	r25, r19
    3088:	a8 f3       	brcs	.-22     	; 0x3074 <__stack+0x75>
					if(I[i] == 0)
    308a:	d7 01       	movw	r26, r14
    308c:	0d 91       	ld	r16, X+
    308e:	1c 91       	ld	r17, X
    3090:	01 15       	cp	r16, r1
    3092:	11 05       	cpc	r17, r1
    3094:	49 f4       	brne	.+18     	; 0x30a8 <__stack+0xa9>
						I[i] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET);
    3096:	88 e2       	ldi	r24, 0x28	; 40
    3098:	92 e0       	ldi	r25, 0x02	; 2
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    30a0:	f7 01       	movw	r30, r14
    30a2:	80 83       	st	Z, r24
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	0c c0       	rjmp	.+24     	; 0x30c0 <__stack+0xc1>
					else
						I[i] = (I[i] + ADC_ResultCh_GetWord_Signed(&ADCA.CH1,ADC_OFFSET)) >> 1;
    30a8:	88 e2       	ldi	r24, 0x28	; 40
    30aa:	92 e0       	ldi	r25, 0x02	; 2
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <ADC_ResultCh_GetWord_Signed>
    30b2:	08 0f       	add	r16, r24
    30b4:	19 1f       	adc	r17, r25
    30b6:	15 95       	asr	r17
    30b8:	07 95       	ror	r16
    30ba:	d7 01       	movw	r26, r14
    30bc:	0d 93       	st	X+, r16
    30be:	1c 93       	st	X, r17
				while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
					DAC_Channel_Write(&DACB,V[i],CH0);
				TIMER.CNT = 0;

				//ADC measurements
				while(TIMER.CNT<point_period) 
    30c0:	80 91 20 08 	lds	r24, 0x0820
    30c4:	90 91 21 08 	lds	r25, 0x0821
    30c8:	ca 51       	subi	r28, 0x1A	; 26
    30ca:	df 4f       	sbci	r29, 0xFF	; 255
    30cc:	28 81       	ld	r18, Y
    30ce:	c6 5e       	subi	r28, 0xE6	; 230
    30d0:	d0 40       	sbci	r29, 0x00	; 0
    30d2:	c9 51       	subi	r28, 0x19	; 25
    30d4:	df 4f       	sbci	r29, 0xFF	; 255
    30d6:	38 81       	ld	r19, Y
    30d8:	c7 5e       	subi	r28, 0xE7	; 231
    30da:	d0 40       	sbci	r29, 0x00	; 0
    30dc:	82 17       	cp	r24, r18
    30de:	93 07       	cpc	r25, r19
    30e0:	20 f2       	brcs	.-120    	; 0x306a <__stack+0x6b>
    30e2:	e2 e0       	ldi	r30, 0x02	; 2
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	ee 0e       	add	r14, r30
    30e8:	ff 1e       	adc	r15, r31
    30ea:	ce 0e       	add	r12, r30
    30ec:	df 1e       	adc	r13, r31
		 
		//prform specified number of cycles at given DC offset
		for(j = 0; j < cycles; j++)
		{
			//apply sine wave and record current
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
    30ee:	c4 51       	subi	r28, 0x14	; 20
    30f0:	df 4f       	sbci	r29, 0xFF	; 255
    30f2:	28 81       	ld	r18, Y
    30f4:	39 81       	ldd	r19, Y+1	; 0x01
    30f6:	cc 5e       	subi	r28, 0xEC	; 236
    30f8:	d0 40       	sbci	r29, 0x00	; 0
    30fa:	e2 16       	cp	r14, r18
    30fc:	f3 06       	cpc	r15, r19
    30fe:	09 f0       	breq	.+2      	; 0x3102 <__stack+0x103>
    3100:	9d cf       	rjmp	.-198    	; 0x303c <__stack+0x3d>
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	00 e0       	ldi	r16, 0x00	; 0

			min = 0;
			max = 0;
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
			{
				if(I[i] > I[max])
    3108:	d1 01       	movw	r26, r2
    310a:	6d 91       	ld	r22, X+
    310c:	7c 91       	ld	r23, X
    310e:	e0 2f       	mov	r30, r16
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	ee 0f       	add	r30, r30
    3114:	ff 1f       	adc	r31, r31
    3116:	85 e6       	ldi	r24, 0x65	; 101
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	8c 0f       	add	r24, r28
    311c:	9d 1f       	adc	r25, r29
    311e:	e8 0f       	add	r30, r24
    3120:	f9 1f       	adc	r31, r25
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	86 17       	cp	r24, r22
    3128:	97 07       	cpc	r25, r23
    312a:	0c f4       	brge	.+2      	; 0x312e <__stack+0x12f>
    312c:	04 2f       	mov	r16, r20
					max = i;
				if(I[i] < I[min])
    312e:	e2 2f       	mov	r30, r18
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	ee 0f       	add	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	a5 e6       	ldi	r26, 0x65	; 101
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	ac 0f       	add	r26, r28
    313c:	bd 1f       	adc	r27, r29
    313e:	ea 0f       	add	r30, r26
    3140:	fb 1f       	adc	r31, r27
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	68 17       	cp	r22, r24
    3148:	79 07       	cpc	r23, r25
    314a:	0c f4       	brge	.+2      	; 0x314e <__stack+0x14f>
    314c:	24 2f       	mov	r18, r20
				}
			}

			min = 0;
			max = 0;
			for(i = 0; i < ACV_POINTSPERCYCLE; i++)
    314e:	4f 5f       	subi	r20, 0xFF	; 255
    3150:	e2 e0       	ldi	r30, 0x02	; 2
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	2e 0e       	add	r2, r30
    3156:	3f 1e       	adc	r3, r31
    3158:	42 33       	cpi	r20, 0x32	; 50
    315a:	b1 f6       	brne	.-84     	; 0x3108 <__stack+0x109>
				if(I[i] < I[min])
					min = i;
			}

			//calculate magnitude and phase shift
			temp_mag += ((I[max]-I[min]) >> 1);
    315c:	10 e0       	ldi	r17, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	d8 01       	movw	r26, r16
    3162:	aa 0f       	add	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	45 e6       	ldi	r20, 0x65	; 101
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	4c 0f       	add	r20, r28
    316c:	5d 1f       	adc	r21, r29
    316e:	a4 0f       	add	r26, r20
    3170:	b5 1f       	adc	r27, r21
    3172:	f9 01       	movw	r30, r18
    3174:	ee 0f       	add	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	e4 0f       	add	r30, r20
    317a:	f5 1f       	adc	r31, r21
    317c:	8d 91       	ld	r24, X+
    317e:	9c 91       	ld	r25, X
    3180:	60 81       	ld	r22, Z
    3182:	71 81       	ldd	r23, Z+1	; 0x01
    3184:	86 1b       	sub	r24, r22
    3186:	97 0b       	sbc	r25, r23
    3188:	95 95       	asr	r25
    318a:	87 95       	ror	r24
    318c:	aa 27       	eor	r26, r26
    318e:	97 fd       	sbrc	r25, 7
    3190:	a0 95       	com	r26
    3192:	ba 2f       	mov	r27, r26
    3194:	88 0e       	add	r8, r24
    3196:	99 1e       	adc	r9, r25
    3198:	aa 1e       	adc	r10, r26
    319a:	bb 1e       	adc	r11, r27
			temp_phase += ((max+min) >> 1); 
    319c:	20 0f       	add	r18, r16
    319e:	31 1f       	adc	r19, r17
    31a0:	35 95       	asr	r19
    31a2:	27 95       	ror	r18
    31a4:	44 27       	eor	r20, r20
    31a6:	37 fd       	sbrc	r19, 7
    31a8:	40 95       	com	r20
    31aa:	54 2f       	mov	r21, r20
    31ac:	42 0e       	add	r4, r18
    31ae:	53 1e       	adc	r5, r19
    31b0:	64 1e       	adc	r6, r20
    31b2:	75 1e       	adc	r7, r21
		phase[k] = 0;
		temp_mag = 0;
		temp_phase = 0;
		 
		//prform specified number of cycles at given DC offset
		for(j = 0; j < cycles; j++)
    31b4:	c2 53       	subi	r28, 0x32	; 50
    31b6:	df 4f       	sbci	r29, 0xFF	; 255
    31b8:	58 81       	ld	r21, Y
    31ba:	ce 5c       	subi	r28, 0xCE	; 206
    31bc:	d0 40       	sbci	r29, 0x00	; 0
    31be:	5f 5f       	subi	r21, 0xFF	; 255
    31c0:	c2 53       	subi	r28, 0x32	; 50
    31c2:	df 4f       	sbci	r29, 0xFF	; 255
    31c4:	58 83       	st	Y, r21
    31c6:	ce 5c       	subi	r28, 0xCE	; 206
    31c8:	d0 40       	sbci	r29, 0x00	; 0
    31ca:	c2 53       	subi	r28, 0x32	; 50
    31cc:	df 4f       	sbci	r29, 0xFF	; 255
    31ce:	a8 81       	ld	r26, Y
    31d0:	ce 5c       	subi	r28, 0xCE	; 206
    31d2:	d0 40       	sbci	r29, 0x00	; 0
    31d4:	8a 2f       	mov	r24, r26
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	c9 52       	subi	r28, 0x29	; 41
    31da:	df 4f       	sbci	r29, 0xFF	; 255
    31dc:	e8 81       	ld	r30, Y
    31de:	f9 81       	ldd	r31, Y+1	; 0x01
    31e0:	c7 5d       	subi	r28, 0xD7	; 215
    31e2:	d0 40       	sbci	r29, 0x00	; 0
    31e4:	8e 17       	cp	r24, r30
    31e6:	9f 07       	cpc	r25, r31
    31e8:	5c f4       	brge	.+22     	; 0x3200 <__stack+0x201>
    31ea:	75 e6       	ldi	r23, 0x65	; 101
    31ec:	27 2e       	mov	r2, r23
    31ee:	31 2c       	mov	r3, r1
    31f0:	2c 0e       	add	r2, r28
    31f2:	3d 1e       	adc	r3, r29
    31f4:	71 01       	movw	r14, r2
    31f6:	6e 01       	movw	r12, r28
    31f8:	08 94       	sec
    31fa:	c1 1c       	adc	r12, r1
    31fc:	d1 1c       	adc	r13, r1
    31fe:	1e cf       	rjmp	.-452    	; 0x303c <__stack+0x3d>
			temp_phase += ((max+min) >> 1); 

		}

		//average out results
		mag[k] = temp_mag/cycles; 
    3200:	c1 53       	subi	r28, 0x31	; 49
    3202:	df 4f       	sbci	r29, 0xFF	; 255
    3204:	08 81       	ld	r16, Y
    3206:	19 81       	ldd	r17, Y+1	; 0x01
    3208:	cf 5c       	subi	r28, 0xCF	; 207
    320a:	d0 40       	sbci	r29, 0x00	; 0
    320c:	00 0f       	add	r16, r16
    320e:	11 1f       	adc	r17, r17
    3210:	c0 52       	subi	r28, 0x20	; 32
    3212:	df 4f       	sbci	r29, 0xFF	; 255
    3214:	e8 80       	ld	r14, Y
    3216:	f9 80       	ldd	r15, Y+1	; 0x01
    3218:	c0 5e       	subi	r28, 0xE0	; 224
    321a:	d0 40       	sbci	r29, 0x00	; 0
    321c:	e0 0e       	add	r14, r16
    321e:	f1 1e       	adc	r15, r17
    3220:	c5 01       	movw	r24, r10
    3222:	b4 01       	movw	r22, r8
    3224:	c8 51       	subi	r28, 0x18	; 24
    3226:	df 4f       	sbci	r29, 0xFF	; 255
    3228:	28 81       	ld	r18, Y
    322a:	39 81       	ldd	r19, Y+1	; 0x01
    322c:	4a 81       	ldd	r20, Y+2	; 0x02
    322e:	5b 81       	ldd	r21, Y+3	; 0x03
    3230:	c8 5e       	subi	r28, 0xE8	; 232
    3232:	d0 40       	sbci	r29, 0x00	; 0
    3234:	0e 94 07 30 	call	0x600e	; 0x600e <__divmodsi4>
    3238:	d7 01       	movw	r26, r14
    323a:	2d 93       	st	X+, r18
    323c:	3c 93       	st	X, r19
		phase[k] = temp_phase/cycles;
    323e:	ce 51       	subi	r28, 0x1E	; 30
    3240:	df 4f       	sbci	r29, 0xFF	; 255
    3242:	e8 81       	ld	r30, Y
    3244:	f9 81       	ldd	r31, Y+1	; 0x01
    3246:	c2 5e       	subi	r28, 0xE2	; 226
    3248:	d0 40       	sbci	r29, 0x00	; 0
    324a:	0e 0f       	add	r16, r30
    324c:	1f 1f       	adc	r17, r31
    324e:	c3 01       	movw	r24, r6
    3250:	b2 01       	movw	r22, r4
    3252:	c8 51       	subi	r28, 0x18	; 24
    3254:	df 4f       	sbci	r29, 0xFF	; 255
    3256:	28 81       	ld	r18, Y
    3258:	39 81       	ldd	r19, Y+1	; 0x01
    325a:	4a 81       	ldd	r20, Y+2	; 0x02
    325c:	5b 81       	ldd	r21, Y+3	; 0x03
    325e:	c8 5e       	subi	r28, 0xE8	; 232
    3260:	d0 40       	sbci	r29, 0x00	; 0
    3262:	0e 94 07 30 	call	0x600e	; 0x600e <__divmodsi4>
    3266:	d8 01       	movw	r26, r16
    3268:	2d 93       	st	X+, r18
    326a:	3c 93       	st	X, r19
    326c:	fe 01       	movw	r30, r28
    326e:	31 96       	adiw	r30, 0x01	; 1
		current_DAC+=increment_DAC;

		//calculate new sine wave points
		for(i = 0; i < ACV_POINTSPERCYCLE; i++)
		{
			V[i]+=increment_DAC;
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	c7 53       	subi	r28, 0x37	; 55
    3276:	df 4f       	sbci	r29, 0xFF	; 255
    3278:	28 81       	ld	r18, Y
    327a:	39 81       	ldd	r19, Y+1	; 0x01
    327c:	c9 5c       	subi	r28, 0xC9	; 201
    327e:	d0 40       	sbci	r29, 0x00	; 0
    3280:	82 0f       	add	r24, r18
    3282:	93 1f       	adc	r25, r19
    3284:	81 93       	st	Z+, r24
    3286:	91 93       	st	Z+, r25

		//set up new points
		current_DAC+=increment_DAC;

		//calculate new sine wave points
		for(i = 0; i < ACV_POINTSPERCYCLE; i++)
    3288:	c2 51       	subi	r28, 0x12	; 18
    328a:	df 4f       	sbci	r29, 0xFF	; 255
    328c:	48 81       	ld	r20, Y
    328e:	59 81       	ldd	r21, Y+1	; 0x01
    3290:	ce 5e       	subi	r28, 0xEE	; 238
    3292:	d0 40       	sbci	r29, 0x00	; 0
    3294:	e4 17       	cp	r30, r20
    3296:	f5 07       	cpc	r31, r21
    3298:	59 f7       	brne	.-42     	; 0x3270 <__stack+0x271>

	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
		DAC_Channel_Write(&DACB,current_DAC,CH0);
	_delay_ms(250);

	for(k = 0; k < steps; k++)
    329a:	c3 53       	subi	r28, 0x33	; 51
    329c:	df 4f       	sbci	r29, 0xFF	; 255
    329e:	58 81       	ld	r21, Y
    32a0:	cd 5c       	subi	r28, 0xCD	; 205
    32a2:	d0 40       	sbci	r29, 0x00	; 0
    32a4:	5f 5f       	subi	r21, 0xFF	; 255
    32a6:	c3 53       	subi	r28, 0x33	; 51
    32a8:	df 4f       	sbci	r29, 0xFF	; 255
    32aa:	58 83       	st	Y, r21
    32ac:	cd 5c       	subi	r28, 0xCD	; 205
    32ae:	d0 40       	sbci	r29, 0x00	; 0
    32b0:	c3 53       	subi	r28, 0x33	; 51
    32b2:	df 4f       	sbci	r29, 0xFF	; 255
    32b4:	98 81       	ld	r25, Y
    32b6:	cd 5c       	subi	r28, 0xCD	; 205
    32b8:	d0 40       	sbci	r29, 0x00	; 0
    32ba:	89 2f       	mov	r24, r25
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	c1 53       	subi	r28, 0x31	; 49
    32c0:	df 4f       	sbci	r29, 0xFF	; 255
    32c2:	88 83       	st	Y, r24
    32c4:	99 83       	std	Y+1, r25	; 0x01
    32c6:	cf 5c       	subi	r28, 0xCF	; 207
    32c8:	d0 40       	sbci	r29, 0x00	; 0
    32ca:	c5 53       	subi	r28, 0x35	; 53
    32cc:	df 4f       	sbci	r29, 0xFF	; 255
    32ce:	a8 81       	ld	r26, Y
    32d0:	b9 81       	ldd	r27, Y+1	; 0x01
    32d2:	cb 5c       	subi	r28, 0xCB	; 203
    32d4:	d0 40       	sbci	r29, 0x00	; 0
    32d6:	8a 17       	cp	r24, r26
    32d8:	9b 07       	cpc	r25, r27
    32da:	0c f4       	brge	.+2      	; 0x32de <__stack+0x2df>
    32dc:	87 ce       	rjmp	.-754    	; 0x2fec <ACV_test+0x34e>
		{
			V[i]+=increment_DAC;
		}
	}

	PORTE.OUTSET = PIN0_bm; //switch1
    32de:	e0 e8       	ldi	r30, 0x80	; 128
    32e0:	f6 e0       	ldi	r31, 0x06	; 6
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	85 83       	std	Z+5, r24	; 0x05
	//PORTE.OUTCLR = PIN0_bm; //switch1
	PORTE.OUTCLR = PIN1_bm; //switch0
    32e6:	82 e0       	ldi	r24, 0x02	; 2
    32e8:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN2_bm; //switch2
    32ea:	84 e0       	ldi	r24, 0x04	; 4
    32ec:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    32ee:	88 e0       	ldi	r24, 0x08	; 8
    32f0:	86 83       	std	Z+6, r24	; 0x06
	current_DAC = 2048;
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    32f2:	80 e2       	ldi	r24, 0x20	; 32
    32f4:	93 e0       	ldi	r25, 0x03	; 3
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    32fc:	88 23       	and	r24, r24
    32fe:	c9 f3       	breq	.-14     	; 0x32f2 <__stack+0x2f3>
		DAC_Channel_Write(&DACB,current_DAC,CH0);
    3300:	80 e2       	ldi	r24, 0x20	; 32
    3302:	93 e0       	ldi	r25, 0x03	; 3
    3304:	60 e0       	ldi	r22, 0x00	; 0
    3306:	78 e0       	ldi	r23, 0x08	; 8
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    330e:	80 91 a1 08 	lds	r24, 0x08A1
    3312:	85 ff       	sbrs	r24, 5
    3314:	fc cf       	rjmp	.-8      	; 0x330e <__stack+0x30f>
	USART_PutChar(&USARTC0, ACV);
    3316:	82 e0       	ldi	r24, 0x02	; 2
    3318:	80 93 a0 08 	sts	0x08A0, r24
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
	for(j = 0; j < 15; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3320:	80 91 a1 08 	lds	r24, 0x08A1
    3324:	85 ff       	sbrs	r24, 5
    3326:	fc cf       	rjmp	.-8      	; 0x3320 <__stack+0x321>
		USART_PutChar(&USARTC0, name[j]);
    3328:	cf 52       	subi	r28, 0x2F	; 47
    332a:	df 4f       	sbci	r29, 0xFF	; 255
    332c:	e8 81       	ld	r30, Y
    332e:	f9 81       	ldd	r31, Y+1	; 0x01
    3330:	c1 5d       	subi	r28, 0xD1	; 209
    3332:	d0 40       	sbci	r29, 0x00	; 0
    3334:	e2 0f       	add	r30, r18
    3336:	f3 1f       	adc	r31, r19
    3338:	80 81       	ld	r24, Z
    333a:	80 93 a0 08 	sts	0x08A0, r24
    333e:	2f 5f       	subi	r18, 0xFF	; 255
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
		DAC_Channel_Write(&DACB,current_DAC,CH0);

	//start output to USB
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, ACV);
	for(j = 0; j < 15; j++)
    3342:	2f 30       	cpi	r18, 0x0F	; 15
    3344:	31 05       	cpc	r19, r1
    3346:	61 f7       	brne	.-40     	; 0x3320 <__stack+0x321>
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, name[j]);
	}
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3348:	80 91 a1 08 	lds	r24, 0x08A1
    334c:	85 ff       	sbrs	r24, 5
    334e:	fc cf       	rjmp	.-8      	; 0x3348 <__stack+0x349>
	USART_PutChar(&USARTC0, freq>>8);
    3350:	cd 52       	subi	r28, 0x2D	; 45
    3352:	df 4f       	sbci	r29, 0xFF	; 255
    3354:	e8 81       	ld	r30, Y
    3356:	f9 81       	ldd	r31, Y+1	; 0x01
    3358:	c3 5d       	subi	r28, 0xD3	; 211
    335a:	d0 40       	sbci	r29, 0x00	; 0
    335c:	8f 2f       	mov	r24, r31
    335e:	99 27       	eor	r25, r25
    3360:	87 fd       	sbrc	r24, 7
    3362:	9a 95       	dec	r25
    3364:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3368:	80 91 a1 08 	lds	r24, 0x08A1
    336c:	85 ff       	sbrs	r24, 5
    336e:	fc cf       	rjmp	.-8      	; 0x3368 <__stack+0x369>
	USART_PutChar(&USARTC0, freq);
    3370:	cd 52       	subi	r28, 0x2D	; 45
    3372:	df 4f       	sbci	r29, 0xFF	; 255
    3374:	f8 81       	ld	r31, Y
    3376:	c3 5d       	subi	r28, 0xD3	; 211
    3378:	d0 40       	sbci	r29, 0x00	; 0
    337a:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    337e:	80 91 a1 08 	lds	r24, 0x08A1
    3382:	85 ff       	sbrs	r24, 5
    3384:	fc cf       	rjmp	.-8      	; 0x337e <__stack+0x37f>
	USART_PutChar(&USARTC0, height>>8);
    3386:	cb 52       	subi	r28, 0x2B	; 43
    3388:	df 4f       	sbci	r29, 0xFF	; 255
    338a:	28 81       	ld	r18, Y
    338c:	39 81       	ldd	r19, Y+1	; 0x01
    338e:	c5 5d       	subi	r28, 0xD5	; 213
    3390:	d0 40       	sbci	r29, 0x00	; 0
    3392:	83 2f       	mov	r24, r19
    3394:	99 27       	eor	r25, r25
    3396:	87 fd       	sbrc	r24, 7
    3398:	9a 95       	dec	r25
    339a:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    339e:	80 91 a1 08 	lds	r24, 0x08A1
    33a2:	85 ff       	sbrs	r24, 5
    33a4:	fc cf       	rjmp	.-8      	; 0x339e <__stack+0x39f>
	USART_PutChar(&USARTC0, height);
    33a6:	cb 52       	subi	r28, 0x2B	; 43
    33a8:	df 4f       	sbci	r29, 0xFF	; 255
    33aa:	38 81       	ld	r19, Y
    33ac:	c5 5d       	subi	r28, 0xD5	; 213
    33ae:	d0 40       	sbci	r29, 0x00	; 0
    33b0:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    33b4:	80 91 a1 08 	lds	r24, 0x08A1
    33b8:	85 ff       	sbrs	r24, 5
    33ba:	fc cf       	rjmp	.-8      	; 0x33b4 <__stack+0x3b5>
	USART_PutChar(&USARTC0, cycles>>8);
    33bc:	c9 52       	subi	r28, 0x29	; 41
    33be:	df 4f       	sbci	r29, 0xFF	; 255
    33c0:	48 81       	ld	r20, Y
    33c2:	59 81       	ldd	r21, Y+1	; 0x01
    33c4:	c7 5d       	subi	r28, 0xD7	; 215
    33c6:	d0 40       	sbci	r29, 0x00	; 0
    33c8:	85 2f       	mov	r24, r21
    33ca:	99 27       	eor	r25, r25
    33cc:	87 fd       	sbrc	r24, 7
    33ce:	9a 95       	dec	r25
    33d0:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    33d4:	80 91 a1 08 	lds	r24, 0x08A1
    33d8:	85 ff       	sbrs	r24, 5
    33da:	fc cf       	rjmp	.-8      	; 0x33d4 <__stack+0x3d5>
	USART_PutChar(&USARTC0, cycles);
    33dc:	c9 52       	subi	r28, 0x29	; 41
    33de:	df 4f       	sbci	r29, 0xFF	; 255
    33e0:	58 81       	ld	r21, Y
    33e2:	c7 5d       	subi	r28, 0xD7	; 215
    33e4:	d0 40       	sbci	r29, 0x00	; 0
    33e6:	50 93 a0 08 	sts	0x08A0, r21
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    33ea:	80 91 a1 08 	lds	r24, 0x08A1
    33ee:	85 ff       	sbrs	r24, 5
    33f0:	fc cf       	rjmp	.-8      	; 0x33ea <__stack+0x3eb>
	USART_PutChar(&USARTC0, start>>8);
    33f2:	c7 52       	subi	r28, 0x27	; 39
    33f4:	df 4f       	sbci	r29, 0xFF	; 255
    33f6:	a8 81       	ld	r26, Y
    33f8:	b9 81       	ldd	r27, Y+1	; 0x01
    33fa:	c9 5d       	subi	r28, 0xD9	; 217
    33fc:	d0 40       	sbci	r29, 0x00	; 0
    33fe:	8b 2f       	mov	r24, r27
    3400:	99 27       	eor	r25, r25
    3402:	87 fd       	sbrc	r24, 7
    3404:	9a 95       	dec	r25
    3406:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    340a:	80 91 a1 08 	lds	r24, 0x08A1
    340e:	85 ff       	sbrs	r24, 5
    3410:	fc cf       	rjmp	.-8      	; 0x340a <__stack+0x40b>
	USART_PutChar(&USARTC0, start);
    3412:	c7 52       	subi	r28, 0x27	; 39
    3414:	df 4f       	sbci	r29, 0xFF	; 255
    3416:	b8 81       	ld	r27, Y
    3418:	c9 5d       	subi	r28, 0xD9	; 217
    341a:	d0 40       	sbci	r29, 0x00	; 0
    341c:	b0 93 a0 08 	sts	0x08A0, r27
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3420:	80 91 a1 08 	lds	r24, 0x08A1
    3424:	85 ff       	sbrs	r24, 5
    3426:	fc cf       	rjmp	.-8      	; 0x3420 <__stack+0x421>
	USART_PutChar(&USARTC0, stop>>8);
    3428:	c5 52       	subi	r28, 0x25	; 37
    342a:	df 4f       	sbci	r29, 0xFF	; 255
    342c:	e8 81       	ld	r30, Y
    342e:	f9 81       	ldd	r31, Y+1	; 0x01
    3430:	cb 5d       	subi	r28, 0xDB	; 219
    3432:	d0 40       	sbci	r29, 0x00	; 0
    3434:	8f 2f       	mov	r24, r31
    3436:	99 27       	eor	r25, r25
    3438:	87 fd       	sbrc	r24, 7
    343a:	9a 95       	dec	r25
    343c:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3440:	80 91 a1 08 	lds	r24, 0x08A1
    3444:	85 ff       	sbrs	r24, 5
    3446:	fc cf       	rjmp	.-8      	; 0x3440 <__stack+0x441>
	USART_PutChar(&USARTC0, stop);
    3448:	c5 52       	subi	r28, 0x25	; 37
    344a:	df 4f       	sbci	r29, 0xFF	; 255
    344c:	f8 81       	ld	r31, Y
    344e:	cb 5d       	subi	r28, 0xDB	; 219
    3450:	d0 40       	sbci	r29, 0x00	; 0
    3452:	f0 93 a0 08 	sts	0x08A0, r31
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3456:	80 91 a1 08 	lds	r24, 0x08A1
    345a:	85 ff       	sbrs	r24, 5
    345c:	fc cf       	rjmp	.-8      	; 0x3456 <__stack+0x457>
	USART_PutChar(&USARTC0, increment>>8);
    345e:	c3 52       	subi	r28, 0x23	; 35
    3460:	df 4f       	sbci	r29, 0xFF	; 255
    3462:	28 81       	ld	r18, Y
    3464:	39 81       	ldd	r19, Y+1	; 0x01
    3466:	cd 5d       	subi	r28, 0xDD	; 221
    3468:	d0 40       	sbci	r29, 0x00	; 0
    346a:	83 2f       	mov	r24, r19
    346c:	99 27       	eor	r25, r25
    346e:	87 fd       	sbrc	r24, 7
    3470:	9a 95       	dec	r25
    3472:	80 93 a0 08 	sts	0x08A0, r24
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3476:	80 91 a1 08 	lds	r24, 0x08A1
    347a:	85 ff       	sbrs	r24, 5
    347c:	fc cf       	rjmp	.-8      	; 0x3476 <__stack+0x477>
	USART_PutChar(&USARTC0, increment);
    347e:	c3 52       	subi	r28, 0x23	; 35
    3480:	df 4f       	sbci	r29, 0xFF	; 255
    3482:	38 81       	ld	r19, Y
    3484:	cd 5d       	subi	r28, 0xDD	; 221
    3486:	d0 40       	sbci	r29, 0x00	; 0
    3488:	30 93 a0 08 	sts	0x08A0, r19
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    348c:	80 91 a1 08 	lds	r24, 0x08A1
    3490:	85 ff       	sbrs	r24, 5
    3492:	fc cf       	rjmp	.-8      	; 0x348c <__stack+0x48d>
	USART_PutChar(&USARTC0, curr_range);
    3494:	c1 52       	subi	r28, 0x21	; 33
    3496:	df 4f       	sbci	r29, 0xFF	; 255
    3498:	48 81       	ld	r20, Y
    349a:	cf 5d       	subi	r28, 0xDF	; 223
    349c:	d0 40       	sbci	r29, 0x00	; 0
    349e:	40 93 a0 08 	sts	0x08A0, r20
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    34a2:	80 91 a1 08 	lds	r24, 0x08A1
    34a6:	85 ff       	sbrs	r24, 5
    34a8:	fc cf       	rjmp	.-8      	; 0x34a2 <__stack+0x4a3>
	USART_PutChar(&USARTC0, k>>8);
    34aa:	10 92 a0 08 	sts	0x08A0, r1
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    34ae:	80 91 a1 08 	lds	r24, 0x08A1
    34b2:	85 ff       	sbrs	r24, 5
    34b4:	fc cf       	rjmp	.-8      	; 0x34ae <__stack+0x4af>
	USART_PutChar(&USARTC0, k);
    34b6:	c3 53       	subi	r28, 0x33	; 51
    34b8:	df 4f       	sbci	r29, 0xFF	; 255
    34ba:	58 81       	ld	r21, Y
    34bc:	cd 5c       	subi	r28, 0xCD	; 205
    34be:	d0 40       	sbci	r29, 0x00	; 0
    34c0:	50 93 a0 08 	sts	0x08A0, r21
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	3d c0       	rjmp	.+122    	; 0x3542 <__stack+0x543>

	for(j = 0; j < k; j++)
	{
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    34c8:	80 91 a1 08 	lds	r24, 0x08A1
    34cc:	85 ff       	sbrs	r24, 5
    34ce:	fc cf       	rjmp	.-8      	; 0x34c8 <__stack+0x4c9>
		USART_PutChar(&USARTC0, mag[j]>>8);
    34d0:	a2 2f       	mov	r26, r18
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	fd 01       	movw	r30, r26
    34d6:	ee 0f       	add	r30, r30
    34d8:	ff 1f       	adc	r31, r31
    34da:	c0 52       	subi	r28, 0x20	; 32
    34dc:	df 4f       	sbci	r29, 0xFF	; 255
    34de:	88 81       	ld	r24, Y
    34e0:	99 81       	ldd	r25, Y+1	; 0x01
    34e2:	c0 5e       	subi	r28, 0xE0	; 224
    34e4:	d0 40       	sbci	r29, 0x00	; 0
    34e6:	e8 0f       	add	r30, r24
    34e8:	f9 1f       	adc	r31, r25
    34ea:	01 90       	ld	r0, Z+
    34ec:	f0 81       	ld	r31, Z
    34ee:	e0 2d       	mov	r30, r0
    34f0:	8f 2f       	mov	r24, r31
    34f2:	99 27       	eor	r25, r25
    34f4:	87 fd       	sbrc	r24, 7
    34f6:	9a 95       	dec	r25
    34f8:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    34fc:	80 91 a1 08 	lds	r24, 0x08A1
    3500:	85 ff       	sbrs	r24, 5
    3502:	fc cf       	rjmp	.-8      	; 0x34fc <__stack+0x4fd>
		USART_PutChar(&USARTC0, mag[j]);
    3504:	e0 93 a0 08 	sts	0x08A0, r30
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3508:	80 91 a1 08 	lds	r24, 0x08A1
    350c:	85 ff       	sbrs	r24, 5
    350e:	fc cf       	rjmp	.-8      	; 0x3508 <__stack+0x509>
		USART_PutChar(&USARTC0, phase[j]>>8);
    3510:	aa 0f       	add	r26, r26
    3512:	bb 1f       	adc	r27, r27
    3514:	ce 51       	subi	r28, 0x1E	; 30
    3516:	df 4f       	sbci	r29, 0xFF	; 255
    3518:	e8 81       	ld	r30, Y
    351a:	f9 81       	ldd	r31, Y+1	; 0x01
    351c:	c2 5e       	subi	r28, 0xE2	; 226
    351e:	d0 40       	sbci	r29, 0x00	; 0
    3520:	ae 0f       	add	r26, r30
    3522:	bf 1f       	adc	r27, r31
    3524:	ed 91       	ld	r30, X+
    3526:	fc 91       	ld	r31, X
    3528:	8f 2f       	mov	r24, r31
    352a:	99 27       	eor	r25, r25
    352c:	87 fd       	sbrc	r24, 7
    352e:	9a 95       	dec	r25
    3530:	80 93 a0 08 	sts	0x08A0, r24
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3534:	80 91 a1 08 	lds	r24, 0x08A1
    3538:	85 ff       	sbrs	r24, 5
    353a:	fc cf       	rjmp	.-8      	; 0x3534 <__stack+0x535>
		USART_PutChar(&USARTC0, phase[j]);
    353c:	e0 93 a0 08 	sts	0x08A0, r30
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, k>>8);
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
	USART_PutChar(&USARTC0, k);

	for(j = 0; j < k; j++)
    3540:	2f 5f       	subi	r18, 0xFF	; 255
    3542:	c3 53       	subi	r28, 0x33	; 51
    3544:	df 4f       	sbci	r29, 0xFF	; 255
    3546:	f8 81       	ld	r31, Y
    3548:	cd 5c       	subi	r28, 0xCD	; 205
    354a:	d0 40       	sbci	r29, 0x00	; 0
    354c:	2f 17       	cp	r18, r31
    354e:	08 f4       	brcc	.+2      	; 0x3552 <__stack+0x553>
    3550:	bb cf       	rjmp	.-138    	; 0x34c8 <__stack+0x4c9>
		do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, I[j]);
	}

*/
	do{} while(!USART_IsTXDataRegisterEmpty(&USARTC0));
    3552:	80 91 a1 08 	lds	r24, 0x08A1
    3556:	85 ff       	sbrs	r24, 5
    3558:	fc cf       	rjmp	.-8      	; 0x3552 <__stack+0x553>
		USART_PutChar(&USARTC0,ACV);
    355a:	82 e0       	ldi	r24, 0x02	; 2
    355c:	80 93 a0 08 	sts	0x08A0, r24

	return k;

}
    3560:	c1 53       	subi	r28, 0x31	; 49
    3562:	df 4f       	sbci	r29, 0xFF	; 255
    3564:	88 81       	ld	r24, Y
    3566:	cf 5c       	subi	r28, 0xCF	; 207
    3568:	d0 40       	sbci	r29, 0x00	; 0
    356a:	c0 53       	subi	r28, 0x30	; 48
    356c:	df 4f       	sbci	r29, 0xFF	; 255
    356e:	98 81       	ld	r25, Y
    3570:	c0 5d       	subi	r28, 0xD0	; 208
    3572:	d0 40       	sbci	r29, 0x00	; 0
    3574:	cc 51       	subi	r28, 0x1C	; 28
    3576:	df 4f       	sbci	r29, 0xFF	; 255
    3578:	28 81       	ld	r18, Y
    357a:	39 81       	ldd	r19, Y+1	; 0x01
    357c:	c4 5e       	subi	r28, 0xE4	; 228
    357e:	d0 40       	sbci	r29, 0x00	; 0
    3580:	2d bf       	out	0x3d, r18	; 61
    3582:	3e bf       	out	0x3e, r19	; 62
    3584:	c1 51       	subi	r28, 0x11	; 17
    3586:	df 4f       	sbci	r29, 0xFF	; 255
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	1f 91       	pop	r17
    3592:	0f 91       	pop	r16
    3594:	ff 90       	pop	r15
    3596:	ef 90       	pop	r14
    3598:	df 90       	pop	r13
    359a:	cf 90       	pop	r12
    359c:	bf 90       	pop	r11
    359e:	af 90       	pop	r10
    35a0:	9f 90       	pop	r9
    35a2:	8f 90       	pop	r8
    35a4:	7f 90       	pop	r7
    35a6:	6f 90       	pop	r6
    35a8:	5f 90       	pop	r5
    35aa:	4f 90       	pop	r4
    35ac:	3f 90       	pop	r3
    35ae:	2f 90       	pop	r2
    35b0:	08 95       	ret

000035b2 <main>:
int16_t CA_test (char* name, int16_t wait_time, int16_t step_voltage, int16_t step_width, int16_t quiet_time, int16_t sample_rate, uint8_t steps, uint8_t curr_range);
USART_data_t USART_data;

void send_string(char* string);
int main()
{
    35b2:	2f 92       	push	r2
    35b4:	3f 92       	push	r3
    35b6:	4f 92       	push	r4
    35b8:	5f 92       	push	r5
    35ba:	6f 92       	push	r6
    35bc:	7f 92       	push	r7
    35be:	8f 92       	push	r8
    35c0:	9f 92       	push	r9
    35c2:	af 92       	push	r10
    35c4:	cf 92       	push	r12
    35c6:	df 92       	push	r13
    35c8:	ef 92       	push	r14
    35ca:	ff 92       	push	r15
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	df 93       	push	r29
    35d2:	cf 93       	push	r28
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
    35d8:	67 97       	sbiw	r28, 0x17	; 23
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	de bf       	out	0x3e, r29	; 62
	               SPI_PRESCALER_DIV4_gc);*/

	//4 DIR SWITCH 
	/////////////////////////////////
	//setup pins as input
	PORTA.DIRCLR = PIN4_bm;
    35de:	e0 e0       	ldi	r30, 0x00	; 0
    35e0:	f6 e0       	ldi	r31, 0x06	; 6
    35e2:	90 e1       	ldi	r25, 0x10	; 16
    35e4:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    35e6:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.DIRCLR = PIN5_bm;
    35e8:	80 e2       	ldi	r24, 0x20	; 32
    35ea:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    35ec:	95 8b       	std	Z+21, r25	; 0x15
	PORTA.DIRCLR = PIN6_bm;
    35ee:	80 e4       	ldi	r24, 0x40	; 64
    35f0:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    35f2:	96 8b       	std	Z+22, r25	; 0x16
	PORTA.DIRCLR = PIN7_bm;
    35f4:	80 e8       	ldi	r24, 0x80	; 128
    35f6:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    35f8:	97 8b       	std	Z+23, r25	; 0x17


	//SPST SWITCHES
	/////////////////////////////////
    //setup pins as output
	PORTE.DIRSET = PIN1_bm; //switch0
    35fa:	e0 e8       	ldi	r30, 0x80	; 128
    35fc:	f6 e0       	ldi	r31, 0x06	; 6
    35fe:	32 e0       	ldi	r19, 0x02	; 2
    3600:	31 83       	std	Z+1, r19	; 0x01
	PORTE.DIRSET = PIN0_bm; //switch1
    3602:	21 e0       	ldi	r18, 0x01	; 1
    3604:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRSET = PIN2_bm; //switch2
    3606:	94 e0       	ldi	r25, 0x04	; 4
    3608:	91 83       	std	Z+1, r25	; 0x01
	PORTE.DIRSET = PIN3_bm; //switch3
    360a:	88 e0       	ldi	r24, 0x08	; 8
    360c:	81 83       	std	Z+1, r24	; 0x01

	//set initital switch positions
	PORTE.OUTCLR = PIN1_bm; //switch0
    360e:	36 83       	std	Z+6, r19	; 0x06
	PORTE.OUTSET = PIN0_bm; //switch1
    3610:	25 83       	std	Z+5, r18	; 0x05
	PORTE.OUTCLR = PIN2_bm; //switch2
    3612:	96 83       	std	Z+6, r25	; 0x06
	PORTE.OUTCLR = PIN3_bm; //switch3
    3614:	86 83       	std	Z+6, r24	; 0x06
	/////////////////////////////////


	//DAC
	/////////////////////////////////
	DAC_DualChannel_Enable( &DACB,DAC_REFSEL_AVCC_gc,false,DAC_CONINTVAL,DAC_REFRESH);
    3616:	80 e2       	ldi	r24, 0x20	; 32
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	68 e0       	ldi	r22, 0x08	; 8
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	00 e0       	ldi	r16, 0x00	; 0
    3622:	0e 94 73 28 	call	0x50e6	; 0x50e6 <DAC_DualChannel_Enable>
	//1.65V reference
	while (DAC_Channel_DataEmpty(&DACB, CH1) == false) {}
    3626:	80 e2       	ldi	r24, 0x20	; 32
    3628:	93 e0       	ldi	r25, 0x03	; 3
    362a:	61 e0       	ldi	r22, 0x01	; 1
    362c:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    3630:	88 23       	and	r24, r24
    3632:	c9 f3       	breq	.-14     	; 0x3626 <main+0x74>
		DAC_Channel_Write(&DACB,2048,CH1);
    3634:	80 e2       	ldi	r24, 0x20	; 32
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	78 e0       	ldi	r23, 0x08	; 8
    363c:	41 e0       	ldi	r20, 0x01	; 1
    363e:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
	//intitial
	while (DAC_Channel_DataEmpty(&DACB, CH0) == false) {}
    3642:	80 e2       	ldi	r24, 0x20	; 32
    3644:	93 e0       	ldi	r25, 0x03	; 3
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	0e 94 8e 28 	call	0x511c	; 0x511c <DAC_Channel_DataEmpty>
    364c:	88 23       	and	r24, r24
    364e:	c9 f3       	breq	.-14     	; 0x3642 <main+0x90>
		DAC_Channel_Write(&DACB,2048,CH0);
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	93 e0       	ldi	r25, 0x03	; 3
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	78 e0       	ldi	r23, 0x08	; 8
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	0e 94 85 28 	call	0x510a	; 0x510a <DAC_Channel_Write>
	/////////////////////////////////

	//USART
	/////////////////////////////////
	//TX as output
	PORTC.DIRSET = PIN3_bm;
    365e:	e0 e4       	ldi	r30, 0x40	; 64
    3660:	f6 e0       	ldi	r31, 0x06	; 6
    3662:	88 e0       	ldi	r24, 0x08	; 8
    3664:	81 83       	std	Z+1, r24	; 0x01
	//RX as input
	PORTC.DIRCLR = PIN2_bm;
    3666:	84 e0       	ldi	r24, 0x04	; 4
    3668:	82 83       	std	Z+2, r24	; 0x02
	USART_InterruptDriver_Initialize(&USART_data, &USARTC0, USART_DREINTLVL_LO_gc);
    366a:	85 e8       	ldi	r24, 0x85	; 133
    366c:	92 e2       	ldi	r25, 0x22	; 34
    366e:	60 ea       	ldi	r22, 0xA0	; 160
    3670:	78 e0       	ldi	r23, 0x08	; 8
    3672:	41 e0       	ldi	r20, 0x01	; 1
    3674:	0e 94 66 2c 	call	0x58cc	; 0x58cc <USART_InterruptDriver_Initialize>
	// USARTD0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(&USARTC0, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    3678:	e0 ea       	ldi	r30, 0xA0	; 160
    367a:	f8 e0       	ldi	r31, 0x08	; 8
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	85 83       	std	Z+5, r24	; 0x05
		//enable interrupts
	USART_RxdInterruptLevel_Set(&USARTC0, USART_RXCINTLVL_LO_gc);
    3680:	80 91 a3 08 	lds	r24, 0x08A3
    3684:	8f 7c       	andi	r24, 0xCF	; 207
    3686:	80 61       	ori	r24, 0x10	; 16
    3688:	83 83       	std	Z+3, r24	; 0x03
	//BUAD RATE to 9600
	USART_Baudrate_Set(&USARTC0, 12 , 0);
    368a:	8c e0       	ldi	r24, 0x0C	; 12
    368c:	86 83       	std	Z+6, r24	; 0x06
    368e:	17 82       	std	Z+7, r1	; 0x07
	USART_Rx_Enable(&USARTC0);
    3690:	80 91 a4 08 	lds	r24, 0x08A4
    3694:	80 61       	ori	r24, 0x10	; 16
    3696:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USARTC0);
    3698:	80 91 a4 08 	lds	r24, 0x08A4
    369c:	88 60       	ori	r24, 0x08	; 8
    369e:	84 83       	std	Z+4, r24	; 0x04
	/////////////////////////////////

	//ADC
	/////////////////////////////////
	// Move stored calibration values to ADC A. 
	ADC_CalibrationValues_Load(&ADCA);
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	92 e0       	ldi	r25, 0x02	; 2
    36a4:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <ADC_CalibrationValues_Load>
	// Set up ADC A to have signed conversion mode and 12 bit resolution. 
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Signed, ADC_RESOLUTION_12BIT_gc);
    36a8:	e0 e0       	ldi	r30, 0x00	; 0
    36aa:	f2 e0       	ldi	r31, 0x02	; 2
    36ac:	80 91 01 02 	lds	r24, 0x0201
    36b0:	89 7e       	andi	r24, 0xE9	; 233
    36b2:	80 61       	ori	r24, 0x10	; 16
    36b4:	81 83       	std	Z+1, r24	; 0x01
	// Set sample rate.
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER);
    36b6:	80 91 04 02 	lds	r24, 0x0204
    36ba:	88 7f       	andi	r24, 0xF8	; 248
    36bc:	81 60       	ori	r24, 0x01	; 1
    36be:	84 83       	std	Z+4, r24	; 0x04
	// Set reference voltage on ADC A to be VCC internal
	ADC_Reference_Config(&ADCA, ADC_REFSEL_VCC_gc);
    36c0:	80 91 02 02 	lds	r24, 0x0202
    36c4:	8f 7c       	andi	r24, 0xCF	; 207
    36c6:	80 61       	ori	r24, 0x10	; 16
    36c8:	82 83       	std	Z+2, r24	; 0x02
	//configure input mode to differential
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,ADC_CH_INPUTMODE_DIFF_gc,ADC_DRIVER_CH_GAIN_NONE);
    36ca:	80 91 20 02 	lds	r24, 0x0220
    36ce:	80 7e       	andi	r24, 0xE0	; 224
    36d0:	82 60       	ori	r24, 0x02	; 2
    36d2:	80 93 20 02 	sts	0x0220, r24
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,ADC_CH_INPUTMODE_DIFF_gc,ADC_DRIVER_CH_GAIN_NONE);
    36d6:	80 91 28 02 	lds	r24, 0x0228
    36da:	80 7e       	andi	r24, 0xE0	; 224
    36dc:	82 60       	ori	r24, 0x02	; 2
    36de:	80 93 28 02 	sts	0x0228, r24
	//configure pins
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN1_gc);
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	e0 e2       	ldi	r30, 0x20	; 32
    36e6:	f2 e0       	ldi	r31, 0x02	; 2
    36e8:	81 83       	std	Z+1, r24	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN2_gc, ADC_CH_MUXNEG_PIN1_gc);
    36ea:	81 e1       	ldi	r24, 0x11	; 17
    36ec:	e8 e2       	ldi	r30, 0x28	; 40
    36ee:	f2 e0       	ldi	r31, 0x02	; 2
    36f0:	81 83       	std	Z+1, r24	; 0x01
	//enable adc
	ADC_Enable(&ADCA);
    36f2:	80 91 00 02 	lds	r24, 0x0200
    36f6:	81 60       	ori	r24, 0x01	; 1
    36f8:	80 93 00 02 	sts	0x0200, r24

	//LCD
	/////////////////////////////////
	
	//settings in lcdconf.h
	lcdInit();
    36fc:	0e 94 4b 2a 	call	0x5496	; 0x5496 <lcdInit>
	lcdInit();
    3700:	0e 94 4b 2a 	call	0x5496	; 0x5496 <lcdInit>
	lcdClear();
    3704:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
	lcdHome();
    3708:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>
	lcdPrintData("CheapStat",9);
    370c:	84 e2       	ldi	r24, 0x24	; 36
    370e:	90 e2       	ldi	r25, 0x20	; 32
    3710:	69 e0       	ldi	r22, 0x09	; 9
    3712:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    3716:	80 e1       	ldi	r24, 0x10	; 16
    3718:	97 e2       	ldi	r25, 0x27	; 39
    371a:	22 e3       	ldi	r18, 0x32	; 50
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	f9 01       	movw	r30, r18
    3720:	31 97       	sbiw	r30, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <main+0x16e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3724:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3726:	d9 f7       	brne	.-10     	; 0x371e <main+0x16c>
	_delay_ms(1000);
	/////////////////////////////////
	
	//USER INTERFACE
	/////////////////////////////////
	status = PROFILE_SEL; 
    3728:	19 82       	std	Y+1, r1	; 0x01
	profile_index = 0;
    372a:	1a 82       	std	Y+2, r1	; 0x02
	profile_opt_index = OPT_START;
    372c:	1b 82       	std	Y+3, r1	; 0x03
	profile_edit_index = 0;
    372e:	1c 82       	std	Y+4, r1	; 0x04
	profile_edit_sel = EDIT_NOSEL;
    3730:	1d 82       	std	Y+5, r1	; 0x05
    3732:	00 e0       	ldi	r16, 0x00	; 0
    3734:	10 e0       	ldi	r17, 0x00	; 0

	//PROFILES (EEPROM)
	/////////////////////////////////
	//copy profiles from EEPROM to SRAM
	for(i = 0; i < PROFILES_LENGTH; i++)
		eeprom_read_block((void*)&(profiles[i]), (const void*)&(profilesEE[i]), sizeof(profile));
    3736:	b8 01       	movw	r22, r16
    3738:	60 50       	subi	r22, 0x00	; 0
    373a:	70 40       	sbci	r23, 0x00	; 0
    373c:	c8 01       	movw	r24, r16
    373e:	8a 5b       	subi	r24, 0xBA	; 186
    3740:	9e 4d       	sbci	r25, 0xDE	; 222
    3742:	4d e1       	ldi	r20, 0x1D	; 29
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	0e 94 23 32 	call	0x6446	; 0x6446 <__eerd_block_x32a4>
    374a:	03 5e       	subi	r16, 0xE3	; 227
    374c:	1f 4f       	sbci	r17, 0xFF	; 255
	/////////////////////////////////

	//PROFILES (EEPROM)
	/////////////////////////////////
	//copy profiles from EEPROM to SRAM
	for(i = 0; i < PROFILES_LENGTH; i++)
    374e:	21 e0       	ldi	r18, 0x01	; 1
    3750:	0f 33       	cpi	r16, 0x3F	; 63
    3752:	12 07       	cpc	r17, r18
    3754:	81 f7       	brne	.-32     	; 0x3736 <main+0x184>
		eeprom_read_block((void*)&(profiles[i]), (const void*)&(profilesEE[i]), sizeof(profile));
	/////////////////////////////////

	//INTERRUPTS
	/////////////////////////////////
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
    3756:	80 91 a2 00 	lds	r24, 0x00A2
    375a:	81 60       	ori	r24, 0x01	; 1
    375c:	e0 ea       	ldi	r30, 0xA0	; 160
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3762:	78 94       	sei
    3764:	00 e0       	ldi	r16, 0x00	; 0
    3766:	10 e0       	ldi	r17, 0x00	; 0

*/


	for(i = 0; i < PROFILES_LENGTH; i++)
		eeprom_write_block((const void*)&(profiles[i]), (void*)&(profilesEE[i]), sizeof(profile));
    3768:	b8 01       	movw	r22, r16
    376a:	60 50       	subi	r22, 0x00	; 0
    376c:	70 40       	sbci	r23, 0x00	; 0
    376e:	c8 01       	movw	r24, r16
    3770:	8a 5b       	subi	r24, 0xBA	; 186
    3772:	9e 4d       	sbci	r25, 0xDE	; 222
    3774:	4d e1       	ldi	r20, 0x1D	; 29
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	0e 94 2f 32 	call	0x645e	; 0x645e <__eewr_block_x32a4>
    377c:	03 5e       	subi	r16, 0xE3	; 227
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
	profiles[10].curr_range = RANGE_10UA;

*/


	for(i = 0; i < PROFILES_LENGTH; i++)
    3780:	31 e0       	ldi	r19, 0x01	; 1
    3782:	0f 33       	cpi	r16, 0x3F	; 63
    3784:	13 07       	cpc	r17, r19
    3786:	81 f7       	brne	.-32     	; 0x3768 <main+0x1b6>
			lcdGotoXY(0,1);
			lcdPrintData("Test Complete",13);
			//lcdGotoXY(0,2);
			//lcdPrintData("~Store Results?",15);

			while(buttonHandler(profiles,&status,&profile_index,&profile_opt_index,&profile_edit_index,&profile_edit_sel,&length)!=1) {}
    3788:	12 e0       	ldi	r17, 0x02	; 2
    378a:	21 2e       	mov	r2, r17
    378c:	31 2c       	mov	r3, r1
    378e:	2c 0e       	add	r2, r28
    3790:	3d 1e       	adc	r3, r29
				}
				else if(profiles[profile_index].type == CA)
				{
					lcdPrintData(" ",1);
					lcdPrintData("Steps=",6);
					sprintf(temp_string,"%2d",profiles[profile_index].op6);
    3792:	b8 e0       	ldi	r27, 0x08	; 8
    3794:	8b 2e       	mov	r8, r27
    3796:	91 2c       	mov	r9, r1
    3798:	8c 0e       	add	r8, r28
    379a:	9d 1e       	adc	r9, r29
				
				if(profiles[profile_index].type == ACV)
				{
					lcdPrintData(" ",1);
					lcdPrintData("Incr=",5);
					sprintf(temp_string,"%4d",profiles[profile_index].op6);
    379c:	a8 e8       	ldi	r26, 0x88	; 136
    379e:	6a 2e       	mov	r6, r26
    37a0:	a0 e2       	ldi	r26, 0x20	; 32
    37a2:	7a 2e       	mov	r7, r26
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == LSV)
				{
					lcdPrintData("SR=",3);
					sprintf(temp_string,"%3d",profiles[profile_index].op5);
    37a4:	fa e7       	ldi	r31, 0x7A	; 122
    37a6:	4f 2e       	mov	r4, r31
    37a8:	f0 e2       	ldi	r31, 0x20	; 32
    37aa:	5f 2e       	mov	r5, r31

	//MAIN LOOP
	while(1)
	{
		//for selecting profiles
		if(status == PROFILE_SEL)
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	88 23       	and	r24, r24
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <main+0x202>
    37b2:	87 c0       	rjmp	.+270    	; 0x38c2 <main+0x310>
		{
			//clear display
			lcdClear();
    37b4:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
			lcdHome();
    37b8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>

			//determine where to start list
			if(profile_index > 1)
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	82 30       	cpi	r24, 0x02	; 2
    37c0:	18 f0       	brcs	.+6      	; 0x37c8 <main+0x216>
				index = profile_index-2;
    37c2:	18 2f       	mov	r17, r24
    37c4:	12 50       	subi	r17, 0x02	; 2
    37c6:	0a c0       	rjmp	.+20     	; 0x37dc <main+0x22a>
			else
				index = 0;

			//first line
			if(profile_index == 0)
    37c8:	88 23       	and	r24, r24
    37ca:	39 f4       	brne	.+14     	; 0x37da <main+0x228>
				lcdPrintData("~",1);
    37cc:	8e e2       	ldi	r24, 0x2E	; 46
    37ce:	90 e2       	ldi	r25, 0x20	; 32
    37d0:	61 e0       	ldi	r22, 0x01	; 1
    37d2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
    37d6:	10 e0       	ldi	r17, 0x00	; 0
    37d8:	06 c0       	rjmp	.+12     	; 0x37e6 <main+0x234>
    37da:	10 e0       	ldi	r17, 0x00	; 0
			else
				lcdPrintData(" ",1);
    37dc:	80 e3       	ldi	r24, 0x30	; 48
    37de:	90 e2       	ldi	r25, 0x20	; 32
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			lcdPrintData(profiles[index].name, 15);
    37e6:	01 2f       	mov	r16, r17
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    37ea:	8d e1       	ldi	r24, 0x1D	; 29
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	fc 01       	movw	r30, r24
    37f0:	0e 9f       	mul	r16, r30
    37f2:	c0 01       	movw	r24, r0
    37f4:	0f 9f       	mul	r16, r31
    37f6:	90 0d       	add	r25, r0
    37f8:	1e 9f       	mul	r17, r30
    37fa:	90 0d       	add	r25, r0
    37fc:	11 24       	eor	r1, r1
    37fe:	8a 5b       	subi	r24, 0xBA	; 186
    3800:	9e 4d       	sbci	r25, 0xDE	; 222
    3802:	6f e0       	ldi	r22, 0x0F	; 15
    3804:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

			//second line
			lcdGotoXY(0,1);
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	61 e0       	ldi	r22, 0x01	; 1
    380c:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			if(profile_index == 1)
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	81 30       	cpi	r24, 0x01	; 1
    3814:	19 f4       	brne	.+6      	; 0x381c <main+0x26a>
				lcdPrintData("~",1);
    3816:	8e e2       	ldi	r24, 0x2E	; 46
    3818:	90 e2       	ldi	r25, 0x20	; 32
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <main+0x26e>
			else
				lcdPrintData(" ",1);
    381c:	80 e3       	ldi	r24, 0x30	; 48
    381e:	90 e2       	ldi	r25, 0x20	; 32
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			lcdPrintData(profiles[index+1].name, 15);
    3826:	0f 5f       	subi	r16, 0xFF	; 255
    3828:	1f 4f       	sbci	r17, 0xFF	; 255
    382a:	8d e1       	ldi	r24, 0x1D	; 29
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	9c 01       	movw	r18, r24
    3830:	02 9f       	mul	r16, r18
    3832:	c0 01       	movw	r24, r0
    3834:	03 9f       	mul	r16, r19
    3836:	90 0d       	add	r25, r0
    3838:	12 9f       	mul	r17, r18
    383a:	90 0d       	add	r25, r0
    383c:	11 24       	eor	r1, r1
    383e:	01 50       	subi	r16, 0x01	; 1
    3840:	10 40       	sbci	r17, 0x00	; 0
    3842:	8a 5b       	subi	r24, 0xBA	; 186
    3844:	9e 4d       	sbci	r25, 0xDE	; 222
    3846:	6f e0       	ldi	r22, 0x0F	; 15
    3848:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

			//third line
			lcdGotoXY(0,2);
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	62 e0       	ldi	r22, 0x02	; 2
    3850:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			if(profile_index > 1)
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	82 30       	cpi	r24, 0x02	; 2
    3858:	18 f0       	brcs	.+6      	; 0x3860 <main+0x2ae>
				lcdPrintData("~",1);
    385a:	8e e2       	ldi	r24, 0x2E	; 46
    385c:	90 e2       	ldi	r25, 0x20	; 32
    385e:	02 c0       	rjmp	.+4      	; 0x3864 <main+0x2b2>
			else
				lcdPrintData(" ",1);
    3860:	80 e3       	ldi	r24, 0x30	; 48
    3862:	90 e2       	ldi	r25, 0x20	; 32
    3864:	61 e0       	ldi	r22, 0x01	; 1
    3866:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			lcdPrintData(profiles[index+2].name, 15);
    386a:	0e 5f       	subi	r16, 0xFE	; 254
    386c:	1f 4f       	sbci	r17, 0xFF	; 255
    386e:	8d e1       	ldi	r24, 0x1D	; 29
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	fc 01       	movw	r30, r24
    3874:	0e 9f       	mul	r16, r30
    3876:	c0 01       	movw	r24, r0
    3878:	0f 9f       	mul	r16, r31
    387a:	90 0d       	add	r25, r0
    387c:	1e 9f       	mul	r17, r30
    387e:	90 0d       	add	r25, r0
    3880:	11 24       	eor	r1, r1
    3882:	8a 5b       	subi	r24, 0xBA	; 186
    3884:	9e 4d       	sbci	r25, 0xDE	; 222
    3886:	6f e0       	ldi	r22, 0x0F	; 15
    3888:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
		
			while(buttonHandler(profiles,&status,&profile_index,&profile_opt_index,&profile_edit_index,&profile_edit_sel,&length)!=1) {}
    388c:	86 e4       	ldi	r24, 0x46	; 70
    388e:	91 e2       	ldi	r25, 0x21	; 33
    3890:	be 01       	movw	r22, r28
    3892:	6f 5f       	subi	r22, 0xFF	; 255
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	a1 01       	movw	r20, r2
    3898:	9e 01       	movw	r18, r28
    389a:	2d 5f       	subi	r18, 0xFD	; 253
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    389e:	8e 01       	movw	r16, r28
    38a0:	0c 5f       	subi	r16, 0xFC	; 252
    38a2:	1f 4f       	sbci	r17, 0xFF	; 255
    38a4:	e5 e0       	ldi	r30, 0x05	; 5
    38a6:	ee 2e       	mov	r14, r30
    38a8:	f1 2c       	mov	r15, r1
    38aa:	ec 0e       	add	r14, r28
    38ac:	fd 1e       	adc	r15, r29
    38ae:	b6 e0       	ldi	r27, 0x06	; 6
    38b0:	cb 2e       	mov	r12, r27
    38b2:	d1 2c       	mov	r13, r1
    38b4:	cc 0e       	add	r12, r28
    38b6:	dd 1e       	adc	r13, r29
    38b8:	0e 94 8c 03 	call	0x718	; 0x718 <buttonHandler>
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	31 f7       	brne	.-52     	; 0x388c <main+0x2da>
    38c0:	75 cf       	rjmp	.-278    	; 0x37ac <main+0x1fa>
		}
		//give options for selected profile
		else if(status == PROFILE_OPT)
    38c2:	81 30       	cpi	r24, 0x01	; 1
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <main+0x316>
    38c6:	51 c0       	rjmp	.+162    	; 0x396a <main+0x3b8>
		{
			//clear display
			lcdClear();
    38c8:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
			lcdHome();
    38cc:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>

			//display name
			lcdPrintData(profiles[profile_index].name, 15);
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	2d e1       	ldi	r18, 0x1D	; 29
    38d4:	82 9f       	mul	r24, r18
    38d6:	c0 01       	movw	r24, r0
    38d8:	11 24       	eor	r1, r1
    38da:	8a 5b       	subi	r24, 0xBA	; 186
    38dc:	9e 4d       	sbci	r25, 0xDE	; 222
    38de:	6f e0       	ldi	r22, 0x0F	; 15
    38e0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
		
			//start option
			lcdGotoXY(0,1);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	61 e0       	ldi	r22, 0x01	; 1
    38e8:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			if(profile_opt_index == OPT_START)
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	88 23       	and	r24, r24
    38f0:	19 f4       	brne	.+6      	; 0x38f8 <main+0x346>
				lcdPrintData("~",1);
    38f2:	8e e2       	ldi	r24, 0x2E	; 46
    38f4:	90 e2       	ldi	r25, 0x20	; 32
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <main+0x34a>
			else
				lcdPrintData(" ",1);
    38f8:	80 e3       	ldi	r24, 0x30	; 48
    38fa:	90 e2       	ldi	r25, 0x20	; 32
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			lcdPrintData("start",5);
    3902:	82 e3       	ldi	r24, 0x32	; 50
    3904:	90 e2       	ldi	r25, 0x20	; 32
    3906:	65 e0       	ldi	r22, 0x05	; 5
    3908:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

			//edit option
			lcdGotoXY(0,2);
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	62 e0       	ldi	r22, 0x02	; 2
    3910:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			if(profile_opt_index == OPT_EDIT)
    3914:	8b 81       	ldd	r24, Y+3	; 0x03
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	19 f4       	brne	.+6      	; 0x3920 <main+0x36e>
				lcdPrintData("~",1);
    391a:	8e e2       	ldi	r24, 0x2E	; 46
    391c:	90 e2       	ldi	r25, 0x20	; 32
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <main+0x372>
			else
				lcdPrintData(" ",1);
    3920:	80 e3       	ldi	r24, 0x30	; 48
    3922:	90 e2       	ldi	r25, 0x20	; 32
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			lcdPrintData("edit",4);
    392a:	88 e3       	ldi	r24, 0x38	; 56
    392c:	90 e2       	ldi	r25, 0x20	; 32
    392e:	64 e0       	ldi	r22, 0x04	; 4
    3930:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

			while(buttonHandler(profiles,&status,&profile_index,&profile_opt_index,&profile_edit_index,&profile_edit_sel,&length)!=1) {}
    3934:	86 e4       	ldi	r24, 0x46	; 70
    3936:	91 e2       	ldi	r25, 0x21	; 33
    3938:	be 01       	movw	r22, r28
    393a:	6f 5f       	subi	r22, 0xFF	; 255
    393c:	7f 4f       	sbci	r23, 0xFF	; 255
    393e:	a1 01       	movw	r20, r2
    3940:	9e 01       	movw	r18, r28
    3942:	2d 5f       	subi	r18, 0xFD	; 253
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
    3946:	8e 01       	movw	r16, r28
    3948:	0c 5f       	subi	r16, 0xFC	; 252
    394a:	1f 4f       	sbci	r17, 0xFF	; 255
    394c:	a5 e0       	ldi	r26, 0x05	; 5
    394e:	ea 2e       	mov	r14, r26
    3950:	f1 2c       	mov	r15, r1
    3952:	ec 0e       	add	r14, r28
    3954:	fd 1e       	adc	r15, r29
    3956:	f6 e0       	ldi	r31, 0x06	; 6
    3958:	cf 2e       	mov	r12, r31
    395a:	d1 2c       	mov	r13, r1
    395c:	cc 0e       	add	r12, r28
    395e:	dd 1e       	adc	r13, r29
    3960:	0e 94 8c 03 	call	0x718	; 0x718 <buttonHandler>
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	31 f7       	brne	.-52     	; 0x3934 <main+0x382>
    3968:	21 cf       	rjmp	.-446    	; 0x37ac <main+0x1fa>
		}
		//display during test
		else if(status == PROFILE_TEST)
    396a:	82 30       	cpi	r24, 0x02	; 2
    396c:	09 f0       	breq	.+2      	; 0x3970 <main+0x3be>
    396e:	9b c0       	rjmp	.+310    	; 0x3aa6 <main+0x4f4>
		{
			//clear display
			lcdClear();
    3970:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
			lcdHome();
    3974:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>

			//display name
			lcdPrintData(profiles[profile_index].name, 15);
    3978:	8a 81       	ldd	r24, Y+2	; 0x02
    397a:	2d e1       	ldi	r18, 0x1D	; 29
    397c:	82 9f       	mul	r24, r18
    397e:	c0 01       	movw	r24, r0
    3980:	11 24       	eor	r1, r1
    3982:	8a 5b       	subi	r24, 0xBA	; 186
    3984:	9e 4d       	sbci	r25, 0xDE	; 222
    3986:	6f e0       	ldi	r22, 0x0F	; 15
    3988:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

			lcdGotoXY(0,1);
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			lcdPrintData(" testing...",10);
    3994:	8d e3       	ldi	r24, 0x3D	; 61
    3996:	90 e2       	ldi	r25, 0x20	; 32
    3998:	6a e0       	ldi	r22, 0x0A	; 10
    399a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			

			if(profiles[profile_index].type == SWV)
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	2d e1       	ldi	r18, 0x1D	; 29
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	82 9f       	mul	r24, r18
    39a8:	f0 01       	movw	r30, r0
    39aa:	83 9f       	mul	r24, r19
    39ac:	f0 0d       	add	r31, r0
    39ae:	92 9f       	mul	r25, r18
    39b0:	f0 0d       	add	r31, r0
    39b2:	11 24       	eor	r1, r1
    39b4:	ea 5b       	subi	r30, 0xBA	; 186
    39b6:	fe 4d       	sbci	r31, 0xDE	; 222
    39b8:	87 85       	ldd	r24, Z+15	; 0x0f
    39ba:	88 23       	and	r24, r24
    39bc:	79 f4       	brne	.+30     	; 0x39dc <main+0x42a>
				length = SWV_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2, profiles[profile_index].op3, profiles[profile_index].op4, profiles[profile_index].op5, profiles[profile_index].curr_range);
    39be:	60 89       	ldd	r22, Z+16	; 0x10
    39c0:	71 89       	ldd	r23, Z+17	; 0x11
    39c2:	42 89       	ldd	r20, Z+18	; 0x12
    39c4:	53 89       	ldd	r21, Z+19	; 0x13
    39c6:	24 89       	ldd	r18, Z+20	; 0x14
    39c8:	35 89       	ldd	r19, Z+21	; 0x15
    39ca:	06 89       	ldd	r16, Z+22	; 0x16
    39cc:	17 89       	ldd	r17, Z+23	; 0x17
    39ce:	e0 8c       	ldd	r14, Z+24	; 0x18
    39d0:	f1 8c       	ldd	r15, Z+25	; 0x19
    39d2:	cf 01       	movw	r24, r30
    39d4:	c4 8c       	ldd	r12, Z+28	; 0x1c
    39d6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <SWV_test>
    39da:	50 c0       	rjmp	.+160    	; 0x3a7c <main+0x4ca>
			else if(profiles[profile_index].type == CV)
    39dc:	81 30       	cpi	r24, 0x01	; 1
    39de:	79 f4       	brne	.+30     	; 0x39fe <main+0x44c>
				length = CV_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2, profiles[profile_index].op3, profiles[profile_index].op4, profiles[profile_index].op5, profiles[profile_index].curr_range);
    39e0:	60 89       	ldd	r22, Z+16	; 0x10
    39e2:	71 89       	ldd	r23, Z+17	; 0x11
    39e4:	42 89       	ldd	r20, Z+18	; 0x12
    39e6:	53 89       	ldd	r21, Z+19	; 0x13
    39e8:	24 89       	ldd	r18, Z+20	; 0x14
    39ea:	35 89       	ldd	r19, Z+21	; 0x15
    39ec:	06 89       	ldd	r16, Z+22	; 0x16
    39ee:	17 89       	ldd	r17, Z+23	; 0x17
    39f0:	e0 8c       	ldd	r14, Z+24	; 0x18
    39f2:	f1 8c       	ldd	r15, Z+25	; 0x19
    39f4:	cf 01       	movw	r24, r30
    39f6:	c4 8c       	ldd	r12, Z+28	; 0x1c
    39f8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CV_test>
    39fc:	3f c0       	rjmp	.+126    	; 0x3a7c <main+0x4ca>
			else if(profiles[profile_index].type == ACV)
    39fe:	82 30       	cpi	r24, 0x02	; 2
    3a00:	89 f4       	brne	.+34     	; 0x3a24 <main+0x472>
				length = ACV_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2, profiles[profile_index].op3, profiles[profile_index].op4, profiles[profile_index].op5, profiles[profile_index].op6, profiles[profile_index].curr_range);
    3a02:	60 89       	ldd	r22, Z+16	; 0x10
    3a04:	71 89       	ldd	r23, Z+17	; 0x11
    3a06:	42 89       	ldd	r20, Z+18	; 0x12
    3a08:	53 89       	ldd	r21, Z+19	; 0x13
    3a0a:	24 89       	ldd	r18, Z+20	; 0x14
    3a0c:	35 89       	ldd	r19, Z+21	; 0x15
    3a0e:	06 89       	ldd	r16, Z+22	; 0x16
    3a10:	17 89       	ldd	r17, Z+23	; 0x17
    3a12:	e0 8c       	ldd	r14, Z+24	; 0x18
    3a14:	f1 8c       	ldd	r15, Z+25	; 0x19
    3a16:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3a18:	d3 8c       	ldd	r13, Z+27	; 0x1b
    3a1a:	cf 01       	movw	r24, r30
    3a1c:	a4 8c       	ldd	r10, Z+28	; 0x1c
    3a1e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <ACV_test>
    3a22:	2c c0       	rjmp	.+88     	; 0x3a7c <main+0x4ca>
			else if(profiles[profile_index].type == LSV)
    3a24:	83 30       	cpi	r24, 0x03	; 3
    3a26:	79 f4       	brne	.+30     	; 0x3a46 <main+0x494>
				length = LSV_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2, profiles[profile_index].op3, profiles[profile_index].op4, profiles[profile_index].op5, profiles[profile_index].curr_range);
    3a28:	60 89       	ldd	r22, Z+16	; 0x10
    3a2a:	71 89       	ldd	r23, Z+17	; 0x11
    3a2c:	42 89       	ldd	r20, Z+18	; 0x12
    3a2e:	53 89       	ldd	r21, Z+19	; 0x13
    3a30:	24 89       	ldd	r18, Z+20	; 0x14
    3a32:	35 89       	ldd	r19, Z+21	; 0x15
    3a34:	06 89       	ldd	r16, Z+22	; 0x16
    3a36:	17 89       	ldd	r17, Z+23	; 0x17
    3a38:	e0 8c       	ldd	r14, Z+24	; 0x18
    3a3a:	f1 8c       	ldd	r15, Z+25	; 0x19
    3a3c:	cf 01       	movw	r24, r30
    3a3e:	c4 8c       	ldd	r12, Z+28	; 0x1c
    3a40:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LSV_test>
    3a44:	1b c0       	rjmp	.+54     	; 0x3a7c <main+0x4ca>
			else if(profiles[profile_index].type == CONSTVOLT)
    3a46:	84 30       	cpi	r24, 0x04	; 4
    3a48:	41 f4       	brne	.+16     	; 0x3a5a <main+0x4a8>
				length = CONSTVOLT_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2);
    3a4a:	60 89       	ldd	r22, Z+16	; 0x10
    3a4c:	71 89       	ldd	r23, Z+17	; 0x11
    3a4e:	42 89       	ldd	r20, Z+18	; 0x12
    3a50:	53 89       	ldd	r21, Z+19	; 0x13
    3a52:	cf 01       	movw	r24, r30
    3a54:	0e 94 61 08 	call	0x10c2	; 0x10c2 <CONSTVOLT_test>
    3a58:	11 c0       	rjmp	.+34     	; 0x3a7c <main+0x4ca>
			else if(profiles[profile_index].type == CA)
    3a5a:	85 30       	cpi	r24, 0x05	; 5
    3a5c:	89 f4       	brne	.+34     	; 0x3a80 <main+0x4ce>
				length = CA_test(profiles[profile_index].name, profiles[profile_index].op1, profiles[profile_index].op2, profiles[profile_index].op3, profiles[profile_index].op4, profiles[profile_index].op5, profiles[profile_index].op6, profiles[profile_index].curr_range);
    3a5e:	60 89       	ldd	r22, Z+16	; 0x10
    3a60:	71 89       	ldd	r23, Z+17	; 0x11
    3a62:	42 89       	ldd	r20, Z+18	; 0x12
    3a64:	53 89       	ldd	r21, Z+19	; 0x13
    3a66:	24 89       	ldd	r18, Z+20	; 0x14
    3a68:	35 89       	ldd	r19, Z+21	; 0x15
    3a6a:	06 89       	ldd	r16, Z+22	; 0x16
    3a6c:	17 89       	ldd	r17, Z+23	; 0x17
    3a6e:	e0 8c       	ldd	r14, Z+24	; 0x18
    3a70:	f1 8c       	ldd	r15, Z+25	; 0x19
    3a72:	cf 01       	movw	r24, r30
    3a74:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3a76:	a4 8c       	ldd	r10, Z+28	; 0x1c
    3a78:	0e 94 99 13 	call	0x2732	; 0x2732 <CA_test>
    3a7c:	8e 83       	std	Y+6, r24	; 0x06
    3a7e:	9f 83       	std	Y+7, r25	; 0x07
			
			if(length == -1)
    3a80:	8e 81       	ldd	r24, Y+6	; 0x06
    3a82:	9f 81       	ldd	r25, Y+7	; 0x07
    3a84:	8f 5f       	subi	r24, 0xFF	; 255
    3a86:	9f 4f       	sbci	r25, 0xFF	; 255
    3a88:	59 f4       	brne	.+22     	; 0x3aa0 <main+0x4ee>
    3a8a:	80 e1       	ldi	r24, 0x10	; 16
    3a8c:	97 e2       	ldi	r25, 0x27	; 39
    3a8e:	22 e3       	ldi	r18, 0x32	; 50
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	f9 01       	movw	r30, r18
    3a94:	31 97       	sbiw	r30, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <main+0x4e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9a:	d9 f7       	brne	.-10     	; 0x3a92 <main+0x4e0>
			{
				_delay_ms(1000);
				status = PROFILE_EDIT;
    3a9c:	83 e0       	ldi	r24, 0x03	; 3
    3a9e:	01 c0       	rjmp	.+2      	; 0x3aa2 <main+0x4f0>
			}
			else
				status = PROFILE_RESULTS;
    3aa0:	84 e0       	ldi	r24, 0x04	; 4
    3aa2:	89 83       	std	Y+1, r24	; 0x01
    3aa4:	83 ce       	rjmp	.-762    	; 0x37ac <main+0x1fa>
		}
		else if(status == PROFILE_EDIT)
    3aa6:	83 30       	cpi	r24, 0x03	; 3
    3aa8:	11 f0       	breq	.+4      	; 0x3aae <main+0x4fc>
    3aaa:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <main+0x192c>
		{
			//clear display
			lcdClear();
    3aae:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
			lcdHome();
    3ab2:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>

			//display name
			lcdPrintData(profiles[profile_index].name, 15);
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	2d e1       	ldi	r18, 0x1D	; 29
    3aba:	82 9f       	mul	r24, r18
    3abc:	c0 01       	movw	r24, r0
    3abe:	11 24       	eor	r1, r1
    3ac0:	8a 5b       	subi	r24, 0xBA	; 186
    3ac2:	9e 4d       	sbci	r25, 0xDE	; 222
    3ac4:	6f e0       	ldi	r22, 0x0F	; 15
    3ac6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
		
			//list options
			lcdGotoXY(0,1);
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	61 e0       	ldi	r22, 0x01	; 1
    3ace:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			if(profile_edit_index == 0)
    3ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad4:	88 23       	and	r24, r24
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <main+0x528>
    3ad8:	46 c0       	rjmp	.+140    	; 0x3b66 <main+0x5b4>
			{
				if(profile_edit_sel == EDIT_NOSEL)
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	88 23       	and	r24, r24
    3ade:	19 f4       	brne	.+6      	; 0x3ae6 <main+0x534>
					lcdPrintData("~",1);
    3ae0:	8e e2       	ldi	r24, 0x2E	; 46
    3ae2:	90 e2       	ldi	r25, 0x20	; 32
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <main+0x538>
				else
					lcdPrintData(">",1);
    3ae6:	89 e4       	ldi	r24, 0x49	; 73
    3ae8:	90 e2       	ldi	r25, 0x20	; 32
    3aea:	61 e0       	ldi	r22, 0x01	; 1
    3aec:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				lcdPrintData("Voltammetry=",12);
    3af0:	8b e4       	ldi	r24, 0x4B	; 75
    3af2:	90 e2       	ldi	r25, 0x20	; 32
    3af4:	6c e0       	ldi	r22, 0x0C	; 12
    3af6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	2d e1       	ldi	r18, 0x1D	; 29
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	82 9f       	mul	r24, r18
    3b04:	f0 01       	movw	r30, r0
    3b06:	83 9f       	mul	r24, r19
    3b08:	f0 0d       	add	r31, r0
    3b0a:	92 9f       	mul	r25, r18
    3b0c:	f0 0d       	add	r31, r0
    3b0e:	11 24       	eor	r1, r1
    3b10:	ea 5b       	subi	r30, 0xBA	; 186
    3b12:	fe 4d       	sbci	r31, 0xDE	; 222
    3b14:	87 85       	ldd	r24, Z+15	; 0x0f
    3b16:	88 23       	and	r24, r24
    3b18:	19 f4       	brne	.+6      	; 0x3b20 <main+0x56e>
					lcdPrintData("SWV",3);	
    3b1a:	88 e5       	ldi	r24, 0x58	; 88
    3b1c:	90 e2       	ldi	r25, 0x20	; 32
    3b1e:	19 c0       	rjmp	.+50     	; 0x3b52 <main+0x5a0>
				else if(profiles[profile_index].type == CV)
    3b20:	81 30       	cpi	r24, 0x01	; 1
    3b22:	21 f4       	brne	.+8      	; 0x3b2c <main+0x57a>
					lcdPrintData("CV",2);
    3b24:	8c e5       	ldi	r24, 0x5C	; 92
    3b26:	90 e2       	ldi	r25, 0x20	; 32
    3b28:	62 e0       	ldi	r22, 0x02	; 2
    3b2a:	14 c0       	rjmp	.+40     	; 0x3b54 <main+0x5a2>
				else if(profiles[profile_index].type == ACV)
    3b2c:	82 30       	cpi	r24, 0x02	; 2
    3b2e:	19 f4       	brne	.+6      	; 0x3b36 <main+0x584>
					lcdPrintData("ACV",3);
    3b30:	8f e5       	ldi	r24, 0x5F	; 95
    3b32:	90 e2       	ldi	r25, 0x20	; 32
    3b34:	0e c0       	rjmp	.+28     	; 0x3b52 <main+0x5a0>
				else if(profiles[profile_index].type == LSV)
    3b36:	83 30       	cpi	r24, 0x03	; 3
    3b38:	19 f4       	brne	.+6      	; 0x3b40 <main+0x58e>
					lcdPrintData("LSV",3);
    3b3a:	83 e6       	ldi	r24, 0x63	; 99
    3b3c:	90 e2       	ldi	r25, 0x20	; 32
    3b3e:	09 c0       	rjmp	.+18     	; 0x3b52 <main+0x5a0>
				else if(profiles[profile_index].type == CONSTVOLT)
    3b40:	84 30       	cpi	r24, 0x04	; 4
    3b42:	19 f4       	brne	.+6      	; 0x3b4a <main+0x598>
					lcdPrintData("CONSTVOLT",3);
    3b44:	87 e6       	ldi	r24, 0x67	; 103
    3b46:	90 e2       	ldi	r25, 0x20	; 32
    3b48:	04 c0       	rjmp	.+8      	; 0x3b52 <main+0x5a0>
				else if(profiles[profile_index].type == CA)
    3b4a:	85 30       	cpi	r24, 0x05	; 5
    3b4c:	29 f4       	brne	.+10     	; 0x3b58 <main+0x5a6>
					lcdPrintData("CA",3);
    3b4e:	81 e7       	ldi	r24, 0x71	; 113
    3b50:	90 e2       	ldi	r25, 0x20	; 32
    3b52:	63 e0       	ldi	r22, 0x03	; 3
    3b54:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				lcdGotoXY(0,2);
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	62 e0       	ldi	r22, 0x02	; 2
    3b5c:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				lcdPrintData(" ",1);
    3b60:	80 e3       	ldi	r24, 0x30	; 48
    3b62:	90 e2       	ldi	r25, 0x20	; 32
    3b64:	48 c0       	rjmp	.+144    	; 0x3bf6 <main+0x644>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
					lcdPrintData(temp_string,4);
					lcdPrintData("ms",2);
				}
			}
			else if(profile_edit_index == 1)
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <main+0x5ba>
    3b6a:	2a c1       	rjmp	.+596    	; 0x3dc0 <main+0x80e>
			{
				lcdPrintData(" ",1);
    3b6c:	80 e3       	ldi	r24, 0x30	; 48
    3b6e:	90 e2       	ldi	r25, 0x20	; 32
    3b70:	61 e0       	ldi	r22, 0x01	; 1
    3b72:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				
				lcdPrintData("Voltammetry=",12);
    3b76:	8b e4       	ldi	r24, 0x4B	; 75
    3b78:	90 e2       	ldi	r25, 0x20	; 32
    3b7a:	6c e0       	ldi	r22, 0x0C	; 12
    3b7c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	2d e1       	ldi	r18, 0x1D	; 29
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	82 9f       	mul	r24, r18
    3b8a:	f0 01       	movw	r30, r0
    3b8c:	83 9f       	mul	r24, r19
    3b8e:	f0 0d       	add	r31, r0
    3b90:	92 9f       	mul	r25, r18
    3b92:	f0 0d       	add	r31, r0
    3b94:	11 24       	eor	r1, r1
    3b96:	ea 5b       	subi	r30, 0xBA	; 186
    3b98:	fe 4d       	sbci	r31, 0xDE	; 222
    3b9a:	87 85       	ldd	r24, Z+15	; 0x0f
    3b9c:	88 23       	and	r24, r24
    3b9e:	19 f4       	brne	.+6      	; 0x3ba6 <main+0x5f4>
					lcdPrintData("SWV",3);	
    3ba0:	88 e5       	ldi	r24, 0x58	; 88
    3ba2:	90 e2       	ldi	r25, 0x20	; 32
    3ba4:	19 c0       	rjmp	.+50     	; 0x3bd8 <main+0x626>
				else if(profiles[profile_index].type == CV)
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	21 f4       	brne	.+8      	; 0x3bb2 <main+0x600>
					lcdPrintData("CV",2);
    3baa:	8c e5       	ldi	r24, 0x5C	; 92
    3bac:	90 e2       	ldi	r25, 0x20	; 32
    3bae:	62 e0       	ldi	r22, 0x02	; 2
    3bb0:	14 c0       	rjmp	.+40     	; 0x3bda <main+0x628>
				else if(profiles[profile_index].type == ACV)
    3bb2:	82 30       	cpi	r24, 0x02	; 2
    3bb4:	19 f4       	brne	.+6      	; 0x3bbc <main+0x60a>
					lcdPrintData("ACV",3);
    3bb6:	8f e5       	ldi	r24, 0x5F	; 95
    3bb8:	90 e2       	ldi	r25, 0x20	; 32
    3bba:	0e c0       	rjmp	.+28     	; 0x3bd8 <main+0x626>
				else if(profiles[profile_index].type == LSV)
    3bbc:	83 30       	cpi	r24, 0x03	; 3
    3bbe:	19 f4       	brne	.+6      	; 0x3bc6 <main+0x614>
					lcdPrintData("LSV",3);
    3bc0:	83 e6       	ldi	r24, 0x63	; 99
    3bc2:	90 e2       	ldi	r25, 0x20	; 32
    3bc4:	09 c0       	rjmp	.+18     	; 0x3bd8 <main+0x626>
				else if(profiles[profile_index].type == CONSTVOLT)
    3bc6:	84 30       	cpi	r24, 0x04	; 4
    3bc8:	19 f4       	brne	.+6      	; 0x3bd0 <main+0x61e>
					lcdPrintData("CONSTVOLT",3);
    3bca:	87 e6       	ldi	r24, 0x67	; 103
    3bcc:	90 e2       	ldi	r25, 0x20	; 32
    3bce:	04 c0       	rjmp	.+8      	; 0x3bd8 <main+0x626>
				else if(profiles[profile_index].type == CA)
    3bd0:	85 30       	cpi	r24, 0x05	; 5
    3bd2:	29 f4       	brne	.+10     	; 0x3bde <main+0x62c>
					lcdPrintData("CA",3);
    3bd4:	81 e7       	ldi	r24, 0x71	; 113
    3bd6:	90 e2       	ldi	r25, 0x20	; 32
    3bd8:	63 e0       	ldi	r22, 0x03	; 3
    3bda:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				lcdGotoXY(0,2);
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	62 e0       	ldi	r22, 0x02	; 2
    3be2:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    3be6:	8d 81       	ldd	r24, Y+5	; 0x05
    3be8:	88 23       	and	r24, r24
    3bea:	19 f4       	brne	.+6      	; 0x3bf2 <main+0x640>
					lcdPrintData("~",1);
    3bec:	8e e2       	ldi	r24, 0x2E	; 46
    3bee:	90 e2       	ldi	r25, 0x20	; 32
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <main+0x644>
				else
					lcdPrintData(">",1);
    3bf2:	89 e4       	ldi	r24, 0x49	; 73
    3bf4:	90 e2       	ldi	r25, 0x20	; 32
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				
				if(profiles[profile_index].type == SWV)
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0d e1       	ldi	r16, 0x1D	; 29
    3c02:	10 e0       	ldi	r17, 0x00	; 0
    3c04:	80 9f       	mul	r24, r16
    3c06:	f0 01       	movw	r30, r0
    3c08:	81 9f       	mul	r24, r17
    3c0a:	f0 0d       	add	r31, r0
    3c0c:	90 9f       	mul	r25, r16
    3c0e:	f0 0d       	add	r31, r0
    3c10:	11 24       	eor	r1, r1
    3c12:	ea 5b       	subi	r30, 0xBA	; 186
    3c14:	fe 4d       	sbci	r31, 0xDE	; 222
    3c16:	87 85       	ldd	r24, Z+15	; 0x0f
    3c18:	88 23       	and	r24, r24
    3c1a:	29 f1       	breq	.+74     	; 0x3c66 <main+0x6b4>
					lcdPrintData("Freq=",5);
					sprintf(temp_string,"%3d",profiles[profile_index].op1);
					lcdPrintData(temp_string,3);
					lcdPrintData("Hz",2);
				}
				else if(profiles[profile_index].type == CV)
    3c1c:	81 30       	cpi	r24, 0x01	; 1
    3c1e:	09 f5       	brne	.+66     	; 0x3c62 <main+0x6b0>
				{
					lcdPrintData("Slope=",6);
    3c20:	81 e8       	ldi	r24, 0x81	; 129
    3c22:	90 e2       	ldi	r25, 0x20	; 32
    3c24:	66 e0       	ldi	r22, 0x06	; 6
    3c26:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <main+0x67a>
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <main+0x67c>
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <main+0x67e>
    3c30:	ad b7       	in	r26, 0x3d	; 61
    3c32:	be b7       	in	r27, 0x3e	; 62
    3c34:	11 96       	adiw	r26, 0x01	; 1
    3c36:	ed b7       	in	r30, 0x3d	; 61
    3c38:	fe b7       	in	r31, 0x3e	; 62
    3c3a:	81 82       	std	Z+1, r8	; 0x01
    3c3c:	92 82       	std	Z+2, r9	; 0x02
    3c3e:	12 96       	adiw	r26, 0x02	; 2
    3c40:	6d 92       	st	X+, r6
    3c42:	7c 92       	st	X, r7
    3c44:	13 97       	sbiw	r26, 0x03	; 3
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	80 9f       	mul	r24, r16
    3c4c:	f0 01       	movw	r30, r0
    3c4e:	81 9f       	mul	r24, r17
    3c50:	f0 0d       	add	r31, r0
    3c52:	90 9f       	mul	r25, r16
    3c54:	f0 0d       	add	r31, r0
    3c56:	11 24       	eor	r1, r1
    3c58:	ea 5b       	subi	r30, 0xBA	; 186
    3c5a:	fe 4d       	sbci	r31, 0xDE	; 222
    3c5c:	80 89       	ldd	r24, Z+16	; 0x10
    3c5e:	91 89       	ldd	r25, Z+17	; 0x11
    3c60:	14 c5       	rjmp	.+2600   	; 0x468a <main+0x10d8>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV/s",4);
				}
				else if(profiles[profile_index].type == ACV)
    3c62:	82 30       	cpi	r24, 0x02	; 2
    3c64:	a1 f5       	brne	.+104    	; 0x3cce <main+0x71c>
				{
					lcdPrintData("Freq=",5);
    3c66:	84 e7       	ldi	r24, 0x74	; 116
    3c68:	90 e2       	ldi	r25, 0x20	; 32
    3c6a:	65 e0       	ldi	r22, 0x05	; 5
    3c6c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op1);
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <main+0x6c0>
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <main+0x6c2>
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <main+0x6c4>
    3c76:	ad b7       	in	r26, 0x3d	; 61
    3c78:	be b7       	in	r27, 0x3e	; 62
    3c7a:	11 96       	adiw	r26, 0x01	; 1
    3c7c:	ed b7       	in	r30, 0x3d	; 61
    3c7e:	fe b7       	in	r31, 0x3e	; 62
    3c80:	81 82       	std	Z+1, r8	; 0x01
    3c82:	92 82       	std	Z+2, r9	; 0x02
    3c84:	12 96       	adiw	r26, 0x02	; 2
    3c86:	4d 92       	st	X+, r4
    3c88:	5c 92       	st	X, r5
    3c8a:	13 97       	sbiw	r26, 0x03	; 3
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	80 9f       	mul	r24, r16
    3c92:	f0 01       	movw	r30, r0
    3c94:	81 9f       	mul	r24, r17
    3c96:	f0 0d       	add	r31, r0
    3c98:	90 9f       	mul	r25, r16
    3c9a:	f0 0d       	add	r31, r0
    3c9c:	11 24       	eor	r1, r1
    3c9e:	ea 5b       	subi	r30, 0xBA	; 186
    3ca0:	fe 4d       	sbci	r31, 0xDE	; 222
    3ca2:	80 89       	ldd	r24, Z+16	; 0x10
    3ca4:	91 89       	ldd	r25, Z+17	; 0x11
    3ca6:	14 96       	adiw	r26, 0x04	; 4
    3ca8:	8d 93       	st	X+, r24
    3caa:	9c 93       	st	X, r25
    3cac:	15 97       	sbiw	r26, 0x05	; 5
    3cae:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,3);
    3cb2:	2d b7       	in	r18, 0x3d	; 61
    3cb4:	3e b7       	in	r19, 0x3e	; 62
    3cb6:	2a 5f       	subi	r18, 0xFA	; 250
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cba:	2d bf       	out	0x3d, r18	; 61
    3cbc:	3e bf       	out	0x3e, r19	; 62
    3cbe:	c4 01       	movw	r24, r8
    3cc0:	63 e0       	ldi	r22, 0x03	; 3
    3cc2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("Hz",2);
    3cc6:	8e e7       	ldi	r24, 0x7E	; 126
    3cc8:	90 e2       	ldi	r25, 0x20	; 32
    3cca:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <main+0x1790>
				}
				else if(profiles[profile_index].type == LSV)
    3cce:	83 30       	cpi	r24, 0x03	; 3
    3cd0:	79 f5       	brne	.+94     	; 0x3d30 <main+0x77e>
				{
					lcdPrintData("Settle=",7);
    3cd2:	81 e9       	ldi	r24, 0x91	; 145
    3cd4:	90 e2       	ldi	r25, 0x20	; 32
    3cd6:	67 e0       	ldi	r22, 0x07	; 7
    3cd8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op1);
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <main+0x72c>
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <main+0x72e>
    3ce0:	00 d0       	rcall	.+0      	; 0x3ce2 <main+0x730>
    3ce2:	ad b7       	in	r26, 0x3d	; 61
    3ce4:	be b7       	in	r27, 0x3e	; 62
    3ce6:	11 96       	adiw	r26, 0x01	; 1
    3ce8:	ed b7       	in	r30, 0x3d	; 61
    3cea:	fe b7       	in	r31, 0x3e	; 62
    3cec:	81 82       	std	Z+1, r8	; 0x01
    3cee:	92 82       	std	Z+2, r9	; 0x02
    3cf0:	12 96       	adiw	r26, 0x02	; 2
    3cf2:	4d 92       	st	X+, r4
    3cf4:	5c 92       	st	X, r5
    3cf6:	13 97       	sbiw	r26, 0x03	; 3
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	80 9f       	mul	r24, r16
    3cfe:	f0 01       	movw	r30, r0
    3d00:	81 9f       	mul	r24, r17
    3d02:	f0 0d       	add	r31, r0
    3d04:	90 9f       	mul	r25, r16
    3d06:	f0 0d       	add	r31, r0
    3d08:	11 24       	eor	r1, r1
    3d0a:	ea 5b       	subi	r30, 0xBA	; 186
    3d0c:	fe 4d       	sbci	r31, 0xDE	; 222
    3d0e:	80 89       	ldd	r24, Z+16	; 0x10
    3d10:	91 89       	ldd	r25, Z+17	; 0x11
    3d12:	14 96       	adiw	r26, 0x04	; 4
    3d14:	8d 93       	st	X+, r24
    3d16:	9c 93       	st	X, r25
    3d18:	15 97       	sbiw	r26, 0x05	; 5
    3d1a:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,3);
    3d1e:	2d b7       	in	r18, 0x3d	; 61
    3d20:	3e b7       	in	r19, 0x3e	; 62
    3d22:	2a 5f       	subi	r18, 0xFA	; 250
    3d24:	3f 4f       	sbci	r19, 0xFF	; 255
    3d26:	2d bf       	out	0x3d, r18	; 61
    3d28:	3e bf       	out	0x3e, r19	; 62
    3d2a:	c4 01       	movw	r24, r8
    3d2c:	63 e0       	ldi	r22, 0x03	; 3
    3d2e:	ee c1       	rjmp	.+988    	; 0x410c <main+0xb5a>
					lcdPrintData("s",1);
				}
				else if(profiles[profile_index].type == CONSTVOLT)
    3d30:	84 30       	cpi	r24, 0x04	; 4
    3d32:	09 f5       	brne	.+66     	; 0x3d76 <main+0x7c4>
				{
					lcdPrintData("Voltage=",8);
    3d34:	8b e9       	ldi	r24, 0x9B	; 155
    3d36:	90 e2       	ldi	r25, 0x20	; 32
    3d38:	68 e0       	ldi	r22, 0x08	; 8
    3d3a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <main+0x78e>
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <main+0x790>
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <main+0x792>
    3d44:	ad b7       	in	r26, 0x3d	; 61
    3d46:	be b7       	in	r27, 0x3e	; 62
    3d48:	11 96       	adiw	r26, 0x01	; 1
    3d4a:	ed b7       	in	r30, 0x3d	; 61
    3d4c:	fe b7       	in	r31, 0x3e	; 62
    3d4e:	81 82       	std	Z+1, r8	; 0x01
    3d50:	92 82       	std	Z+2, r9	; 0x02
    3d52:	12 96       	adiw	r26, 0x02	; 2
    3d54:	6d 92       	st	X+, r6
    3d56:	7c 92       	st	X, r7
    3d58:	13 97       	sbiw	r26, 0x03	; 3
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	80 9f       	mul	r24, r16
    3d60:	f0 01       	movw	r30, r0
    3d62:	81 9f       	mul	r24, r17
    3d64:	f0 0d       	add	r31, r0
    3d66:	90 9f       	mul	r25, r16
    3d68:	f0 0d       	add	r31, r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	ea 5b       	subi	r30, 0xBA	; 186
    3d6e:	fe 4d       	sbci	r31, 0xDE	; 222
    3d70:	80 89       	ldd	r24, Z+16	; 0x10
    3d72:	91 89       	ldd	r25, Z+17	; 0x11
    3d74:	89 c7       	rjmp	.+3858   	; 0x4c88 <main+0x16d6>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CA)
    3d76:	85 30       	cpi	r24, 0x05	; 5
    3d78:	11 f0       	breq	.+4      	; 0x3d7e <main+0x7cc>
    3d7a:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("Wait=",5);
    3d7e:	87 ea       	ldi	r24, 0xA7	; 167
    3d80:	90 e2       	ldi	r25, 0x20	; 32
    3d82:	65 e0       	ldi	r22, 0x05	; 5
    3d84:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <main+0x7d8>
    3d8a:	00 d0       	rcall	.+0      	; 0x3d8c <main+0x7da>
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <main+0x7dc>
    3d8e:	ad b7       	in	r26, 0x3d	; 61
    3d90:	be b7       	in	r27, 0x3e	; 62
    3d92:	11 96       	adiw	r26, 0x01	; 1
    3d94:	ed b7       	in	r30, 0x3d	; 61
    3d96:	fe b7       	in	r31, 0x3e	; 62
    3d98:	81 82       	std	Z+1, r8	; 0x01
    3d9a:	92 82       	std	Z+2, r9	; 0x02
    3d9c:	12 96       	adiw	r26, 0x02	; 2
    3d9e:	6d 92       	st	X+, r6
    3da0:	7c 92       	st	X, r7
    3da2:	13 97       	sbiw	r26, 0x03	; 3
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	80 9f       	mul	r24, r16
    3daa:	f0 01       	movw	r30, r0
    3dac:	81 9f       	mul	r24, r17
    3dae:	f0 0d       	add	r31, r0
    3db0:	90 9f       	mul	r25, r16
    3db2:	f0 0d       	add	r31, r0
    3db4:	11 24       	eor	r1, r1
    3db6:	ea 5b       	subi	r30, 0xBA	; 186
    3db8:	fe 4d       	sbci	r31, 0xDE	; 222
    3dba:	80 89       	ldd	r24, Z+16	; 0x10
    3dbc:	91 89       	ldd	r25, Z+17	; 0x11
    3dbe:	9c c4       	rjmp	.+2360   	; 0x46f8 <main+0x1146>
					lcdPrintData(temp_string,4);
					lcdPrintData("ms",2);
				}
			}
			else if(profile_edit_index == 2)
    3dc0:	82 30       	cpi	r24, 0x02	; 2
    3dc2:	09 f0       	breq	.+2      	; 0x3dc6 <main+0x814>
    3dc4:	cd c1       	rjmp	.+922    	; 0x4160 <main+0xbae>
			{
				lcdPrintData(" ",1);
    3dc6:	80 e3       	ldi	r24, 0x30	; 48
    3dc8:	90 e2       	ldi	r25, 0x20	; 32
    3dca:	61 e0       	ldi	r22, 0x01	; 1
    3dcc:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0d e1       	ldi	r16, 0x1D	; 29
    3dd6:	10 e0       	ldi	r17, 0x00	; 0
    3dd8:	80 9f       	mul	r24, r16
    3dda:	f0 01       	movw	r30, r0
    3ddc:	81 9f       	mul	r24, r17
    3dde:	f0 0d       	add	r31, r0
    3de0:	90 9f       	mul	r25, r16
    3de2:	f0 0d       	add	r31, r0
    3de4:	11 24       	eor	r1, r1
    3de6:	ea 5b       	subi	r30, 0xBA	; 186
    3de8:	fe 4d       	sbci	r31, 0xDE	; 222
    3dea:	87 85       	ldd	r24, Z+15	; 0x0f
    3dec:	88 23       	and	r24, r24
    3dee:	e9 f4       	brne	.+58     	; 0x3e2a <main+0x878>
				{
					lcdPrintData("Freq=",5);
    3df0:	84 e7       	ldi	r24, 0x74	; 116
    3df2:	90 e2       	ldi	r25, 0x20	; 32
    3df4:	65 e0       	ldi	r22, 0x05	; 5
    3df6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op1);
    3dfa:	00 d0       	rcall	.+0      	; 0x3dfc <main+0x84a>
    3dfc:	00 d0       	rcall	.+0      	; 0x3dfe <main+0x84c>
    3dfe:	00 d0       	rcall	.+0      	; 0x3e00 <main+0x84e>
    3e00:	ad b7       	in	r26, 0x3d	; 61
    3e02:	be b7       	in	r27, 0x3e	; 62
    3e04:	11 96       	adiw	r26, 0x01	; 1
    3e06:	ed b7       	in	r30, 0x3d	; 61
    3e08:	fe b7       	in	r31, 0x3e	; 62
    3e0a:	81 82       	std	Z+1, r8	; 0x01
    3e0c:	92 82       	std	Z+2, r9	; 0x02
    3e0e:	12 96       	adiw	r26, 0x02	; 2
    3e10:	4d 92       	st	X+, r4
    3e12:	5c 92       	st	X, r5
    3e14:	13 97       	sbiw	r26, 0x03	; 3
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	80 9f       	mul	r24, r16
    3e1c:	f0 01       	movw	r30, r0
    3e1e:	81 9f       	mul	r24, r17
    3e20:	f0 0d       	add	r31, r0
    3e22:	90 9f       	mul	r25, r16
    3e24:	f0 0d       	add	r31, r0
    3e26:	11 24       	eor	r1, r1
    3e28:	56 c0       	rjmp	.+172    	; 0x3ed6 <main+0x924>
					lcdPrintData(temp_string,3);
					lcdPrintData("Hz",2);
				}
				else if(profiles[profile_index].type == CV)
    3e2a:	81 30       	cpi	r24, 0x01	; 1
    3e2c:	a1 f5       	brne	.+104    	; 0x3e96 <main+0x8e4>
				{
					lcdPrintData("Slope=",6);
    3e2e:	81 e8       	ldi	r24, 0x81	; 129
    3e30:	90 e2       	ldi	r25, 0x20	; 32
    3e32:	66 e0       	ldi	r22, 0x06	; 6
    3e34:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <main+0x888>
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <main+0x88a>
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <main+0x88c>
    3e3e:	ad b7       	in	r26, 0x3d	; 61
    3e40:	be b7       	in	r27, 0x3e	; 62
    3e42:	11 96       	adiw	r26, 0x01	; 1
    3e44:	ed b7       	in	r30, 0x3d	; 61
    3e46:	fe b7       	in	r31, 0x3e	; 62
    3e48:	81 82       	std	Z+1, r8	; 0x01
    3e4a:	92 82       	std	Z+2, r9	; 0x02
    3e4c:	12 96       	adiw	r26, 0x02	; 2
    3e4e:	6d 92       	st	X+, r6
    3e50:	7c 92       	st	X, r7
    3e52:	13 97       	sbiw	r26, 0x03	; 3
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	80 9f       	mul	r24, r16
    3e5a:	f0 01       	movw	r30, r0
    3e5c:	81 9f       	mul	r24, r17
    3e5e:	f0 0d       	add	r31, r0
    3e60:	90 9f       	mul	r25, r16
    3e62:	f0 0d       	add	r31, r0
    3e64:	11 24       	eor	r1, r1
    3e66:	ea 5b       	subi	r30, 0xBA	; 186
    3e68:	fe 4d       	sbci	r31, 0xDE	; 222
    3e6a:	80 89       	ldd	r24, Z+16	; 0x10
    3e6c:	91 89       	ldd	r25, Z+17	; 0x11
    3e6e:	14 96       	adiw	r26, 0x04	; 4
    3e70:	8d 93       	st	X+, r24
    3e72:	9c 93       	st	X, r25
    3e74:	15 97       	sbiw	r26, 0x05	; 5
    3e76:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    3e7a:	2d b7       	in	r18, 0x3d	; 61
    3e7c:	3e b7       	in	r19, 0x3e	; 62
    3e7e:	2a 5f       	subi	r18, 0xFA	; 250
    3e80:	3f 4f       	sbci	r19, 0xFF	; 255
    3e82:	2d bf       	out	0x3d, r18	; 61
    3e84:	3e bf       	out	0x3e, r19	; 62
    3e86:	c4 01       	movw	r24, r8
    3e88:	64 e0       	ldi	r22, 0x04	; 4
    3e8a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV/s",4);
    3e8e:	8c e8       	ldi	r24, 0x8C	; 140
    3e90:	90 e2       	ldi	r25, 0x20	; 32
    3e92:	64 e0       	ldi	r22, 0x04	; 4
    3e94:	dd c0       	rjmp	.+442    	; 0x4050 <main+0xa9e>
				}
				else if(profiles[profile_index].type == ACV)
    3e96:	82 30       	cpi	r24, 0x02	; 2
    3e98:	a9 f5       	brne	.+106    	; 0x3f04 <main+0x952>
				{
					lcdPrintData("Freq=",5);
    3e9a:	84 e7       	ldi	r24, 0x74	; 116
    3e9c:	90 e2       	ldi	r25, 0x20	; 32
    3e9e:	65 e0       	ldi	r22, 0x05	; 5
    3ea0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op1);
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <main+0x8f4>
    3ea6:	00 d0       	rcall	.+0      	; 0x3ea8 <main+0x8f6>
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <main+0x8f8>
    3eaa:	ad b7       	in	r26, 0x3d	; 61
    3eac:	be b7       	in	r27, 0x3e	; 62
    3eae:	11 96       	adiw	r26, 0x01	; 1
    3eb0:	ed b7       	in	r30, 0x3d	; 61
    3eb2:	fe b7       	in	r31, 0x3e	; 62
    3eb4:	81 82       	std	Z+1, r8	; 0x01
    3eb6:	92 82       	std	Z+2, r9	; 0x02
    3eb8:	12 96       	adiw	r26, 0x02	; 2
    3eba:	4d 92       	st	X+, r4
    3ebc:	5c 92       	st	X, r5
    3ebe:	13 97       	sbiw	r26, 0x03	; 3
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	2d e1       	ldi	r18, 0x1D	; 29
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	82 9f       	mul	r24, r18
    3eca:	f0 01       	movw	r30, r0
    3ecc:	83 9f       	mul	r24, r19
    3ece:	f0 0d       	add	r31, r0
    3ed0:	92 9f       	mul	r25, r18
    3ed2:	f0 0d       	add	r31, r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	ea 5b       	subi	r30, 0xBA	; 186
    3ed8:	fe 4d       	sbci	r31, 0xDE	; 222
    3eda:	80 89       	ldd	r24, Z+16	; 0x10
    3edc:	91 89       	ldd	r25, Z+17	; 0x11
    3ede:	14 96       	adiw	r26, 0x04	; 4
    3ee0:	8d 93       	st	X+, r24
    3ee2:	9c 93       	st	X, r25
    3ee4:	15 97       	sbiw	r26, 0x05	; 5
    3ee6:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,3);
    3eea:	2d b7       	in	r18, 0x3d	; 61
    3eec:	3e b7       	in	r19, 0x3e	; 62
    3eee:	2a 5f       	subi	r18, 0xFA	; 250
    3ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef2:	2d bf       	out	0x3d, r18	; 61
    3ef4:	3e bf       	out	0x3e, r19	; 62
    3ef6:	c4 01       	movw	r24, r8
    3ef8:	63 e0       	ldi	r22, 0x03	; 3
    3efa:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("Hz",2);
    3efe:	8e e7       	ldi	r24, 0x7E	; 126
    3f00:	90 e2       	ldi	r25, 0x20	; 32
    3f02:	a5 c0       	rjmp	.+330    	; 0x404e <main+0xa9c>
				}
				else if(profiles[profile_index].type == LSV)
    3f04:	83 30       	cpi	r24, 0x03	; 3
    3f06:	a9 f5       	brne	.+106    	; 0x3f72 <main+0x9c0>
				{
					lcdPrintData("Settle=",7);
    3f08:	81 e9       	ldi	r24, 0x91	; 145
    3f0a:	90 e2       	ldi	r25, 0x20	; 32
    3f0c:	67 e0       	ldi	r22, 0x07	; 7
    3f0e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3f12:	00 d0       	rcall	.+0      	; 0x3f14 <main+0x962>
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <main+0x964>
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <main+0x966>
    3f18:	ad b7       	in	r26, 0x3d	; 61
    3f1a:	be b7       	in	r27, 0x3e	; 62
    3f1c:	11 96       	adiw	r26, 0x01	; 1
    3f1e:	ed b7       	in	r30, 0x3d	; 61
    3f20:	fe b7       	in	r31, 0x3e	; 62
    3f22:	81 82       	std	Z+1, r8	; 0x01
    3f24:	92 82       	std	Z+2, r9	; 0x02
    3f26:	12 96       	adiw	r26, 0x02	; 2
    3f28:	6d 92       	st	X+, r6
    3f2a:	7c 92       	st	X, r7
    3f2c:	13 97       	sbiw	r26, 0x03	; 3
    3f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	2d e1       	ldi	r18, 0x1D	; 29
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	82 9f       	mul	r24, r18
    3f38:	f0 01       	movw	r30, r0
    3f3a:	83 9f       	mul	r24, r19
    3f3c:	f0 0d       	add	r31, r0
    3f3e:	92 9f       	mul	r25, r18
    3f40:	f0 0d       	add	r31, r0
    3f42:	11 24       	eor	r1, r1
    3f44:	ea 5b       	subi	r30, 0xBA	; 186
    3f46:	fe 4d       	sbci	r31, 0xDE	; 222
    3f48:	80 89       	ldd	r24, Z+16	; 0x10
    3f4a:	91 89       	ldd	r25, Z+17	; 0x11
    3f4c:	14 96       	adiw	r26, 0x04	; 4
    3f4e:	8d 93       	st	X+, r24
    3f50:	9c 93       	st	X, r25
    3f52:	15 97       	sbiw	r26, 0x05	; 5
    3f54:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    3f58:	2d b7       	in	r18, 0x3d	; 61
    3f5a:	3e b7       	in	r19, 0x3e	; 62
    3f5c:	2a 5f       	subi	r18, 0xFA	; 250
    3f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f60:	2d bf       	out	0x3d, r18	; 61
    3f62:	3e bf       	out	0x3e, r19	; 62
    3f64:	c4 01       	movw	r24, r8
    3f66:	64 e0       	ldi	r22, 0x04	; 4
    3f68:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("s",1);
    3f6c:	89 e9       	ldi	r24, 0x99	; 153
    3f6e:	90 e2       	ldi	r25, 0x20	; 32
    3f70:	36 c0       	rjmp	.+108    	; 0x3fde <main+0xa2c>
				}
				else if(profiles[profile_index].type == CONSTVOLT)
    3f72:	84 30       	cpi	r24, 0x04	; 4
    3f74:	b1 f5       	brne	.+108    	; 0x3fe2 <main+0xa30>
				{
					lcdPrintData("Voltage=",8);
    3f76:	8b e9       	ldi	r24, 0x9B	; 155
    3f78:	90 e2       	ldi	r25, 0x20	; 32
    3f7a:	68 e0       	ldi	r22, 0x08	; 8
    3f7c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3f80:	00 d0       	rcall	.+0      	; 0x3f82 <main+0x9d0>
    3f82:	00 d0       	rcall	.+0      	; 0x3f84 <main+0x9d2>
    3f84:	00 d0       	rcall	.+0      	; 0x3f86 <main+0x9d4>
    3f86:	ad b7       	in	r26, 0x3d	; 61
    3f88:	be b7       	in	r27, 0x3e	; 62
    3f8a:	11 96       	adiw	r26, 0x01	; 1
    3f8c:	ed b7       	in	r30, 0x3d	; 61
    3f8e:	fe b7       	in	r31, 0x3e	; 62
    3f90:	81 82       	std	Z+1, r8	; 0x01
    3f92:	92 82       	std	Z+2, r9	; 0x02
    3f94:	12 96       	adiw	r26, 0x02	; 2
    3f96:	6d 92       	st	X+, r6
    3f98:	7c 92       	st	X, r7
    3f9a:	13 97       	sbiw	r26, 0x03	; 3
    3f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	2d e1       	ldi	r18, 0x1D	; 29
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	82 9f       	mul	r24, r18
    3fa6:	f0 01       	movw	r30, r0
    3fa8:	83 9f       	mul	r24, r19
    3faa:	f0 0d       	add	r31, r0
    3fac:	92 9f       	mul	r25, r18
    3fae:	f0 0d       	add	r31, r0
    3fb0:	11 24       	eor	r1, r1
    3fb2:	ea 5b       	subi	r30, 0xBA	; 186
    3fb4:	fe 4d       	sbci	r31, 0xDE	; 222
    3fb6:	80 89       	ldd	r24, Z+16	; 0x10
    3fb8:	91 89       	ldd	r25, Z+17	; 0x11
    3fba:	14 96       	adiw	r26, 0x04	; 4
    3fbc:	8d 93       	st	X+, r24
    3fbe:	9c 93       	st	X, r25
    3fc0:	15 97       	sbiw	r26, 0x05	; 5
    3fc2:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    3fc6:	2d b7       	in	r18, 0x3d	; 61
    3fc8:	3e b7       	in	r19, 0x3e	; 62
    3fca:	2a 5f       	subi	r18, 0xFA	; 250
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	2d bf       	out	0x3d, r18	; 61
    3fd0:	3e bf       	out	0x3e, r19	; 62
    3fd2:	c4 01       	movw	r24, r8
    3fd4:	64 e0       	ldi	r22, 0x04	; 4
    3fd6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",1);
    3fda:	84 ea       	ldi	r24, 0xA4	; 164
    3fdc:	90 e2       	ldi	r25, 0x20	; 32
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	37 c0       	rjmp	.+110    	; 0x4050 <main+0xa9e>
				}
				else if(profiles[profile_index].type == CA)
    3fe2:	85 30       	cpi	r24, 0x05	; 5
    3fe4:	b9 f5       	brne	.+110    	; 0x4054 <main+0xaa2>
				{
					lcdPrintData("Wait=",5);
    3fe6:	87 ea       	ldi	r24, 0xA7	; 167
    3fe8:	90 e2       	ldi	r25, 0x20	; 32
    3fea:	65 e0       	ldi	r22, 0x05	; 5
    3fec:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op1);
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <main+0xa40>
    3ff2:	00 d0       	rcall	.+0      	; 0x3ff4 <main+0xa42>
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <main+0xa44>
    3ff6:	ad b7       	in	r26, 0x3d	; 61
    3ff8:	be b7       	in	r27, 0x3e	; 62
    3ffa:	11 96       	adiw	r26, 0x01	; 1
    3ffc:	ed b7       	in	r30, 0x3d	; 61
    3ffe:	fe b7       	in	r31, 0x3e	; 62
    4000:	81 82       	std	Z+1, r8	; 0x01
    4002:	92 82       	std	Z+2, r9	; 0x02
    4004:	12 96       	adiw	r26, 0x02	; 2
    4006:	6d 92       	st	X+, r6
    4008:	7c 92       	st	X, r7
    400a:	13 97       	sbiw	r26, 0x03	; 3
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	2d e1       	ldi	r18, 0x1D	; 29
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	82 9f       	mul	r24, r18
    4016:	f0 01       	movw	r30, r0
    4018:	83 9f       	mul	r24, r19
    401a:	f0 0d       	add	r31, r0
    401c:	92 9f       	mul	r25, r18
    401e:	f0 0d       	add	r31, r0
    4020:	11 24       	eor	r1, r1
    4022:	ea 5b       	subi	r30, 0xBA	; 186
    4024:	fe 4d       	sbci	r31, 0xDE	; 222
    4026:	80 89       	ldd	r24, Z+16	; 0x10
    4028:	91 89       	ldd	r25, Z+17	; 0x11
    402a:	14 96       	adiw	r26, 0x04	; 4
    402c:	8d 93       	st	X+, r24
    402e:	9c 93       	st	X, r25
    4030:	15 97       	sbiw	r26, 0x05	; 5
    4032:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4036:	2d b7       	in	r18, 0x3d	; 61
    4038:	3e b7       	in	r19, 0x3e	; 62
    403a:	2a 5f       	subi	r18, 0xFA	; 250
    403c:	3f 4f       	sbci	r19, 0xFF	; 255
    403e:	2d bf       	out	0x3d, r18	; 61
    4040:	3e bf       	out	0x3e, r19	; 62
    4042:	c4 01       	movw	r24, r8
    4044:	64 e0       	ldi	r22, 0x04	; 4
    4046:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("ms",2);
    404a:	8d ea       	ldi	r24, 0xAD	; 173
    404c:	90 e2       	ldi	r25, 0x20	; 32
    404e:	62 e0       	ldi	r22, 0x02	; 2
    4050:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	62 e0       	ldi	r22, 0x02	; 2
    4058:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    405c:	8d 81       	ldd	r24, Y+5	; 0x05
    405e:	88 23       	and	r24, r24
    4060:	19 f4       	brne	.+6      	; 0x4068 <main+0xab6>
					lcdPrintData("~",1);
    4062:	8e e2       	ldi	r24, 0x2E	; 46
    4064:	90 e2       	ldi	r25, 0x20	; 32
    4066:	02 c0       	rjmp	.+4      	; 0x406c <main+0xaba>
				else
					lcdPrintData(">",1);
    4068:	89 e4       	ldi	r24, 0x49	; 73
    406a:	90 e2       	ldi	r25, 0x20	; 32
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				
				if(profiles[profile_index].type == SWV)
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	0d e1       	ldi	r16, 0x1D	; 29
    4078:	10 e0       	ldi	r17, 0x00	; 0
    407a:	80 9f       	mul	r24, r16
    407c:	f0 01       	movw	r30, r0
    407e:	81 9f       	mul	r24, r17
    4080:	f0 0d       	add	r31, r0
    4082:	90 9f       	mul	r25, r16
    4084:	f0 0d       	add	r31, r0
    4086:	11 24       	eor	r1, r1
    4088:	ea 5b       	subi	r30, 0xBA	; 186
    408a:	fe 4d       	sbci	r31, 0xDE	; 222
    408c:	87 85       	ldd	r24, Z+15	; 0x0f
    408e:	88 23       	and	r24, r24
    4090:	49 f0       	breq	.+18     	; 0x40a4 <main+0xaf2>
					lcdPrintData("Start=",6);
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	39 f0       	breq	.+14     	; 0x40a4 <main+0xaf2>
					lcdPrintData("Start=",6);
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == ACV)
    4096:	82 30       	cpi	r24, 0x02	; 2
    4098:	19 f4       	brne	.+6      	; 0x40a0 <main+0xaee>
				{
					lcdPrintData("Height=",7);
    409a:	87 eb       	ldi	r24, 0xB7	; 183
    409c:	90 e2       	ldi	r25, 0x20	; 32
    409e:	41 c0       	rjmp	.+130    	; 0x4122 <main+0xb70>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == LSV)
    40a0:	83 30       	cpi	r24, 0x03	; 3
    40a2:	21 f4       	brne	.+8      	; 0x40ac <main+0xafa>
				{
					lcdPrintData("Start=",6);
    40a4:	80 eb       	ldi	r24, 0xB0	; 176
    40a6:	90 e2       	ldi	r25, 0x20	; 32
    40a8:	66 e0       	ldi	r22, 0x06	; 6
    40aa:	3c c0       	rjmp	.+120    	; 0x4124 <main+0xb72>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CONSTVOLT)
    40ac:	84 30       	cpi	r24, 0x04	; 4
    40ae:	a1 f5       	brne	.+104    	; 0x4118 <main+0xb66>
				{
					lcdPrintData("Duration=",9);
    40b0:	8f eb       	ldi	r24, 0xBF	; 191
    40b2:	90 e2       	ldi	r25, 0x20	; 32
    40b4:	69 e0       	ldi	r22, 0x09	; 9
    40b6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <main+0xb0a>
    40bc:	00 d0       	rcall	.+0      	; 0x40be <main+0xb0c>
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <main+0xb0e>
    40c0:	ad b7       	in	r26, 0x3d	; 61
    40c2:	be b7       	in	r27, 0x3e	; 62
    40c4:	11 96       	adiw	r26, 0x01	; 1
    40c6:	ed b7       	in	r30, 0x3d	; 61
    40c8:	fe b7       	in	r31, 0x3e	; 62
    40ca:	81 82       	std	Z+1, r8	; 0x01
    40cc:	92 82       	std	Z+2, r9	; 0x02
    40ce:	12 96       	adiw	r26, 0x02	; 2
    40d0:	6d 92       	st	X+, r6
    40d2:	7c 92       	st	X, r7
    40d4:	13 97       	sbiw	r26, 0x03	; 3
    40d6:	8a 81       	ldd	r24, Y+2	; 0x02
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	80 9f       	mul	r24, r16
    40dc:	f0 01       	movw	r30, r0
    40de:	81 9f       	mul	r24, r17
    40e0:	f0 0d       	add	r31, r0
    40e2:	90 9f       	mul	r25, r16
    40e4:	f0 0d       	add	r31, r0
    40e6:	11 24       	eor	r1, r1
    40e8:	ea 5b       	subi	r30, 0xBA	; 186
    40ea:	fe 4d       	sbci	r31, 0xDE	; 222
    40ec:	82 89       	ldd	r24, Z+18	; 0x12
    40ee:	93 89       	ldd	r25, Z+19	; 0x13
    40f0:	14 96       	adiw	r26, 0x04	; 4
    40f2:	8d 93       	st	X+, r24
    40f4:	9c 93       	st	X, r25
    40f6:	15 97       	sbiw	r26, 0x05	; 5
    40f8:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    40fc:	2d b7       	in	r18, 0x3d	; 61
    40fe:	3e b7       	in	r19, 0x3e	; 62
    4100:	2a 5f       	subi	r18, 0xFA	; 250
    4102:	3f 4f       	sbci	r19, 0xFF	; 255
    4104:	2d bf       	out	0x3d, r18	; 61
    4106:	3e bf       	out	0x3e, r19	; 62
    4108:	c4 01       	movw	r24, r8
    410a:	64 e0       	ldi	r22, 0x04	; 4
    410c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("s",1);
    4110:	89 e9       	ldi	r24, 0x99	; 153
    4112:	90 e2       	ldi	r25, 0x20	; 32
    4114:	61 e0       	ldi	r22, 0x01	; 1
    4116:	c5 c6       	rjmp	.+3466   	; 0x4ea2 <main+0x18f0>
				}
				else if(profiles[profile_index].type == CA)
    4118:	85 30       	cpi	r24, 0x05	; 5
    411a:	09 f0       	breq	.+2      	; 0x411e <main+0xb6c>
    411c:	c4 c6       	rjmp	.+3464   	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("Step V=",7);
    411e:	89 ec       	ldi	r24, 0xC9	; 201
    4120:	90 e2       	ldi	r25, 0x20	; 32
    4122:	67 e0       	ldi	r22, 0x07	; 7
    4124:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
    4128:	00 d0       	rcall	.+0      	; 0x412a <main+0xb78>
    412a:	00 d0       	rcall	.+0      	; 0x412c <main+0xb7a>
    412c:	00 d0       	rcall	.+0      	; 0x412e <main+0xb7c>
    412e:	ad b7       	in	r26, 0x3d	; 61
    4130:	be b7       	in	r27, 0x3e	; 62
    4132:	11 96       	adiw	r26, 0x01	; 1
    4134:	ed b7       	in	r30, 0x3d	; 61
    4136:	fe b7       	in	r31, 0x3e	; 62
    4138:	81 82       	std	Z+1, r8	; 0x01
    413a:	92 82       	std	Z+2, r9	; 0x02
    413c:	12 96       	adiw	r26, 0x02	; 2
    413e:	6d 92       	st	X+, r6
    4140:	7c 92       	st	X, r7
    4142:	13 97       	sbiw	r26, 0x03	; 3
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	80 9f       	mul	r24, r16
    414a:	f0 01       	movw	r30, r0
    414c:	81 9f       	mul	r24, r17
    414e:	f0 0d       	add	r31, r0
    4150:	90 9f       	mul	r25, r16
    4152:	f0 0d       	add	r31, r0
    4154:	11 24       	eor	r1, r1
    4156:	ea 5b       	subi	r30, 0xBA	; 186
    4158:	fe 4d       	sbci	r31, 0xDE	; 222
    415a:	82 89       	ldd	r24, Z+18	; 0x12
    415c:	93 89       	ldd	r25, Z+19	; 0x13
    415e:	94 c5       	rjmp	.+2856   	; 0x4c88 <main+0x16d6>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
			}
			else if(profile_edit_index == 3)
    4160:	83 30       	cpi	r24, 0x03	; 3
    4162:	09 f0       	breq	.+2      	; 0x4166 <main+0xbb4>
    4164:	48 c1       	rjmp	.+656    	; 0x43f6 <main+0xe44>
			{
				lcdPrintData(" ",1);
    4166:	80 e3       	ldi	r24, 0x30	; 48
    4168:	90 e2       	ldi	r25, 0x20	; 32
    416a:	61 e0       	ldi	r22, 0x01	; 1
    416c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    4170:	8a 81       	ldd	r24, Y+2	; 0x02
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0d e1       	ldi	r16, 0x1D	; 29
    4176:	10 e0       	ldi	r17, 0x00	; 0
    4178:	80 9f       	mul	r24, r16
    417a:	f0 01       	movw	r30, r0
    417c:	81 9f       	mul	r24, r17
    417e:	f0 0d       	add	r31, r0
    4180:	90 9f       	mul	r25, r16
    4182:	f0 0d       	add	r31, r0
    4184:	11 24       	eor	r1, r1
    4186:	ea 5b       	subi	r30, 0xBA	; 186
    4188:	fe 4d       	sbci	r31, 0xDE	; 222
    418a:	87 85       	ldd	r24, Z+15	; 0x0f
    418c:	88 23       	and	r24, r24
    418e:	e9 f4       	brne	.+58     	; 0x41ca <main+0xc18>
				{
					lcdPrintData("Start=",6);
    4190:	80 eb       	ldi	r24, 0xB0	; 176
    4192:	90 e2       	ldi	r25, 0x20	; 32
    4194:	66 e0       	ldi	r22, 0x06	; 6
    4196:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
    419a:	00 d0       	rcall	.+0      	; 0x419c <main+0xbea>
    419c:	00 d0       	rcall	.+0      	; 0x419e <main+0xbec>
    419e:	00 d0       	rcall	.+0      	; 0x41a0 <main+0xbee>
    41a0:	ad b7       	in	r26, 0x3d	; 61
    41a2:	be b7       	in	r27, 0x3e	; 62
    41a4:	11 96       	adiw	r26, 0x01	; 1
    41a6:	ed b7       	in	r30, 0x3d	; 61
    41a8:	fe b7       	in	r31, 0x3e	; 62
    41aa:	81 82       	std	Z+1, r8	; 0x01
    41ac:	92 82       	std	Z+2, r9	; 0x02
    41ae:	12 96       	adiw	r26, 0x02	; 2
    41b0:	6d 92       	st	X+, r6
    41b2:	7c 92       	st	X, r7
    41b4:	13 97       	sbiw	r26, 0x03	; 3
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	80 9f       	mul	r24, r16
    41bc:	f0 01       	movw	r30, r0
    41be:	81 9f       	mul	r24, r17
    41c0:	f0 0d       	add	r31, r0
    41c2:	90 9f       	mul	r25, r16
    41c4:	f0 0d       	add	r31, r0
    41c6:	11 24       	eor	r1, r1
    41c8:	65 c0       	rjmp	.+202    	; 0x4294 <main+0xce2>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    41ca:	81 30       	cpi	r24, 0x01	; 1
    41cc:	39 f0       	breq	.+14     	; 0x41dc <main+0xc2a>
					lcdPrintData("Start=",6);
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == ACV)
    41ce:	82 30       	cpi	r24, 0x02	; 2
    41d0:	19 f4       	brne	.+6      	; 0x41d8 <main+0xc26>
				{
					lcdPrintData("Height=",7);
    41d2:	87 eb       	ldi	r24, 0xB7	; 183
    41d4:	90 e2       	ldi	r25, 0x20	; 32
    41d6:	42 c0       	rjmp	.+132    	; 0x425c <main+0xcaa>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == LSV)
    41d8:	83 30       	cpi	r24, 0x03	; 3
    41da:	21 f4       	brne	.+8      	; 0x41e4 <main+0xc32>
				{
					lcdPrintData("Start=",6);
    41dc:	80 eb       	ldi	r24, 0xB0	; 176
    41de:	90 e2       	ldi	r25, 0x20	; 32
    41e0:	66 e0       	ldi	r22, 0x06	; 6
    41e2:	3d c0       	rjmp	.+122    	; 0x425e <main+0xcac>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CONSTVOLT)
    41e4:	84 30       	cpi	r24, 0x04	; 4
    41e6:	b1 f5       	brne	.+108    	; 0x4254 <main+0xca2>
				{
					lcdPrintData("Duration=",9);
    41e8:	8f eb       	ldi	r24, 0xBF	; 191
    41ea:	90 e2       	ldi	r25, 0x20	; 32
    41ec:	69 e0       	ldi	r22, 0x09	; 9
    41ee:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <main+0xc42>
    41f4:	00 d0       	rcall	.+0      	; 0x41f6 <main+0xc44>
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <main+0xc46>
    41f8:	ad b7       	in	r26, 0x3d	; 61
    41fa:	be b7       	in	r27, 0x3e	; 62
    41fc:	11 96       	adiw	r26, 0x01	; 1
    41fe:	ed b7       	in	r30, 0x3d	; 61
    4200:	fe b7       	in	r31, 0x3e	; 62
    4202:	81 82       	std	Z+1, r8	; 0x01
    4204:	92 82       	std	Z+2, r9	; 0x02
    4206:	12 96       	adiw	r26, 0x02	; 2
    4208:	6d 92       	st	X+, r6
    420a:	7c 92       	st	X, r7
    420c:	13 97       	sbiw	r26, 0x03	; 3
    420e:	8a 81       	ldd	r24, Y+2	; 0x02
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	2d e1       	ldi	r18, 0x1D	; 29
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	82 9f       	mul	r24, r18
    4218:	f0 01       	movw	r30, r0
    421a:	83 9f       	mul	r24, r19
    421c:	f0 0d       	add	r31, r0
    421e:	92 9f       	mul	r25, r18
    4220:	f0 0d       	add	r31, r0
    4222:	11 24       	eor	r1, r1
    4224:	ea 5b       	subi	r30, 0xBA	; 186
    4226:	fe 4d       	sbci	r31, 0xDE	; 222
    4228:	82 89       	ldd	r24, Z+18	; 0x12
    422a:	93 89       	ldd	r25, Z+19	; 0x13
    422c:	14 96       	adiw	r26, 0x04	; 4
    422e:	8d 93       	st	X+, r24
    4230:	9c 93       	st	X, r25
    4232:	15 97       	sbiw	r26, 0x05	; 5
    4234:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4238:	2d b7       	in	r18, 0x3d	; 61
    423a:	3e b7       	in	r19, 0x3e	; 62
    423c:	2a 5f       	subi	r18, 0xFA	; 250
    423e:	3f 4f       	sbci	r19, 0xFF	; 255
    4240:	2d bf       	out	0x3d, r18	; 61
    4242:	3e bf       	out	0x3e, r19	; 62
    4244:	c4 01       	movw	r24, r8
    4246:	64 e0       	ldi	r22, 0x04	; 4
    4248:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("s",1);
    424c:	89 e9       	ldi	r24, 0x99	; 153
    424e:	90 e2       	ldi	r25, 0x20	; 32
    4250:	61 e0       	ldi	r22, 0x01	; 1
    4252:	37 c0       	rjmp	.+110    	; 0x42c2 <main+0xd10>
				}
				else if(profiles[profile_index].type == CA)
    4254:	85 30       	cpi	r24, 0x05	; 5
    4256:	b9 f5       	brne	.+110    	; 0x42c6 <main+0xd14>
				{
					lcdPrintData("Step V=",7);
    4258:	89 ec       	ldi	r24, 0xC9	; 201
    425a:	90 e2       	ldi	r25, 0x20	; 32
    425c:	67 e0       	ldi	r22, 0x07	; 7
    425e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op2);
    4262:	00 d0       	rcall	.+0      	; 0x4264 <main+0xcb2>
    4264:	00 d0       	rcall	.+0      	; 0x4266 <main+0xcb4>
    4266:	00 d0       	rcall	.+0      	; 0x4268 <main+0xcb6>
    4268:	ad b7       	in	r26, 0x3d	; 61
    426a:	be b7       	in	r27, 0x3e	; 62
    426c:	11 96       	adiw	r26, 0x01	; 1
    426e:	ed b7       	in	r30, 0x3d	; 61
    4270:	fe b7       	in	r31, 0x3e	; 62
    4272:	81 82       	std	Z+1, r8	; 0x01
    4274:	92 82       	std	Z+2, r9	; 0x02
    4276:	12 96       	adiw	r26, 0x02	; 2
    4278:	6d 92       	st	X+, r6
    427a:	7c 92       	st	X, r7
    427c:	13 97       	sbiw	r26, 0x03	; 3
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	2d e1       	ldi	r18, 0x1D	; 29
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	82 9f       	mul	r24, r18
    4288:	f0 01       	movw	r30, r0
    428a:	83 9f       	mul	r24, r19
    428c:	f0 0d       	add	r31, r0
    428e:	92 9f       	mul	r25, r18
    4290:	f0 0d       	add	r31, r0
    4292:	11 24       	eor	r1, r1
    4294:	ea 5b       	subi	r30, 0xBA	; 186
    4296:	fe 4d       	sbci	r31, 0xDE	; 222
    4298:	82 89       	ldd	r24, Z+18	; 0x12
    429a:	93 89       	ldd	r25, Z+19	; 0x13
    429c:	14 96       	adiw	r26, 0x04	; 4
    429e:	8d 93       	st	X+, r24
    42a0:	9c 93       	st	X, r25
    42a2:	15 97       	sbiw	r26, 0x05	; 5
    42a4:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    42a8:	2d b7       	in	r18, 0x3d	; 61
    42aa:	3e b7       	in	r19, 0x3e	; 62
    42ac:	2a 5f       	subi	r18, 0xFA	; 250
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	2d bf       	out	0x3d, r18	; 61
    42b2:	3e bf       	out	0x3e, r19	; 62
    42b4:	c4 01       	movw	r24, r8
    42b6:	64 e0       	ldi	r22, 0x04	; 4
    42b8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    42bc:	84 ea       	ldi	r24, 0xA4	; 164
    42be:	90 e2       	ldi	r25, 0x20	; 32
    42c0:	62 e0       	ldi	r22, 0x02	; 2
    42c2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	62 e0       	ldi	r22, 0x02	; 2
    42ca:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    42ce:	8d 81       	ldd	r24, Y+5	; 0x05
    42d0:	88 23       	and	r24, r24
    42d2:	19 f4       	brne	.+6      	; 0x42da <main+0xd28>
					lcdPrintData("~",1);
    42d4:	8e e2       	ldi	r24, 0x2E	; 46
    42d6:	90 e2       	ldi	r25, 0x20	; 32
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <main+0xd2c>
				else
					lcdPrintData(">",1);
    42da:	89 e4       	ldi	r24, 0x49	; 73
    42dc:	90 e2       	ldi	r25, 0x20	; 32
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				if(profiles[profile_index].type == SWV)
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0d e1       	ldi	r16, 0x1D	; 29
    42ea:	10 e0       	ldi	r17, 0x00	; 0
    42ec:	80 9f       	mul	r24, r16
    42ee:	f0 01       	movw	r30, r0
    42f0:	81 9f       	mul	r24, r17
    42f2:	f0 0d       	add	r31, r0
    42f4:	90 9f       	mul	r25, r16
    42f6:	f0 0d       	add	r31, r0
    42f8:	11 24       	eor	r1, r1
    42fa:	ea 5b       	subi	r30, 0xBA	; 186
    42fc:	fe 4d       	sbci	r31, 0xDE	; 222
    42fe:	87 85       	ldd	r24, Z+15	; 0x0f
    4300:	88 23       	and	r24, r24
    4302:	a1 f1       	breq	.+104    	; 0x436c <main+0xdba>
					lcdPrintData("Stop=",5);
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4304:	81 30       	cpi	r24, 0x01	; 1
    4306:	91 f1       	breq	.+100    	; 0x436c <main+0xdba>
					lcdPrintData("Stop=",5);
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == ACV)
    4308:	82 30       	cpi	r24, 0x02	; 2
    430a:	71 f5       	brne	.+92     	; 0x4368 <main+0xdb6>
				{
					lcdPrintData("Cycles=",7);
    430c:	87 ed       	ldi	r24, 0xD7	; 215
    430e:	90 e2       	ldi	r25, 0x20	; 32
    4310:	67 e0       	ldi	r22, 0x07	; 7
    4312:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    4316:	00 d0       	rcall	.+0      	; 0x4318 <main+0xd66>
    4318:	00 d0       	rcall	.+0      	; 0x431a <main+0xd68>
    431a:	00 d0       	rcall	.+0      	; 0x431c <main+0xd6a>
    431c:	ad b7       	in	r26, 0x3d	; 61
    431e:	be b7       	in	r27, 0x3e	; 62
    4320:	11 96       	adiw	r26, 0x01	; 1
    4322:	ed b7       	in	r30, 0x3d	; 61
    4324:	fe b7       	in	r31, 0x3e	; 62
    4326:	81 82       	std	Z+1, r8	; 0x01
    4328:	92 82       	std	Z+2, r9	; 0x02
    432a:	12 96       	adiw	r26, 0x02	; 2
    432c:	6d 92       	st	X+, r6
    432e:	7c 92       	st	X, r7
    4330:	13 97       	sbiw	r26, 0x03	; 3
    4332:	8a 81       	ldd	r24, Y+2	; 0x02
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	80 9f       	mul	r24, r16
    4338:	f0 01       	movw	r30, r0
    433a:	81 9f       	mul	r24, r17
    433c:	f0 0d       	add	r31, r0
    433e:	90 9f       	mul	r25, r16
    4340:	f0 0d       	add	r31, r0
    4342:	11 24       	eor	r1, r1
    4344:	ea 5b       	subi	r30, 0xBA	; 186
    4346:	fe 4d       	sbci	r31, 0xDE	; 222
    4348:	84 89       	ldd	r24, Z+20	; 0x14
    434a:	95 89       	ldd	r25, Z+21	; 0x15
    434c:	14 96       	adiw	r26, 0x04	; 4
    434e:	8d 93       	st	X+, r24
    4350:	9c 93       	st	X, r25
    4352:	15 97       	sbiw	r26, 0x05	; 5
    4354:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4358:	2d b7       	in	r18, 0x3d	; 61
    435a:	3e b7       	in	r19, 0x3e	; 62
    435c:	2a 5f       	subi	r18, 0xFA	; 250
    435e:	3f 4f       	sbci	r19, 0xFF	; 255
    4360:	2d bf       	out	0x3d, r18	; 61
    4362:	3e bf       	out	0x3e, r19	; 62
    4364:	c4 01       	movw	r24, r8
    4366:	a3 c1       	rjmp	.+838    	; 0x46ae <main+0x10fc>
				}
				else if(profiles[profile_index].type == LSV)
    4368:	83 30       	cpi	r24, 0x03	; 3
    436a:	09 f5       	brne	.+66     	; 0x43ae <main+0xdfc>
				{
					lcdPrintData("Stop=",5);
    436c:	81 ed       	ldi	r24, 0xD1	; 209
    436e:	90 e2       	ldi	r25, 0x20	; 32
    4370:	65 e0       	ldi	r22, 0x05	; 5
    4372:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    4376:	00 d0       	rcall	.+0      	; 0x4378 <main+0xdc6>
    4378:	00 d0       	rcall	.+0      	; 0x437a <main+0xdc8>
    437a:	00 d0       	rcall	.+0      	; 0x437c <main+0xdca>
    437c:	ad b7       	in	r26, 0x3d	; 61
    437e:	be b7       	in	r27, 0x3e	; 62
    4380:	11 96       	adiw	r26, 0x01	; 1
    4382:	ed b7       	in	r30, 0x3d	; 61
    4384:	fe b7       	in	r31, 0x3e	; 62
    4386:	81 82       	std	Z+1, r8	; 0x01
    4388:	92 82       	std	Z+2, r9	; 0x02
    438a:	12 96       	adiw	r26, 0x02	; 2
    438c:	6d 92       	st	X+, r6
    438e:	7c 92       	st	X, r7
    4390:	13 97       	sbiw	r26, 0x03	; 3
    4392:	8a 81       	ldd	r24, Y+2	; 0x02
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	80 9f       	mul	r24, r16
    4398:	f0 01       	movw	r30, r0
    439a:	81 9f       	mul	r24, r17
    439c:	f0 0d       	add	r31, r0
    439e:	90 9f       	mul	r25, r16
    43a0:	f0 0d       	add	r31, r0
    43a2:	11 24       	eor	r1, r1
    43a4:	ea 5b       	subi	r30, 0xBA	; 186
    43a6:	fe 4d       	sbci	r31, 0xDE	; 222
    43a8:	84 89       	ldd	r24, Z+20	; 0x14
    43aa:	95 89       	ldd	r25, Z+21	; 0x15
    43ac:	6d c4       	rjmp	.+2266   	; 0x4c88 <main+0x16d6>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CA)
    43ae:	85 30       	cpi	r24, 0x05	; 5
    43b0:	09 f0       	breq	.+2      	; 0x43b4 <main+0xe02>
    43b2:	79 c5       	rjmp	.+2802   	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("Step W=",7);
    43b4:	8f ed       	ldi	r24, 0xDF	; 223
    43b6:	90 e2       	ldi	r25, 0x20	; 32
    43b8:	67 e0       	ldi	r22, 0x07	; 7
    43ba:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    43be:	00 d0       	rcall	.+0      	; 0x43c0 <main+0xe0e>
    43c0:	00 d0       	rcall	.+0      	; 0x43c2 <main+0xe10>
    43c2:	00 d0       	rcall	.+0      	; 0x43c4 <main+0xe12>
    43c4:	ad b7       	in	r26, 0x3d	; 61
    43c6:	be b7       	in	r27, 0x3e	; 62
    43c8:	11 96       	adiw	r26, 0x01	; 1
    43ca:	ed b7       	in	r30, 0x3d	; 61
    43cc:	fe b7       	in	r31, 0x3e	; 62
    43ce:	81 82       	std	Z+1, r8	; 0x01
    43d0:	92 82       	std	Z+2, r9	; 0x02
    43d2:	12 96       	adiw	r26, 0x02	; 2
    43d4:	6d 92       	st	X+, r6
    43d6:	7c 92       	st	X, r7
    43d8:	13 97       	sbiw	r26, 0x03	; 3
    43da:	8a 81       	ldd	r24, Y+2	; 0x02
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	80 9f       	mul	r24, r16
    43e0:	f0 01       	movw	r30, r0
    43e2:	81 9f       	mul	r24, r17
    43e4:	f0 0d       	add	r31, r0
    43e6:	90 9f       	mul	r25, r16
    43e8:	f0 0d       	add	r31, r0
    43ea:	11 24       	eor	r1, r1
    43ec:	ea 5b       	subi	r30, 0xBA	; 186
    43ee:	fe 4d       	sbci	r31, 0xDE	; 222
    43f0:	84 89       	ldd	r24, Z+20	; 0x14
    43f2:	95 89       	ldd	r25, Z+21	; 0x15
    43f4:	81 c1       	rjmp	.+770    	; 0x46f8 <main+0x1146>
					lcdPrintData(temp_string,4);
					lcdPrintData("ms",2);
				}
			}
			else if(profile_edit_index == 4)
    43f6:	84 30       	cpi	r24, 0x04	; 4
    43f8:	09 f0       	breq	.+2      	; 0x43fc <main+0xe4a>
    43fa:	91 c1       	rjmp	.+802    	; 0x471e <main+0x116c>
			{
				lcdPrintData(" ",1);
    43fc:	80 e3       	ldi	r24, 0x30	; 48
    43fe:	90 e2       	ldi	r25, 0x20	; 32
    4400:	61 e0       	ldi	r22, 0x01	; 1
    4402:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    4406:	8a 81       	ldd	r24, Y+2	; 0x02
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	2d e1       	ldi	r18, 0x1D	; 29
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	82 9f       	mul	r24, r18
    4410:	f0 01       	movw	r30, r0
    4412:	83 9f       	mul	r24, r19
    4414:	f0 0d       	add	r31, r0
    4416:	92 9f       	mul	r25, r18
    4418:	f0 0d       	add	r31, r0
    441a:	11 24       	eor	r1, r1
    441c:	ea 5b       	subi	r30, 0xBA	; 186
    441e:	fe 4d       	sbci	r31, 0xDE	; 222
    4420:	87 85       	ldd	r24, Z+15	; 0x0f
    4422:	88 23       	and	r24, r24
    4424:	b9 f1       	breq	.+110    	; 0x4494 <main+0xee2>
					lcdPrintData("Stop=",5);
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	a9 f1       	breq	.+106    	; 0x4494 <main+0xee2>
					lcdPrintData("Stop=",5);
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == ACV)
    442a:	82 30       	cpi	r24, 0x02	; 2
    442c:	89 f5       	brne	.+98     	; 0x4490 <main+0xede>
				{
					lcdPrintData("Cycles=",7);
    442e:	87 ed       	ldi	r24, 0xD7	; 215
    4430:	90 e2       	ldi	r25, 0x20	; 32
    4432:	67 e0       	ldi	r22, 0x07	; 7
    4434:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    4438:	00 d0       	rcall	.+0      	; 0x443a <main+0xe88>
    443a:	00 d0       	rcall	.+0      	; 0x443c <main+0xe8a>
    443c:	00 d0       	rcall	.+0      	; 0x443e <main+0xe8c>
    443e:	ad b7       	in	r26, 0x3d	; 61
    4440:	be b7       	in	r27, 0x3e	; 62
    4442:	11 96       	adiw	r26, 0x01	; 1
    4444:	ed b7       	in	r30, 0x3d	; 61
    4446:	fe b7       	in	r31, 0x3e	; 62
    4448:	81 82       	std	Z+1, r8	; 0x01
    444a:	92 82       	std	Z+2, r9	; 0x02
    444c:	12 96       	adiw	r26, 0x02	; 2
    444e:	6d 92       	st	X+, r6
    4450:	7c 92       	st	X, r7
    4452:	13 97       	sbiw	r26, 0x03	; 3
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	2d e1       	ldi	r18, 0x1D	; 29
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	82 9f       	mul	r24, r18
    445e:	f0 01       	movw	r30, r0
    4460:	83 9f       	mul	r24, r19
    4462:	f0 0d       	add	r31, r0
    4464:	92 9f       	mul	r25, r18
    4466:	f0 0d       	add	r31, r0
    4468:	11 24       	eor	r1, r1
    446a:	ea 5b       	subi	r30, 0xBA	; 186
    446c:	fe 4d       	sbci	r31, 0xDE	; 222
    446e:	84 89       	ldd	r24, Z+20	; 0x14
    4470:	95 89       	ldd	r25, Z+21	; 0x15
    4472:	14 96       	adiw	r26, 0x04	; 4
    4474:	8d 93       	st	X+, r24
    4476:	9c 93       	st	X, r25
    4478:	15 97       	sbiw	r26, 0x05	; 5
    447a:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    447e:	2d b7       	in	r18, 0x3d	; 61
    4480:	3e b7       	in	r19, 0x3e	; 62
    4482:	2a 5f       	subi	r18, 0xFA	; 250
    4484:	3f 4f       	sbci	r19, 0xFF	; 255
    4486:	2d bf       	out	0x3d, r18	; 61
    4488:	3e bf       	out	0x3e, r19	; 62
    448a:	c4 01       	movw	r24, r8
    448c:	64 e0       	ldi	r22, 0x04	; 4
    448e:	6e c0       	rjmp	.+220    	; 0x456c <main+0xfba>
				}
				else if(profiles[profile_index].type == LSV)
    4490:	83 30       	cpi	r24, 0x03	; 3
    4492:	a9 f5       	brne	.+106    	; 0x44fe <main+0xf4c>
				{
					lcdPrintData("Stop=",5);
    4494:	81 ed       	ldi	r24, 0xD1	; 209
    4496:	90 e2       	ldi	r25, 0x20	; 32
    4498:	65 e0       	ldi	r22, 0x05	; 5
    449a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <main+0xeee>
    44a0:	00 d0       	rcall	.+0      	; 0x44a2 <main+0xef0>
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <main+0xef2>
    44a4:	ad b7       	in	r26, 0x3d	; 61
    44a6:	be b7       	in	r27, 0x3e	; 62
    44a8:	11 96       	adiw	r26, 0x01	; 1
    44aa:	ed b7       	in	r30, 0x3d	; 61
    44ac:	fe b7       	in	r31, 0x3e	; 62
    44ae:	81 82       	std	Z+1, r8	; 0x01
    44b0:	92 82       	std	Z+2, r9	; 0x02
    44b2:	12 96       	adiw	r26, 0x02	; 2
    44b4:	6d 92       	st	X+, r6
    44b6:	7c 92       	st	X, r7
    44b8:	13 97       	sbiw	r26, 0x03	; 3
    44ba:	8a 81       	ldd	r24, Y+2	; 0x02
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	2d e1       	ldi	r18, 0x1D	; 29
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	82 9f       	mul	r24, r18
    44c4:	f0 01       	movw	r30, r0
    44c6:	83 9f       	mul	r24, r19
    44c8:	f0 0d       	add	r31, r0
    44ca:	92 9f       	mul	r25, r18
    44cc:	f0 0d       	add	r31, r0
    44ce:	11 24       	eor	r1, r1
    44d0:	ea 5b       	subi	r30, 0xBA	; 186
    44d2:	fe 4d       	sbci	r31, 0xDE	; 222
    44d4:	84 89       	ldd	r24, Z+20	; 0x14
    44d6:	95 89       	ldd	r25, Z+21	; 0x15
    44d8:	14 96       	adiw	r26, 0x04	; 4
    44da:	8d 93       	st	X+, r24
    44dc:	9c 93       	st	X, r25
    44de:	15 97       	sbiw	r26, 0x05	; 5
    44e0:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    44e4:	2d b7       	in	r18, 0x3d	; 61
    44e6:	3e b7       	in	r19, 0x3e	; 62
    44e8:	2a 5f       	subi	r18, 0xFA	; 250
    44ea:	3f 4f       	sbci	r19, 0xFF	; 255
    44ec:	2d bf       	out	0x3d, r18	; 61
    44ee:	3e bf       	out	0x3e, r19	; 62
    44f0:	c4 01       	movw	r24, r8
    44f2:	64 e0       	ldi	r22, 0x04	; 4
    44f4:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    44f8:	84 ea       	ldi	r24, 0xA4	; 164
    44fa:	90 e2       	ldi	r25, 0x20	; 32
    44fc:	36 c0       	rjmp	.+108    	; 0x456a <main+0xfb8>
				}
				else if(profiles[profile_index].type == CA)
    44fe:	85 30       	cpi	r24, 0x05	; 5
    4500:	b9 f5       	brne	.+110    	; 0x4570 <main+0xfbe>
				{
					lcdPrintData("Step W=",7);
    4502:	8f ed       	ldi	r24, 0xDF	; 223
    4504:	90 e2       	ldi	r25, 0x20	; 32
    4506:	67 e0       	ldi	r22, 0x07	; 7
    4508:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op3);
    450c:	00 d0       	rcall	.+0      	; 0x450e <main+0xf5c>
    450e:	00 d0       	rcall	.+0      	; 0x4510 <main+0xf5e>
    4510:	00 d0       	rcall	.+0      	; 0x4512 <main+0xf60>
    4512:	ad b7       	in	r26, 0x3d	; 61
    4514:	be b7       	in	r27, 0x3e	; 62
    4516:	11 96       	adiw	r26, 0x01	; 1
    4518:	ed b7       	in	r30, 0x3d	; 61
    451a:	fe b7       	in	r31, 0x3e	; 62
    451c:	81 82       	std	Z+1, r8	; 0x01
    451e:	92 82       	std	Z+2, r9	; 0x02
    4520:	12 96       	adiw	r26, 0x02	; 2
    4522:	6d 92       	st	X+, r6
    4524:	7c 92       	st	X, r7
    4526:	13 97       	sbiw	r26, 0x03	; 3
    4528:	8a 81       	ldd	r24, Y+2	; 0x02
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	2d e1       	ldi	r18, 0x1D	; 29
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	82 9f       	mul	r24, r18
    4532:	f0 01       	movw	r30, r0
    4534:	83 9f       	mul	r24, r19
    4536:	f0 0d       	add	r31, r0
    4538:	92 9f       	mul	r25, r18
    453a:	f0 0d       	add	r31, r0
    453c:	11 24       	eor	r1, r1
    453e:	ea 5b       	subi	r30, 0xBA	; 186
    4540:	fe 4d       	sbci	r31, 0xDE	; 222
    4542:	84 89       	ldd	r24, Z+20	; 0x14
    4544:	95 89       	ldd	r25, Z+21	; 0x15
    4546:	14 96       	adiw	r26, 0x04	; 4
    4548:	8d 93       	st	X+, r24
    454a:	9c 93       	st	X, r25
    454c:	15 97       	sbiw	r26, 0x05	; 5
    454e:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4552:	2d b7       	in	r18, 0x3d	; 61
    4554:	3e b7       	in	r19, 0x3e	; 62
    4556:	2a 5f       	subi	r18, 0xFA	; 250
    4558:	3f 4f       	sbci	r19, 0xFF	; 255
    455a:	2d bf       	out	0x3d, r18	; 61
    455c:	3e bf       	out	0x3e, r19	; 62
    455e:	c4 01       	movw	r24, r8
    4560:	64 e0       	ldi	r22, 0x04	; 4
    4562:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("ms",2);
    4566:	8d ea       	ldi	r24, 0xAD	; 173
    4568:	90 e2       	ldi	r25, 0x20	; 32
    456a:	62 e0       	ldi	r22, 0x02	; 2
    456c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	62 e0       	ldi	r22, 0x02	; 2
    4574:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    4578:	8d 81       	ldd	r24, Y+5	; 0x05
    457a:	88 23       	and	r24, r24
    457c:	19 f4       	brne	.+6      	; 0x4584 <main+0xfd2>
					lcdPrintData("~",1);
    457e:	8e e2       	ldi	r24, 0x2E	; 46
    4580:	90 e2       	ldi	r25, 0x20	; 32
    4582:	02 c0       	rjmp	.+4      	; 0x4588 <main+0xfd6>
				else
					lcdPrintData(">",1);
    4584:	89 e4       	ldi	r24, 0x49	; 73
    4586:	90 e2       	ldi	r25, 0x20	; 32
    4588:	61 e0       	ldi	r22, 0x01	; 1
    458a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				
				if(profiles[profile_index].type == SWV)
    458e:	8a 81       	ldd	r24, Y+2	; 0x02
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	0d e1       	ldi	r16, 0x1D	; 29
    4594:	10 e0       	ldi	r17, 0x00	; 0
    4596:	80 9f       	mul	r24, r16
    4598:	f0 01       	movw	r30, r0
    459a:	81 9f       	mul	r24, r17
    459c:	f0 0d       	add	r31, r0
    459e:	90 9f       	mul	r25, r16
    45a0:	f0 0d       	add	r31, r0
    45a2:	11 24       	eor	r1, r1
    45a4:	ea 5b       	subi	r30, 0xBA	; 186
    45a6:	fe 4d       	sbci	r31, 0xDE	; 222
    45a8:	87 85       	ldd	r24, Z+15	; 0x0f
    45aa:	88 23       	and	r24, r24
    45ac:	21 f4       	brne	.+8      	; 0x45b6 <main+0x1004>
				{
					lcdPrintData("Height=",7);
    45ae:	87 eb       	ldi	r24, 0xB7	; 183
    45b0:	90 e2       	ldi	r25, 0x20	; 32
    45b2:	67 e0       	ldi	r22, 0x07	; 7
    45b4:	2a c0       	rjmp	.+84     	; 0x460a <main+0x1058>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    45b6:	81 30       	cpi	r24, 0x01	; 1
    45b8:	19 f5       	brne	.+70     	; 0x4600 <main+0x104e>
				{
					lcdPrintData("# of Scans=",11);
    45ba:	87 ee       	ldi	r24, 0xE7	; 231
    45bc:	90 e2       	ldi	r25, 0x20	; 32
    45be:	6b e0       	ldi	r22, 0x0B	; 11
    45c0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%2d",profiles[profile_index].op4);
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <main+0x1014>
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <main+0x1016>
    45c8:	00 d0       	rcall	.+0      	; 0x45ca <main+0x1018>
    45ca:	ad b7       	in	r26, 0x3d	; 61
    45cc:	be b7       	in	r27, 0x3e	; 62
    45ce:	11 96       	adiw	r26, 0x01	; 1
    45d0:	ed b7       	in	r30, 0x3d	; 61
    45d2:	fe b7       	in	r31, 0x3e	; 62
    45d4:	81 82       	std	Z+1, r8	; 0x01
    45d6:	92 82       	std	Z+2, r9	; 0x02
    45d8:	23 ef       	ldi	r18, 0xF3	; 243
    45da:	30 e2       	ldi	r19, 0x20	; 32
    45dc:	12 96       	adiw	r26, 0x02	; 2
    45de:	2d 93       	st	X+, r18
    45e0:	3c 93       	st	X, r19
    45e2:	13 97       	sbiw	r26, 0x03	; 3
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	80 9f       	mul	r24, r16
    45ea:	f0 01       	movw	r30, r0
    45ec:	81 9f       	mul	r24, r17
    45ee:	f0 0d       	add	r31, r0
    45f0:	90 9f       	mul	r25, r16
    45f2:	f0 0d       	add	r31, r0
    45f4:	11 24       	eor	r1, r1
    45f6:	ea 5b       	subi	r30, 0xBA	; 186
    45f8:	fe 4d       	sbci	r31, 0xDE	; 222
    45fa:	86 89       	ldd	r24, Z+22	; 0x16
    45fc:	97 89       	ldd	r25, Z+23	; 0x17
    45fe:	95 c3       	rjmp	.+1834   	; 0x4d2a <main+0x1778>
					lcdPrintData(temp_string,2);
				}
				else if(profiles[profile_index].type == ACV)
    4600:	82 30       	cpi	r24, 0x02	; 2
    4602:	09 f5       	brne	.+66     	; 0x4646 <main+0x1094>
				{
					lcdPrintData("Start=",6);
    4604:	80 eb       	ldi	r24, 0xB0	; 176
    4606:	90 e2       	ldi	r25, 0x20	; 32
    4608:	66 e0       	ldi	r22, 0x06	; 6
    460a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    460e:	00 d0       	rcall	.+0      	; 0x4610 <main+0x105e>
    4610:	00 d0       	rcall	.+0      	; 0x4612 <main+0x1060>
    4612:	00 d0       	rcall	.+0      	; 0x4614 <main+0x1062>
    4614:	ad b7       	in	r26, 0x3d	; 61
    4616:	be b7       	in	r27, 0x3e	; 62
    4618:	11 96       	adiw	r26, 0x01	; 1
    461a:	ed b7       	in	r30, 0x3d	; 61
    461c:	fe b7       	in	r31, 0x3e	; 62
    461e:	81 82       	std	Z+1, r8	; 0x01
    4620:	92 82       	std	Z+2, r9	; 0x02
    4622:	12 96       	adiw	r26, 0x02	; 2
    4624:	6d 92       	st	X+, r6
    4626:	7c 92       	st	X, r7
    4628:	13 97       	sbiw	r26, 0x03	; 3
    462a:	8a 81       	ldd	r24, Y+2	; 0x02
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	80 9f       	mul	r24, r16
    4630:	f0 01       	movw	r30, r0
    4632:	81 9f       	mul	r24, r17
    4634:	f0 0d       	add	r31, r0
    4636:	90 9f       	mul	r25, r16
    4638:	f0 0d       	add	r31, r0
    463a:	11 24       	eor	r1, r1
    463c:	ea 5b       	subi	r30, 0xBA	; 186
    463e:	fe 4d       	sbci	r31, 0xDE	; 222
    4640:	86 89       	ldd	r24, Z+22	; 0x16
    4642:	97 89       	ldd	r25, Z+23	; 0x17
    4644:	21 c3       	rjmp	.+1602   	; 0x4c88 <main+0x16d6>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == LSV)
    4646:	83 30       	cpi	r24, 0x03	; 3
    4648:	a1 f5       	brne	.+104    	; 0x46b2 <main+0x1100>
				{
					lcdPrintData("Slope=",6);
    464a:	81 e8       	ldi	r24, 0x81	; 129
    464c:	90 e2       	ldi	r25, 0x20	; 32
    464e:	66 e0       	ldi	r22, 0x06	; 6
    4650:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    4654:	00 d0       	rcall	.+0      	; 0x4656 <main+0x10a4>
    4656:	00 d0       	rcall	.+0      	; 0x4658 <main+0x10a6>
    4658:	00 d0       	rcall	.+0      	; 0x465a <main+0x10a8>
    465a:	ad b7       	in	r26, 0x3d	; 61
    465c:	be b7       	in	r27, 0x3e	; 62
    465e:	11 96       	adiw	r26, 0x01	; 1
    4660:	ed b7       	in	r30, 0x3d	; 61
    4662:	fe b7       	in	r31, 0x3e	; 62
    4664:	81 82       	std	Z+1, r8	; 0x01
    4666:	92 82       	std	Z+2, r9	; 0x02
    4668:	12 96       	adiw	r26, 0x02	; 2
    466a:	6d 92       	st	X+, r6
    466c:	7c 92       	st	X, r7
    466e:	13 97       	sbiw	r26, 0x03	; 3
    4670:	8a 81       	ldd	r24, Y+2	; 0x02
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	80 9f       	mul	r24, r16
    4676:	f0 01       	movw	r30, r0
    4678:	81 9f       	mul	r24, r17
    467a:	f0 0d       	add	r31, r0
    467c:	90 9f       	mul	r25, r16
    467e:	f0 0d       	add	r31, r0
    4680:	11 24       	eor	r1, r1
    4682:	ea 5b       	subi	r30, 0xBA	; 186
    4684:	fe 4d       	sbci	r31, 0xDE	; 222
    4686:	86 89       	ldd	r24, Z+22	; 0x16
    4688:	97 89       	ldd	r25, Z+23	; 0x17
    468a:	14 96       	adiw	r26, 0x04	; 4
    468c:	8d 93       	st	X+, r24
    468e:	9c 93       	st	X, r25
    4690:	15 97       	sbiw	r26, 0x05	; 5
    4692:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4696:	2d b7       	in	r18, 0x3d	; 61
    4698:	3e b7       	in	r19, 0x3e	; 62
    469a:	2a 5f       	subi	r18, 0xFA	; 250
    469c:	3f 4f       	sbci	r19, 0xFF	; 255
    469e:	2d bf       	out	0x3d, r18	; 61
    46a0:	3e bf       	out	0x3e, r19	; 62
    46a2:	c4 01       	movw	r24, r8
    46a4:	64 e0       	ldi	r22, 0x04	; 4
    46a6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV/s",4);
    46aa:	8c e8       	ldi	r24, 0x8C	; 140
    46ac:	90 e2       	ldi	r25, 0x20	; 32
    46ae:	64 e0       	ldi	r22, 0x04	; 4
    46b0:	f8 c3       	rjmp	.+2032   	; 0x4ea2 <main+0x18f0>
				}
				else if(profiles[profile_index].type == CA)
    46b2:	85 30       	cpi	r24, 0x05	; 5
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <main+0x1106>
    46b6:	f7 c3       	rjmp	.+2030   	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("Quiet=",6);
    46b8:	87 ef       	ldi	r24, 0xF7	; 247
    46ba:	90 e2       	ldi	r25, 0x20	; 32
    46bc:	66 e0       	ldi	r22, 0x06	; 6
    46be:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <main+0x1112>
    46c4:	00 d0       	rcall	.+0      	; 0x46c6 <main+0x1114>
    46c6:	00 d0       	rcall	.+0      	; 0x46c8 <main+0x1116>
    46c8:	ad b7       	in	r26, 0x3d	; 61
    46ca:	be b7       	in	r27, 0x3e	; 62
    46cc:	11 96       	adiw	r26, 0x01	; 1
    46ce:	ed b7       	in	r30, 0x3d	; 61
    46d0:	fe b7       	in	r31, 0x3e	; 62
    46d2:	81 82       	std	Z+1, r8	; 0x01
    46d4:	92 82       	std	Z+2, r9	; 0x02
    46d6:	12 96       	adiw	r26, 0x02	; 2
    46d8:	6d 92       	st	X+, r6
    46da:	7c 92       	st	X, r7
    46dc:	13 97       	sbiw	r26, 0x03	; 3
    46de:	8a 81       	ldd	r24, Y+2	; 0x02
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	80 9f       	mul	r24, r16
    46e4:	f0 01       	movw	r30, r0
    46e6:	81 9f       	mul	r24, r17
    46e8:	f0 0d       	add	r31, r0
    46ea:	90 9f       	mul	r25, r16
    46ec:	f0 0d       	add	r31, r0
    46ee:	11 24       	eor	r1, r1
    46f0:	ea 5b       	subi	r30, 0xBA	; 186
    46f2:	fe 4d       	sbci	r31, 0xDE	; 222
    46f4:	86 89       	ldd	r24, Z+22	; 0x16
    46f6:	97 89       	ldd	r25, Z+23	; 0x17
    46f8:	14 96       	adiw	r26, 0x04	; 4
    46fa:	8d 93       	st	X+, r24
    46fc:	9c 93       	st	X, r25
    46fe:	15 97       	sbiw	r26, 0x05	; 5
    4700:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4704:	2d b7       	in	r18, 0x3d	; 61
    4706:	3e b7       	in	r19, 0x3e	; 62
    4708:	2a 5f       	subi	r18, 0xFA	; 250
    470a:	3f 4f       	sbci	r19, 0xFF	; 255
    470c:	2d bf       	out	0x3d, r18	; 61
    470e:	3e bf       	out	0x3e, r19	; 62
    4710:	c4 01       	movw	r24, r8
    4712:	64 e0       	ldi	r22, 0x04	; 4
    4714:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("ms",2);
    4718:	8d ea       	ldi	r24, 0xAD	; 173
    471a:	90 e2       	ldi	r25, 0x20	; 32
    471c:	12 c3       	rjmp	.+1572   	; 0x4d42 <main+0x1790>
				}
			}
			else if(profile_edit_index == 5)
    471e:	85 30       	cpi	r24, 0x05	; 5
    4720:	09 f0       	breq	.+2      	; 0x4724 <main+0x1172>
    4722:	a0 c1       	rjmp	.+832    	; 0x4a64 <main+0x14b2>
			{
				lcdPrintData(" ",1);
    4724:	80 e3       	ldi	r24, 0x30	; 48
    4726:	90 e2       	ldi	r25, 0x20	; 32
    4728:	61 e0       	ldi	r22, 0x01	; 1
    472a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	0d e1       	ldi	r16, 0x1D	; 29
    4734:	10 e0       	ldi	r17, 0x00	; 0
    4736:	80 9f       	mul	r24, r16
    4738:	f0 01       	movw	r30, r0
    473a:	81 9f       	mul	r24, r17
    473c:	f0 0d       	add	r31, r0
    473e:	90 9f       	mul	r25, r16
    4740:	f0 0d       	add	r31, r0
    4742:	11 24       	eor	r1, r1
    4744:	ea 5b       	subi	r30, 0xBA	; 186
    4746:	fe 4d       	sbci	r31, 0xDE	; 222
    4748:	87 85       	ldd	r24, Z+15	; 0x0f
    474a:	88 23       	and	r24, r24
    474c:	21 f4       	brne	.+8      	; 0x4756 <main+0x11a4>
				{
					lcdPrintData("Height=",7);
    474e:	87 eb       	ldi	r24, 0xB7	; 183
    4750:	90 e2       	ldi	r25, 0x20	; 32
    4752:	67 e0       	ldi	r22, 0x07	; 7
    4754:	36 c0       	rjmp	.+108    	; 0x47c2 <main+0x1210>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4756:	81 30       	cpi	r24, 0x01	; 1
    4758:	79 f5       	brne	.+94     	; 0x47b8 <main+0x1206>
				{
					lcdPrintData("# of Scans=",11);
    475a:	87 ee       	ldi	r24, 0xE7	; 231
    475c:	90 e2       	ldi	r25, 0x20	; 32
    475e:	6b e0       	ldi	r22, 0x0B	; 11
    4760:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%2d",profiles[profile_index].op4);
    4764:	00 d0       	rcall	.+0      	; 0x4766 <main+0x11b4>
    4766:	00 d0       	rcall	.+0      	; 0x4768 <main+0x11b6>
    4768:	00 d0       	rcall	.+0      	; 0x476a <main+0x11b8>
    476a:	ad b7       	in	r26, 0x3d	; 61
    476c:	be b7       	in	r27, 0x3e	; 62
    476e:	11 96       	adiw	r26, 0x01	; 1
    4770:	ed b7       	in	r30, 0x3d	; 61
    4772:	fe b7       	in	r31, 0x3e	; 62
    4774:	81 82       	std	Z+1, r8	; 0x01
    4776:	92 82       	std	Z+2, r9	; 0x02
    4778:	23 ef       	ldi	r18, 0xF3	; 243
    477a:	30 e2       	ldi	r19, 0x20	; 32
    477c:	12 96       	adiw	r26, 0x02	; 2
    477e:	2d 93       	st	X+, r18
    4780:	3c 93       	st	X, r19
    4782:	13 97       	sbiw	r26, 0x03	; 3
    4784:	8a 81       	ldd	r24, Y+2	; 0x02
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	80 9f       	mul	r24, r16
    478a:	f0 01       	movw	r30, r0
    478c:	81 9f       	mul	r24, r17
    478e:	f0 0d       	add	r31, r0
    4790:	90 9f       	mul	r25, r16
    4792:	f0 0d       	add	r31, r0
    4794:	11 24       	eor	r1, r1
    4796:	ea 5b       	subi	r30, 0xBA	; 186
    4798:	fe 4d       	sbci	r31, 0xDE	; 222
    479a:	86 89       	ldd	r24, Z+22	; 0x16
    479c:	97 89       	ldd	r25, Z+23	; 0x17
    479e:	14 96       	adiw	r26, 0x04	; 4
    47a0:	8d 93       	st	X+, r24
    47a2:	9c 93       	st	X, r25
    47a4:	15 97       	sbiw	r26, 0x05	; 5
    47a6:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,2);
    47aa:	8d b7       	in	r24, 0x3d	; 61
    47ac:	9e b7       	in	r25, 0x3e	; 62
    47ae:	06 96       	adiw	r24, 0x06	; 6
    47b0:	8d bf       	out	0x3d, r24	; 61
    47b2:	9e bf       	out	0x3e, r25	; 62
    47b4:	c4 01       	movw	r24, r8
    47b6:	9f c0       	rjmp	.+318    	; 0x48f6 <main+0x1344>
				}
				else if(profiles[profile_index].type == ACV)
    47b8:	82 30       	cpi	r24, 0x02	; 2
    47ba:	99 f5       	brne	.+102    	; 0x4822 <main+0x1270>
				{
					lcdPrintData("Start=",6);
    47bc:	80 eb       	ldi	r24, 0xB0	; 176
    47be:	90 e2       	ldi	r25, 0x20	; 32
    47c0:	66 e0       	ldi	r22, 0x06	; 6
    47c2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    47c6:	00 d0       	rcall	.+0      	; 0x47c8 <main+0x1216>
    47c8:	00 d0       	rcall	.+0      	; 0x47ca <main+0x1218>
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <main+0x121a>
    47cc:	ad b7       	in	r26, 0x3d	; 61
    47ce:	be b7       	in	r27, 0x3e	; 62
    47d0:	11 96       	adiw	r26, 0x01	; 1
    47d2:	ed b7       	in	r30, 0x3d	; 61
    47d4:	fe b7       	in	r31, 0x3e	; 62
    47d6:	81 82       	std	Z+1, r8	; 0x01
    47d8:	92 82       	std	Z+2, r9	; 0x02
    47da:	12 96       	adiw	r26, 0x02	; 2
    47dc:	6d 92       	st	X+, r6
    47de:	7c 92       	st	X, r7
    47e0:	13 97       	sbiw	r26, 0x03	; 3
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	80 9f       	mul	r24, r16
    47e8:	f0 01       	movw	r30, r0
    47ea:	81 9f       	mul	r24, r17
    47ec:	f0 0d       	add	r31, r0
    47ee:	90 9f       	mul	r25, r16
    47f0:	f0 0d       	add	r31, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	ea 5b       	subi	r30, 0xBA	; 186
    47f6:	fe 4d       	sbci	r31, 0xDE	; 222
    47f8:	86 89       	ldd	r24, Z+22	; 0x16
    47fa:	97 89       	ldd	r25, Z+23	; 0x17
    47fc:	14 96       	adiw	r26, 0x04	; 4
    47fe:	8d 93       	st	X+, r24
    4800:	9c 93       	st	X, r25
    4802:	15 97       	sbiw	r26, 0x05	; 5
    4804:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4808:	2d b7       	in	r18, 0x3d	; 61
    480a:	3e b7       	in	r19, 0x3e	; 62
    480c:	2a 5f       	subi	r18, 0xFA	; 250
    480e:	3f 4f       	sbci	r19, 0xFF	; 255
    4810:	2d bf       	out	0x3d, r18	; 61
    4812:	3e bf       	out	0x3e, r19	; 62
    4814:	c4 01       	movw	r24, r8
    4816:	64 e0       	ldi	r22, 0x04	; 4
    4818:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    481c:	84 ea       	ldi	r24, 0xA4	; 164
    481e:	90 e2       	ldi	r25, 0x20	; 32
    4820:	6a c0       	rjmp	.+212    	; 0x48f6 <main+0x1344>
				}
				else if(profiles[profile_index].type == LSV)
    4822:	83 30       	cpi	r24, 0x03	; 3
    4824:	a1 f5       	brne	.+104    	; 0x488e <main+0x12dc>
				{
					lcdPrintData("Slope=",6);
    4826:	81 e8       	ldi	r24, 0x81	; 129
    4828:	90 e2       	ldi	r25, 0x20	; 32
    482a:	66 e0       	ldi	r22, 0x06	; 6
    482c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    4830:	00 d0       	rcall	.+0      	; 0x4832 <main+0x1280>
    4832:	00 d0       	rcall	.+0      	; 0x4834 <main+0x1282>
    4834:	00 d0       	rcall	.+0      	; 0x4836 <main+0x1284>
    4836:	ad b7       	in	r26, 0x3d	; 61
    4838:	be b7       	in	r27, 0x3e	; 62
    483a:	11 96       	adiw	r26, 0x01	; 1
    483c:	ed b7       	in	r30, 0x3d	; 61
    483e:	fe b7       	in	r31, 0x3e	; 62
    4840:	81 82       	std	Z+1, r8	; 0x01
    4842:	92 82       	std	Z+2, r9	; 0x02
    4844:	12 96       	adiw	r26, 0x02	; 2
    4846:	6d 92       	st	X+, r6
    4848:	7c 92       	st	X, r7
    484a:	13 97       	sbiw	r26, 0x03	; 3
    484c:	8a 81       	ldd	r24, Y+2	; 0x02
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	80 9f       	mul	r24, r16
    4852:	f0 01       	movw	r30, r0
    4854:	81 9f       	mul	r24, r17
    4856:	f0 0d       	add	r31, r0
    4858:	90 9f       	mul	r25, r16
    485a:	f0 0d       	add	r31, r0
    485c:	11 24       	eor	r1, r1
    485e:	ea 5b       	subi	r30, 0xBA	; 186
    4860:	fe 4d       	sbci	r31, 0xDE	; 222
    4862:	86 89       	ldd	r24, Z+22	; 0x16
    4864:	97 89       	ldd	r25, Z+23	; 0x17
    4866:	14 96       	adiw	r26, 0x04	; 4
    4868:	8d 93       	st	X+, r24
    486a:	9c 93       	st	X, r25
    486c:	15 97       	sbiw	r26, 0x05	; 5
    486e:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4872:	2d b7       	in	r18, 0x3d	; 61
    4874:	3e b7       	in	r19, 0x3e	; 62
    4876:	2a 5f       	subi	r18, 0xFA	; 250
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	2d bf       	out	0x3d, r18	; 61
    487c:	3e bf       	out	0x3e, r19	; 62
    487e:	c4 01       	movw	r24, r8
    4880:	64 e0       	ldi	r22, 0x04	; 4
    4882:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV/s",4);
    4886:	8c e8       	ldi	r24, 0x8C	; 140
    4888:	90 e2       	ldi	r25, 0x20	; 32
    488a:	64 e0       	ldi	r22, 0x04	; 4
    488c:	35 c0       	rjmp	.+106    	; 0x48f8 <main+0x1346>
				}
				else if(profiles[profile_index].type == CA)
    488e:	85 30       	cpi	r24, 0x05	; 5
    4890:	a9 f5       	brne	.+106    	; 0x48fc <main+0x134a>
				{
					lcdPrintData("Quiet=",6);
    4892:	87 ef       	ldi	r24, 0xF7	; 247
    4894:	90 e2       	ldi	r25, 0x20	; 32
    4896:	66 e0       	ldi	r22, 0x06	; 6
    4898:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op4);
    489c:	00 d0       	rcall	.+0      	; 0x489e <main+0x12ec>
    489e:	00 d0       	rcall	.+0      	; 0x48a0 <main+0x12ee>
    48a0:	00 d0       	rcall	.+0      	; 0x48a2 <main+0x12f0>
    48a2:	ad b7       	in	r26, 0x3d	; 61
    48a4:	be b7       	in	r27, 0x3e	; 62
    48a6:	11 96       	adiw	r26, 0x01	; 1
    48a8:	ed b7       	in	r30, 0x3d	; 61
    48aa:	fe b7       	in	r31, 0x3e	; 62
    48ac:	81 82       	std	Z+1, r8	; 0x01
    48ae:	92 82       	std	Z+2, r9	; 0x02
    48b0:	12 96       	adiw	r26, 0x02	; 2
    48b2:	6d 92       	st	X+, r6
    48b4:	7c 92       	st	X, r7
    48b6:	13 97       	sbiw	r26, 0x03	; 3
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	80 9f       	mul	r24, r16
    48be:	f0 01       	movw	r30, r0
    48c0:	81 9f       	mul	r24, r17
    48c2:	f0 0d       	add	r31, r0
    48c4:	90 9f       	mul	r25, r16
    48c6:	f0 0d       	add	r31, r0
    48c8:	11 24       	eor	r1, r1
    48ca:	ea 5b       	subi	r30, 0xBA	; 186
    48cc:	fe 4d       	sbci	r31, 0xDE	; 222
    48ce:	86 89       	ldd	r24, Z+22	; 0x16
    48d0:	97 89       	ldd	r25, Z+23	; 0x17
    48d2:	14 96       	adiw	r26, 0x04	; 4
    48d4:	8d 93       	st	X+, r24
    48d6:	9c 93       	st	X, r25
    48d8:	15 97       	sbiw	r26, 0x05	; 5
    48da:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    48de:	2d b7       	in	r18, 0x3d	; 61
    48e0:	3e b7       	in	r19, 0x3e	; 62
    48e2:	2a 5f       	subi	r18, 0xFA	; 250
    48e4:	3f 4f       	sbci	r19, 0xFF	; 255
    48e6:	2d bf       	out	0x3d, r18	; 61
    48e8:	3e bf       	out	0x3e, r19	; 62
    48ea:	c4 01       	movw	r24, r8
    48ec:	64 e0       	ldi	r22, 0x04	; 4
    48ee:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("ms",2);
    48f2:	8d ea       	ldi	r24, 0xAD	; 173
    48f4:	90 e2       	ldi	r25, 0x20	; 32
    48f6:	62 e0       	ldi	r22, 0x02	; 2
    48f8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	62 e0       	ldi	r22, 0x02	; 2
    4900:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    4904:	8d 81       	ldd	r24, Y+5	; 0x05
    4906:	88 23       	and	r24, r24
    4908:	19 f4       	brne	.+6      	; 0x4910 <main+0x135e>
					lcdPrintData("~",1);
    490a:	8e e2       	ldi	r24, 0x2E	; 46
    490c:	90 e2       	ldi	r25, 0x20	; 32
    490e:	02 c0       	rjmp	.+4      	; 0x4914 <main+0x1362>
				else
					lcdPrintData(">",1);
    4910:	89 e4       	ldi	r24, 0x49	; 73
    4912:	90 e2       	ldi	r25, 0x20	; 32
    4914:	61 e0       	ldi	r22, 0x01	; 1
    4916:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				if(profiles[profile_index].type == SWV)
    491a:	8a 81       	ldd	r24, Y+2	; 0x02
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	0d e1       	ldi	r16, 0x1D	; 29
    4920:	10 e0       	ldi	r17, 0x00	; 0
    4922:	80 9f       	mul	r24, r16
    4924:	f0 01       	movw	r30, r0
    4926:	81 9f       	mul	r24, r17
    4928:	f0 0d       	add	r31, r0
    492a:	90 9f       	mul	r25, r16
    492c:	f0 0d       	add	r31, r0
    492e:	11 24       	eor	r1, r1
    4930:	ea 5b       	subi	r30, 0xBA	; 186
    4932:	fe 4d       	sbci	r31, 0xDE	; 222
    4934:	87 85       	ldd	r24, Z+15	; 0x0f
    4936:	88 23       	and	r24, r24
    4938:	19 f4       	brne	.+6      	; 0x4940 <main+0x138e>
				{
					lcdPrintData("Incr=",5);
    493a:	8e ef       	ldi	r24, 0xFE	; 254
    493c:	90 e2       	ldi	r25, 0x20	; 32
    493e:	06 c0       	rjmp	.+12     	; 0x494c <main+0x139a>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4940:	81 30       	cpi	r24, 0x01	; 1
    4942:	29 f1       	breq	.+74     	; 0x498e <main+0x13dc>
					lcdPrintData("SR=",3);
					sprintf(temp_string,"%3d",profiles[profile_index].op5);
					lcdPrintData(temp_string,3);
					lcdPrintData("mV/sample",9);
				}
				else if(profiles[profile_index].type == ACV)
    4944:	82 30       	cpi	r24, 0x02	; 2
    4946:	09 f5       	brne	.+66     	; 0x498a <main+0x13d8>
				{
					lcdPrintData("Stop=",5);
    4948:	81 ed       	ldi	r24, 0xD1	; 209
    494a:	90 e2       	ldi	r25, 0x20	; 32
    494c:	65 e0       	ldi	r22, 0x05	; 5
    494e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
    4952:	00 d0       	rcall	.+0      	; 0x4954 <main+0x13a2>
    4954:	00 d0       	rcall	.+0      	; 0x4956 <main+0x13a4>
    4956:	00 d0       	rcall	.+0      	; 0x4958 <main+0x13a6>
    4958:	ad b7       	in	r26, 0x3d	; 61
    495a:	be b7       	in	r27, 0x3e	; 62
    495c:	11 96       	adiw	r26, 0x01	; 1
    495e:	ed b7       	in	r30, 0x3d	; 61
    4960:	fe b7       	in	r31, 0x3e	; 62
    4962:	81 82       	std	Z+1, r8	; 0x01
    4964:	92 82       	std	Z+2, r9	; 0x02
    4966:	12 96       	adiw	r26, 0x02	; 2
    4968:	6d 92       	st	X+, r6
    496a:	7c 92       	st	X, r7
    496c:	13 97       	sbiw	r26, 0x03	; 3
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	80 9f       	mul	r24, r16
    4974:	f0 01       	movw	r30, r0
    4976:	81 9f       	mul	r24, r17
    4978:	f0 0d       	add	r31, r0
    497a:	90 9f       	mul	r25, r16
    497c:	f0 0d       	add	r31, r0
    497e:	11 24       	eor	r1, r1
    4980:	ea 5b       	subi	r30, 0xBA	; 186
    4982:	fe 4d       	sbci	r31, 0xDE	; 222
    4984:	80 8d       	ldd	r24, Z+24	; 0x18
    4986:	91 8d       	ldd	r25, Z+25	; 0x19
    4988:	7f c1       	rjmp	.+766    	; 0x4c88 <main+0x16d6>
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == LSV)
    498a:	83 30       	cpi	r24, 0x03	; 3
    498c:	a1 f5       	brne	.+104    	; 0x49f6 <main+0x1444>
				{
					lcdPrintData("SR=",3);
    498e:	84 e0       	ldi	r24, 0x04	; 4
    4990:	91 e2       	ldi	r25, 0x21	; 33
    4992:	63 e0       	ldi	r22, 0x03	; 3
    4994:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op5);
    4998:	00 d0       	rcall	.+0      	; 0x499a <main+0x13e8>
    499a:	00 d0       	rcall	.+0      	; 0x499c <main+0x13ea>
    499c:	00 d0       	rcall	.+0      	; 0x499e <main+0x13ec>
    499e:	ad b7       	in	r26, 0x3d	; 61
    49a0:	be b7       	in	r27, 0x3e	; 62
    49a2:	11 96       	adiw	r26, 0x01	; 1
    49a4:	ed b7       	in	r30, 0x3d	; 61
    49a6:	fe b7       	in	r31, 0x3e	; 62
    49a8:	81 82       	std	Z+1, r8	; 0x01
    49aa:	92 82       	std	Z+2, r9	; 0x02
    49ac:	12 96       	adiw	r26, 0x02	; 2
    49ae:	4d 92       	st	X+, r4
    49b0:	5c 92       	st	X, r5
    49b2:	13 97       	sbiw	r26, 0x03	; 3
    49b4:	8a 81       	ldd	r24, Y+2	; 0x02
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	80 9f       	mul	r24, r16
    49ba:	f0 01       	movw	r30, r0
    49bc:	81 9f       	mul	r24, r17
    49be:	f0 0d       	add	r31, r0
    49c0:	90 9f       	mul	r25, r16
    49c2:	f0 0d       	add	r31, r0
    49c4:	11 24       	eor	r1, r1
    49c6:	ea 5b       	subi	r30, 0xBA	; 186
    49c8:	fe 4d       	sbci	r31, 0xDE	; 222
    49ca:	80 8d       	ldd	r24, Z+24	; 0x18
    49cc:	91 8d       	ldd	r25, Z+25	; 0x19
    49ce:	14 96       	adiw	r26, 0x04	; 4
    49d0:	8d 93       	st	X+, r24
    49d2:	9c 93       	st	X, r25
    49d4:	15 97       	sbiw	r26, 0x05	; 5
    49d6:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,3);
    49da:	2d b7       	in	r18, 0x3d	; 61
    49dc:	3e b7       	in	r19, 0x3e	; 62
    49de:	2a 5f       	subi	r18, 0xFA	; 250
    49e0:	3f 4f       	sbci	r19, 0xFF	; 255
    49e2:	2d bf       	out	0x3d, r18	; 61
    49e4:	3e bf       	out	0x3e, r19	; 62
    49e6:	c4 01       	movw	r24, r8
    49e8:	63 e0       	ldi	r22, 0x03	; 3
    49ea:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV/sample",9);
    49ee:	88 e0       	ldi	r24, 0x08	; 8
    49f0:	91 e2       	ldi	r25, 0x21	; 33
    49f2:	69 e0       	ldi	r22, 0x09	; 9
    49f4:	56 c2       	rjmp	.+1196   	; 0x4ea2 <main+0x18f0>
				}
				else if(profiles[profile_index].type == CA)
    49f6:	85 30       	cpi	r24, 0x05	; 5
    49f8:	09 f0       	breq	.+2      	; 0x49fc <main+0x144a>
    49fa:	55 c2       	rjmp	.+1194   	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("SR=",3);
    49fc:	84 e0       	ldi	r24, 0x04	; 4
    49fe:	91 e2       	ldi	r25, 0x21	; 33
    4a00:	63 e0       	ldi	r22, 0x03	; 3
    4a02:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <main+0x1456>
    4a08:	00 d0       	rcall	.+0      	; 0x4a0a <main+0x1458>
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <main+0x145a>
    4a0c:	ad b7       	in	r26, 0x3d	; 61
    4a0e:	be b7       	in	r27, 0x3e	; 62
    4a10:	11 96       	adiw	r26, 0x01	; 1
    4a12:	ed b7       	in	r30, 0x3d	; 61
    4a14:	fe b7       	in	r31, 0x3e	; 62
    4a16:	81 82       	std	Z+1, r8	; 0x01
    4a18:	92 82       	std	Z+2, r9	; 0x02
    4a1a:	12 96       	adiw	r26, 0x02	; 2
    4a1c:	6d 92       	st	X+, r6
    4a1e:	7c 92       	st	X, r7
    4a20:	13 97       	sbiw	r26, 0x03	; 3
    4a22:	8a 81       	ldd	r24, Y+2	; 0x02
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	80 9f       	mul	r24, r16
    4a28:	f0 01       	movw	r30, r0
    4a2a:	81 9f       	mul	r24, r17
    4a2c:	f0 0d       	add	r31, r0
    4a2e:	90 9f       	mul	r25, r16
    4a30:	f0 0d       	add	r31, r0
    4a32:	11 24       	eor	r1, r1
    4a34:	ea 5b       	subi	r30, 0xBA	; 186
    4a36:	fe 4d       	sbci	r31, 0xDE	; 222
    4a38:	80 8d       	ldd	r24, Z+24	; 0x18
    4a3a:	91 8d       	ldd	r25, Z+25	; 0x19
    4a3c:	14 96       	adiw	r26, 0x04	; 4
    4a3e:	8d 93       	st	X+, r24
    4a40:	9c 93       	st	X, r25
    4a42:	15 97       	sbiw	r26, 0x05	; 5
    4a44:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4a48:	2d b7       	in	r18, 0x3d	; 61
    4a4a:	3e b7       	in	r19, 0x3e	; 62
    4a4c:	2a 5f       	subi	r18, 0xFA	; 250
    4a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a50:	2d bf       	out	0x3d, r18	; 61
    4a52:	3e bf       	out	0x3e, r19	; 62
    4a54:	c4 01       	movw	r24, r8
    4a56:	64 e0       	ldi	r22, 0x04	; 4
    4a58:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("sample/s",8);
    4a5c:	82 e1       	ldi	r24, 0x12	; 18
    4a5e:	91 e2       	ldi	r25, 0x21	; 33
    4a60:	68 e0       	ldi	r22, 0x08	; 8
    4a62:	1f c2       	rjmp	.+1086   	; 0x4ea2 <main+0x18f0>
				}
				
			}
			else if(profile_edit_index == 6)
    4a64:	86 30       	cpi	r24, 0x06	; 6
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <main+0x14b8>
    4a68:	6e c1       	rjmp	.+732    	; 0x4d46 <main+0x1794>
			{

				lcdPrintData(" ",1);
    4a6a:	80 e3       	ldi	r24, 0x30	; 48
    4a6c:	90 e2       	ldi	r25, 0x20	; 32
    4a6e:	61 e0       	ldi	r22, 0x01	; 1
    4a70:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].type == SWV)
    4a74:	8a 81       	ldd	r24, Y+2	; 0x02
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	0d e1       	ldi	r16, 0x1D	; 29
    4a7a:	10 e0       	ldi	r17, 0x00	; 0
    4a7c:	80 9f       	mul	r24, r16
    4a7e:	f0 01       	movw	r30, r0
    4a80:	81 9f       	mul	r24, r17
    4a82:	f0 0d       	add	r31, r0
    4a84:	90 9f       	mul	r25, r16
    4a86:	f0 0d       	add	r31, r0
    4a88:	11 24       	eor	r1, r1
    4a8a:	ea 5b       	subi	r30, 0xBA	; 186
    4a8c:	fe 4d       	sbci	r31, 0xDE	; 222
    4a8e:	87 85       	ldd	r24, Z+15	; 0x0f
    4a90:	88 23       	and	r24, r24
    4a92:	19 f4       	brne	.+6      	; 0x4a9a <main+0x14e8>
				{
					lcdPrintData("Incr=",5);
    4a94:	8e ef       	ldi	r24, 0xFE	; 254
    4a96:	90 e2       	ldi	r25, 0x20	; 32
    4a98:	06 c0       	rjmp	.+12     	; 0x4aa6 <main+0x14f4>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
					lcdPrintData(temp_string,4);
					lcdPrintData("mV",2);
				}
				else if(profiles[profile_index].type == CV)
    4a9a:	81 30       	cpi	r24, 0x01	; 1
    4a9c:	c1 f1       	breq	.+112    	; 0x4b0e <main+0x155c>
					lcdPrintData("SR=",3);
					sprintf(temp_string,"%3d",profiles[profile_index].op5);
					lcdPrintData(temp_string,3);
					lcdPrintData("mV/sample",9);
				}
				else if(profiles[profile_index].type == ACV)
    4a9e:	82 30       	cpi	r24, 0x02	; 2
    4aa0:	a1 f5       	brne	.+104    	; 0x4b0a <main+0x1558>
				{
					lcdPrintData("Stop=",5);
    4aa2:	81 ed       	ldi	r24, 0xD1	; 209
    4aa4:	90 e2       	ldi	r25, 0x20	; 32
    4aa6:	65 e0       	ldi	r22, 0x05	; 5
    4aa8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
    4aac:	00 d0       	rcall	.+0      	; 0x4aae <main+0x14fc>
    4aae:	00 d0       	rcall	.+0      	; 0x4ab0 <main+0x14fe>
    4ab0:	00 d0       	rcall	.+0      	; 0x4ab2 <main+0x1500>
    4ab2:	ad b7       	in	r26, 0x3d	; 61
    4ab4:	be b7       	in	r27, 0x3e	; 62
    4ab6:	11 96       	adiw	r26, 0x01	; 1
    4ab8:	ed b7       	in	r30, 0x3d	; 61
    4aba:	fe b7       	in	r31, 0x3e	; 62
    4abc:	81 82       	std	Z+1, r8	; 0x01
    4abe:	92 82       	std	Z+2, r9	; 0x02
    4ac0:	12 96       	adiw	r26, 0x02	; 2
    4ac2:	6d 92       	st	X+, r6
    4ac4:	7c 92       	st	X, r7
    4ac6:	13 97       	sbiw	r26, 0x03	; 3
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	80 9f       	mul	r24, r16
    4ace:	f0 01       	movw	r30, r0
    4ad0:	81 9f       	mul	r24, r17
    4ad2:	f0 0d       	add	r31, r0
    4ad4:	90 9f       	mul	r25, r16
    4ad6:	f0 0d       	add	r31, r0
    4ad8:	11 24       	eor	r1, r1
    4ada:	ea 5b       	subi	r30, 0xBA	; 186
    4adc:	fe 4d       	sbci	r31, 0xDE	; 222
    4ade:	80 8d       	ldd	r24, Z+24	; 0x18
    4ae0:	91 8d       	ldd	r25, Z+25	; 0x19
    4ae2:	14 96       	adiw	r26, 0x04	; 4
    4ae4:	8d 93       	st	X+, r24
    4ae6:	9c 93       	st	X, r25
    4ae8:	15 97       	sbiw	r26, 0x05	; 5
    4aea:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4aee:	2d b7       	in	r18, 0x3d	; 61
    4af0:	3e b7       	in	r19, 0x3e	; 62
    4af2:	2a 5f       	subi	r18, 0xFA	; 250
    4af4:	3f 4f       	sbci	r19, 0xFF	; 255
    4af6:	2d bf       	out	0x3d, r18	; 61
    4af8:	3e bf       	out	0x3e, r19	; 62
    4afa:	c4 01       	movw	r24, r8
    4afc:	64 e0       	ldi	r22, 0x04	; 4
    4afe:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    4b02:	84 ea       	ldi	r24, 0xA4	; 164
    4b04:	90 e2       	ldi	r25, 0x20	; 32
    4b06:	62 e0       	ldi	r22, 0x02	; 2
    4b08:	6b c0       	rjmp	.+214    	; 0x4be0 <main+0x162e>
				}
				else if(profiles[profile_index].type == LSV)
    4b0a:	83 30       	cpi	r24, 0x03	; 3
    4b0c:	a1 f5       	brne	.+104    	; 0x4b76 <main+0x15c4>
				{
					lcdPrintData("SR=",3);
    4b0e:	84 e0       	ldi	r24, 0x04	; 4
    4b10:	91 e2       	ldi	r25, 0x21	; 33
    4b12:	63 e0       	ldi	r22, 0x03	; 3
    4b14:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%3d",profiles[profile_index].op5);
    4b18:	00 d0       	rcall	.+0      	; 0x4b1a <main+0x1568>
    4b1a:	00 d0       	rcall	.+0      	; 0x4b1c <main+0x156a>
    4b1c:	00 d0       	rcall	.+0      	; 0x4b1e <main+0x156c>
    4b1e:	ad b7       	in	r26, 0x3d	; 61
    4b20:	be b7       	in	r27, 0x3e	; 62
    4b22:	11 96       	adiw	r26, 0x01	; 1
    4b24:	ed b7       	in	r30, 0x3d	; 61
    4b26:	fe b7       	in	r31, 0x3e	; 62
    4b28:	81 82       	std	Z+1, r8	; 0x01
    4b2a:	92 82       	std	Z+2, r9	; 0x02
    4b2c:	12 96       	adiw	r26, 0x02	; 2
    4b2e:	4d 92       	st	X+, r4
    4b30:	5c 92       	st	X, r5
    4b32:	13 97       	sbiw	r26, 0x03	; 3
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	80 9f       	mul	r24, r16
    4b3a:	f0 01       	movw	r30, r0
    4b3c:	81 9f       	mul	r24, r17
    4b3e:	f0 0d       	add	r31, r0
    4b40:	90 9f       	mul	r25, r16
    4b42:	f0 0d       	add	r31, r0
    4b44:	11 24       	eor	r1, r1
    4b46:	ea 5b       	subi	r30, 0xBA	; 186
    4b48:	fe 4d       	sbci	r31, 0xDE	; 222
    4b4a:	80 8d       	ldd	r24, Z+24	; 0x18
    4b4c:	91 8d       	ldd	r25, Z+25	; 0x19
    4b4e:	14 96       	adiw	r26, 0x04	; 4
    4b50:	8d 93       	st	X+, r24
    4b52:	9c 93       	st	X, r25
    4b54:	15 97       	sbiw	r26, 0x05	; 5
    4b56:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,3);
    4b5a:	2d b7       	in	r18, 0x3d	; 61
    4b5c:	3e b7       	in	r19, 0x3e	; 62
    4b5e:	2a 5f       	subi	r18, 0xFA	; 250
    4b60:	3f 4f       	sbci	r19, 0xFF	; 255
    4b62:	2d bf       	out	0x3d, r18	; 61
    4b64:	3e bf       	out	0x3e, r19	; 62
    4b66:	c4 01       	movw	r24, r8
    4b68:	63 e0       	ldi	r22, 0x03	; 3
    4b6a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV/sample",9);
    4b6e:	88 e0       	ldi	r24, 0x08	; 8
    4b70:	91 e2       	ldi	r25, 0x21	; 33
    4b72:	69 e0       	ldi	r22, 0x09	; 9
    4b74:	35 c0       	rjmp	.+106    	; 0x4be0 <main+0x162e>
				}
				else if(profiles[profile_index].type == CA)
    4b76:	85 30       	cpi	r24, 0x05	; 5
    4b78:	a9 f5       	brne	.+106    	; 0x4be4 <main+0x1632>
				{
					lcdPrintData("SR=",3);
    4b7a:	84 e0       	ldi	r24, 0x04	; 4
    4b7c:	91 e2       	ldi	r25, 0x21	; 33
    4b7e:	63 e0       	ldi	r22, 0x03	; 3
    4b80:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op5);
    4b84:	00 d0       	rcall	.+0      	; 0x4b86 <main+0x15d4>
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <main+0x15d6>
    4b88:	00 d0       	rcall	.+0      	; 0x4b8a <main+0x15d8>
    4b8a:	ad b7       	in	r26, 0x3d	; 61
    4b8c:	be b7       	in	r27, 0x3e	; 62
    4b8e:	11 96       	adiw	r26, 0x01	; 1
    4b90:	ed b7       	in	r30, 0x3d	; 61
    4b92:	fe b7       	in	r31, 0x3e	; 62
    4b94:	81 82       	std	Z+1, r8	; 0x01
    4b96:	92 82       	std	Z+2, r9	; 0x02
    4b98:	12 96       	adiw	r26, 0x02	; 2
    4b9a:	6d 92       	st	X+, r6
    4b9c:	7c 92       	st	X, r7
    4b9e:	13 97       	sbiw	r26, 0x03	; 3
    4ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	80 9f       	mul	r24, r16
    4ba6:	f0 01       	movw	r30, r0
    4ba8:	81 9f       	mul	r24, r17
    4baa:	f0 0d       	add	r31, r0
    4bac:	90 9f       	mul	r25, r16
    4bae:	f0 0d       	add	r31, r0
    4bb0:	11 24       	eor	r1, r1
    4bb2:	ea 5b       	subi	r30, 0xBA	; 186
    4bb4:	fe 4d       	sbci	r31, 0xDE	; 222
    4bb6:	80 8d       	ldd	r24, Z+24	; 0x18
    4bb8:	91 8d       	ldd	r25, Z+25	; 0x19
    4bba:	14 96       	adiw	r26, 0x04	; 4
    4bbc:	8d 93       	st	X+, r24
    4bbe:	9c 93       	st	X, r25
    4bc0:	15 97       	sbiw	r26, 0x05	; 5
    4bc2:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4bc6:	2d b7       	in	r18, 0x3d	; 61
    4bc8:	3e b7       	in	r19, 0x3e	; 62
    4bca:	2a 5f       	subi	r18, 0xFA	; 250
    4bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bce:	2d bf       	out	0x3d, r18	; 61
    4bd0:	3e bf       	out	0x3e, r19	; 62
    4bd2:	c4 01       	movw	r24, r8
    4bd4:	64 e0       	ldi	r22, 0x04	; 4
    4bd6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("sample/s",8);
    4bda:	82 e1       	ldi	r24, 0x12	; 18
    4bdc:	91 e2       	ldi	r25, 0x21	; 33
    4bde:	68 e0       	ldi	r22, 0x08	; 8
    4be0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	62 e0       	ldi	r22, 0x02	; 2
    4be8:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	88 23       	and	r24, r24
    4bf0:	19 f4       	brne	.+6      	; 0x4bf8 <main+0x1646>
					lcdPrintData("~",1);
    4bf2:	8e e2       	ldi	r24, 0x2E	; 46
    4bf4:	90 e2       	ldi	r25, 0x20	; 32
    4bf6:	02 c0       	rjmp	.+4      	; 0x4bfc <main+0x164a>
				else
					lcdPrintData(">",1);
    4bf8:	89 e4       	ldi	r24, 0x49	; 73
    4bfa:	90 e2       	ldi	r25, 0x20	; 32
    4bfc:	61 e0       	ldi	r22, 0x01	; 1
    4bfe:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				if(profiles[profile_index].type == SWV)
    4c02:	8a 81       	ldd	r24, Y+2	; 0x02
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	0d e1       	ldi	r16, 0x1D	; 29
    4c08:	10 e0       	ldi	r17, 0x00	; 0
    4c0a:	80 9f       	mul	r24, r16
    4c0c:	f0 01       	movw	r30, r0
    4c0e:	81 9f       	mul	r24, r17
    4c10:	f0 0d       	add	r31, r0
    4c12:	90 9f       	mul	r25, r16
    4c14:	f0 0d       	add	r31, r0
    4c16:	11 24       	eor	r1, r1
    4c18:	ea 5b       	subi	r30, 0xBA	; 186
    4c1a:	fe 4d       	sbci	r31, 0xDE	; 222
    4c1c:	87 85       	ldd	r24, Z+15	; 0x0f
    4c1e:	88 23       	and	r24, r24
    4c20:	11 f0       	breq	.+4      	; 0x4c26 <main+0x1674>
					if(profiles[profile_index].curr_range == RANGE_10UA)
						lcdPrintData("0-10uA",5);
					else
						lcdPrintData("0-50uA",6);
					}
				else if(profiles[profile_index].type == CV)
    4c22:	81 30       	cpi	r24, 0x01	; 1
    4c24:	79 f4       	brne	.+30     	; 0x4c44 <main+0x1692>
				{
					lcdPrintData("Range=",6);
    4c26:	8b e1       	ldi	r24, 0x1B	; 27
    4c28:	91 e2       	ldi	r25, 0x21	; 33
    4c2a:	66 e0       	ldi	r22, 0x06	; 6
    4c2c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					if(profiles[profile_index].curr_range == RANGE_10UA)
    4c30:	8a 81       	ldd	r24, Y+2	; 0x02
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	80 9f       	mul	r24, r16
    4c36:	f0 01       	movw	r30, r0
    4c38:	81 9f       	mul	r24, r17
    4c3a:	f0 0d       	add	r31, r0
    4c3c:	90 9f       	mul	r25, r16
    4c3e:	f0 0d       	add	r31, r0
    4c40:	11 24       	eor	r1, r1
    4c42:	23 c1       	rjmp	.+582    	; 0x4e8a <main+0x18d8>
						lcdPrintData("0-10uA",5);
					else
						lcdPrintData("0-50uA",6);
				}
				else if(profiles[profile_index].type == ACV)
    4c44:	82 30       	cpi	r24, 0x02	; 2
    4c46:	99 f5       	brne	.+102    	; 0x4cae <main+0x16fc>
				{
					lcdPrintData("Incr=",5);
    4c48:	8e ef       	ldi	r24, 0xFE	; 254
    4c4a:	90 e2       	ldi	r25, 0x20	; 32
    4c4c:	65 e0       	ldi	r22, 0x05	; 5
    4c4e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op6);
    4c52:	00 d0       	rcall	.+0      	; 0x4c54 <main+0x16a2>
    4c54:	00 d0       	rcall	.+0      	; 0x4c56 <main+0x16a4>
    4c56:	00 d0       	rcall	.+0      	; 0x4c58 <main+0x16a6>
    4c58:	ad b7       	in	r26, 0x3d	; 61
    4c5a:	be b7       	in	r27, 0x3e	; 62
    4c5c:	11 96       	adiw	r26, 0x01	; 1
    4c5e:	ed b7       	in	r30, 0x3d	; 61
    4c60:	fe b7       	in	r31, 0x3e	; 62
    4c62:	81 82       	std	Z+1, r8	; 0x01
    4c64:	92 82       	std	Z+2, r9	; 0x02
    4c66:	12 96       	adiw	r26, 0x02	; 2
    4c68:	6d 92       	st	X+, r6
    4c6a:	7c 92       	st	X, r7
    4c6c:	13 97       	sbiw	r26, 0x03	; 3
    4c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	80 9f       	mul	r24, r16
    4c74:	f0 01       	movw	r30, r0
    4c76:	81 9f       	mul	r24, r17
    4c78:	f0 0d       	add	r31, r0
    4c7a:	90 9f       	mul	r25, r16
    4c7c:	f0 0d       	add	r31, r0
    4c7e:	11 24       	eor	r1, r1
    4c80:	ea 5b       	subi	r30, 0xBA	; 186
    4c82:	fe 4d       	sbci	r31, 0xDE	; 222
    4c84:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c86:	93 8d       	ldd	r25, Z+27	; 0x1b
    4c88:	14 96       	adiw	r26, 0x04	; 4
    4c8a:	8d 93       	st	X+, r24
    4c8c:	9c 93       	st	X, r25
    4c8e:	15 97       	sbiw	r26, 0x05	; 5
    4c90:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4c94:	2d b7       	in	r18, 0x3d	; 61
    4c96:	3e b7       	in	r19, 0x3e	; 62
    4c98:	2a 5f       	subi	r18, 0xFA	; 250
    4c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9c:	2d bf       	out	0x3d, r18	; 61
    4c9e:	3e bf       	out	0x3e, r19	; 62
    4ca0:	c4 01       	movw	r24, r8
    4ca2:	64 e0       	ldi	r22, 0x04	; 4
    4ca4:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    4ca8:	84 ea       	ldi	r24, 0xA4	; 164
    4caa:	90 e2       	ldi	r25, 0x20	; 32
    4cac:	4a c0       	rjmp	.+148    	; 0x4d42 <main+0x1790>
				}
				else if(profiles[profile_index].type == LSV)
    4cae:	83 30       	cpi	r24, 0x03	; 3
    4cb0:	b9 f4       	brne	.+46     	; 0x4ce0 <main+0x172e>
				{
					lcdPrintData("Range=",6);
    4cb2:	8b e1       	ldi	r24, 0x1B	; 27
    4cb4:	91 e2       	ldi	r25, 0x21	; 33
    4cb6:	66 e0       	ldi	r22, 0x06	; 6
    4cb8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					if(profiles[profile_index].curr_range == RANGE_10UA)
    4cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	80 9f       	mul	r24, r16
    4cc2:	f0 01       	movw	r30, r0
    4cc4:	81 9f       	mul	r24, r17
    4cc6:	f0 0d       	add	r31, r0
    4cc8:	90 9f       	mul	r25, r16
    4cca:	f0 0d       	add	r31, r0
    4ccc:	11 24       	eor	r1, r1
    4cce:	ea 5b       	subi	r30, 0xBA	; 186
    4cd0:	fe 4d       	sbci	r31, 0xDE	; 222
    4cd2:	84 8d       	ldd	r24, Z+28	; 0x1c
    4cd4:	81 30       	cpi	r24, 0x01	; 1
    4cd6:	09 f0       	breq	.+2      	; 0x4cda <main+0x1728>
    4cd8:	e1 c0       	rjmp	.+450    	; 0x4e9c <main+0x18ea>
						lcdPrintData("0-10uA",6);
    4cda:	82 e2       	ldi	r24, 0x22	; 34
    4cdc:	91 e2       	ldi	r25, 0x21	; 33
    4cde:	e0 c0       	rjmp	.+448    	; 0x4ea0 <main+0x18ee>
					else
						lcdPrintData("0-50uA",6);
				}
				else if(profiles[profile_index].type == CA)
    4ce0:	85 30       	cpi	r24, 0x05	; 5
    4ce2:	09 f0       	breq	.+2      	; 0x4ce6 <main+0x1734>
    4ce4:	e0 c0       	rjmp	.+448    	; 0x4ea6 <main+0x18f4>
				{
					lcdPrintData("Steps=",6);
    4ce6:	80 e3       	ldi	r24, 0x30	; 48
    4ce8:	91 e2       	ldi	r25, 0x21	; 33
    4cea:	66 e0       	ldi	r22, 0x06	; 6
    4cec:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%2d",profiles[profile_index].op6);
    4cf0:	00 d0       	rcall	.+0      	; 0x4cf2 <main+0x1740>
    4cf2:	00 d0       	rcall	.+0      	; 0x4cf4 <main+0x1742>
    4cf4:	00 d0       	rcall	.+0      	; 0x4cf6 <main+0x1744>
    4cf6:	ad b7       	in	r26, 0x3d	; 61
    4cf8:	be b7       	in	r27, 0x3e	; 62
    4cfa:	11 96       	adiw	r26, 0x01	; 1
    4cfc:	ed b7       	in	r30, 0x3d	; 61
    4cfe:	fe b7       	in	r31, 0x3e	; 62
    4d00:	81 82       	std	Z+1, r8	; 0x01
    4d02:	92 82       	std	Z+2, r9	; 0x02
    4d04:	23 ef       	ldi	r18, 0xF3	; 243
    4d06:	30 e2       	ldi	r19, 0x20	; 32
    4d08:	12 96       	adiw	r26, 0x02	; 2
    4d0a:	2d 93       	st	X+, r18
    4d0c:	3c 93       	st	X, r19
    4d0e:	13 97       	sbiw	r26, 0x03	; 3
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	80 9f       	mul	r24, r16
    4d16:	f0 01       	movw	r30, r0
    4d18:	81 9f       	mul	r24, r17
    4d1a:	f0 0d       	add	r31, r0
    4d1c:	90 9f       	mul	r25, r16
    4d1e:	f0 0d       	add	r31, r0
    4d20:	11 24       	eor	r1, r1
    4d22:	ea 5b       	subi	r30, 0xBA	; 186
    4d24:	fe 4d       	sbci	r31, 0xDE	; 222
    4d26:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d28:	93 8d       	ldd	r25, Z+27	; 0x1b
    4d2a:	14 96       	adiw	r26, 0x04	; 4
    4d2c:	8d 93       	st	X+, r24
    4d2e:	9c 93       	st	X, r25
    4d30:	15 97       	sbiw	r26, 0x05	; 5
    4d32:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,2);
    4d36:	8d b7       	in	r24, 0x3d	; 61
    4d38:	9e b7       	in	r25, 0x3e	; 62
    4d3a:	06 96       	adiw	r24, 0x06	; 6
    4d3c:	8d bf       	out	0x3d, r24	; 61
    4d3e:	9e bf       	out	0x3e, r25	; 62
    4d40:	c4 01       	movw	r24, r8
    4d42:	62 e0       	ldi	r22, 0x02	; 2
    4d44:	ae c0       	rjmp	.+348    	; 0x4ea2 <main+0x18f0>
				}
				

			}
			else if(profile_edit_index == 7)
    4d46:	87 30       	cpi	r24, 0x07	; 7
    4d48:	09 f0       	breq	.+2      	; 0x4d4c <main+0x179a>
    4d4a:	ad c0       	rjmp	.+346    	; 0x4ea6 <main+0x18f4>
			{
				
				if(profiles[profile_index].type == ACV)
    4d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	0d e1       	ldi	r16, 0x1D	; 29
    4d52:	10 e0       	ldi	r17, 0x00	; 0
    4d54:	80 9f       	mul	r24, r16
    4d56:	f0 01       	movw	r30, r0
    4d58:	81 9f       	mul	r24, r17
    4d5a:	f0 0d       	add	r31, r0
    4d5c:	90 9f       	mul	r25, r16
    4d5e:	f0 0d       	add	r31, r0
    4d60:	11 24       	eor	r1, r1
    4d62:	ea 5b       	subi	r30, 0xBA	; 186
    4d64:	fe 4d       	sbci	r31, 0xDE	; 222
    4d66:	87 85       	ldd	r24, Z+15	; 0x0f
    4d68:	82 30       	cpi	r24, 0x02	; 2
    4d6a:	c1 f5       	brne	.+112    	; 0x4ddc <main+0x182a>
				{
					lcdPrintData(" ",1);
    4d6c:	80 e3       	ldi	r24, 0x30	; 48
    4d6e:	90 e2       	ldi	r25, 0x20	; 32
    4d70:	61 e0       	ldi	r22, 0x01	; 1
    4d72:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("Incr=",5);
    4d76:	8e ef       	ldi	r24, 0xFE	; 254
    4d78:	90 e2       	ldi	r25, 0x20	; 32
    4d7a:	65 e0       	ldi	r22, 0x05	; 5
    4d7c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%4d",profiles[profile_index].op6);
    4d80:	00 d0       	rcall	.+0      	; 0x4d82 <main+0x17d0>
    4d82:	00 d0       	rcall	.+0      	; 0x4d84 <main+0x17d2>
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <main+0x17d4>
    4d86:	ad b7       	in	r26, 0x3d	; 61
    4d88:	be b7       	in	r27, 0x3e	; 62
    4d8a:	11 96       	adiw	r26, 0x01	; 1
    4d8c:	ed b7       	in	r30, 0x3d	; 61
    4d8e:	fe b7       	in	r31, 0x3e	; 62
    4d90:	81 82       	std	Z+1, r8	; 0x01
    4d92:	92 82       	std	Z+2, r9	; 0x02
    4d94:	12 96       	adiw	r26, 0x02	; 2
    4d96:	6d 92       	st	X+, r6
    4d98:	7c 92       	st	X, r7
    4d9a:	13 97       	sbiw	r26, 0x03	; 3
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	80 9f       	mul	r24, r16
    4da2:	f0 01       	movw	r30, r0
    4da4:	81 9f       	mul	r24, r17
    4da6:	f0 0d       	add	r31, r0
    4da8:	90 9f       	mul	r25, r16
    4daa:	f0 0d       	add	r31, r0
    4dac:	11 24       	eor	r1, r1
    4dae:	ea 5b       	subi	r30, 0xBA	; 186
    4db0:	fe 4d       	sbci	r31, 0xDE	; 222
    4db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4db4:	93 8d       	ldd	r25, Z+27	; 0x1b
    4db6:	14 96       	adiw	r26, 0x04	; 4
    4db8:	8d 93       	st	X+, r24
    4dba:	9c 93       	st	X, r25
    4dbc:	15 97       	sbiw	r26, 0x05	; 5
    4dbe:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,4);
    4dc2:	2d b7       	in	r18, 0x3d	; 61
    4dc4:	3e b7       	in	r19, 0x3e	; 62
    4dc6:	2a 5f       	subi	r18, 0xFA	; 250
    4dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dca:	2d bf       	out	0x3d, r18	; 61
    4dcc:	3e bf       	out	0x3e, r19	; 62
    4dce:	c4 01       	movw	r24, r8
    4dd0:	64 e0       	ldi	r22, 0x04	; 4
    4dd2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("mV",2);
    4dd6:	84 ea       	ldi	r24, 0xA4	; 164
    4dd8:	90 e2       	ldi	r25, 0x20	; 32
    4dda:	35 c0       	rjmp	.+106    	; 0x4e46 <main+0x1894>
				}
				else if(profiles[profile_index].type == CA)
    4ddc:	85 30       	cpi	r24, 0x05	; 5
    4dde:	b1 f5       	brne	.+108    	; 0x4e4c <main+0x189a>
				{
					lcdPrintData(" ",1);
    4de0:	80 e3       	ldi	r24, 0x30	; 48
    4de2:	90 e2       	ldi	r25, 0x20	; 32
    4de4:	61 e0       	ldi	r22, 0x01	; 1
    4de6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					lcdPrintData("Steps=",6);
    4dea:	80 e3       	ldi	r24, 0x30	; 48
    4dec:	91 e2       	ldi	r25, 0x21	; 33
    4dee:	66 e0       	ldi	r22, 0x06	; 6
    4df0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
					sprintf(temp_string,"%2d",profiles[profile_index].op6);
    4df4:	00 d0       	rcall	.+0      	; 0x4df6 <main+0x1844>
    4df6:	00 d0       	rcall	.+0      	; 0x4df8 <main+0x1846>
    4df8:	00 d0       	rcall	.+0      	; 0x4dfa <main+0x1848>
    4dfa:	ad b7       	in	r26, 0x3d	; 61
    4dfc:	be b7       	in	r27, 0x3e	; 62
    4dfe:	11 96       	adiw	r26, 0x01	; 1
    4e00:	ed b7       	in	r30, 0x3d	; 61
    4e02:	fe b7       	in	r31, 0x3e	; 62
    4e04:	81 82       	std	Z+1, r8	; 0x01
    4e06:	92 82       	std	Z+2, r9	; 0x02
    4e08:	23 ef       	ldi	r18, 0xF3	; 243
    4e0a:	30 e2       	ldi	r19, 0x20	; 32
    4e0c:	12 96       	adiw	r26, 0x02	; 2
    4e0e:	2d 93       	st	X+, r18
    4e10:	3c 93       	st	X, r19
    4e12:	13 97       	sbiw	r26, 0x03	; 3
    4e14:	8a 81       	ldd	r24, Y+2	; 0x02
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	80 9f       	mul	r24, r16
    4e1a:	f0 01       	movw	r30, r0
    4e1c:	81 9f       	mul	r24, r17
    4e1e:	f0 0d       	add	r31, r0
    4e20:	90 9f       	mul	r25, r16
    4e22:	f0 0d       	add	r31, r0
    4e24:	11 24       	eor	r1, r1
    4e26:	ea 5b       	subi	r30, 0xBA	; 186
    4e28:	fe 4d       	sbci	r31, 0xDE	; 222
    4e2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    4e2e:	14 96       	adiw	r26, 0x04	; 4
    4e30:	8d 93       	st	X+, r24
    4e32:	9c 93       	st	X, r25
    4e34:	15 97       	sbiw	r26, 0x05	; 5
    4e36:	0e 94 22 30 	call	0x6044	; 0x6044 <sprintf>
					lcdPrintData(temp_string,2);
    4e3a:	8d b7       	in	r24, 0x3d	; 61
    4e3c:	9e b7       	in	r25, 0x3e	; 62
    4e3e:	06 96       	adiw	r24, 0x06	; 6
    4e40:	8d bf       	out	0x3d, r24	; 61
    4e42:	9e bf       	out	0x3e, r25	; 62
    4e44:	c4 01       	movw	r24, r8
    4e46:	62 e0       	ldi	r22, 0x02	; 2
    4e48:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				}

				lcdGotoXY(0,2);
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	62 e0       	ldi	r22, 0x02	; 2
    4e50:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
				if(profile_edit_sel == EDIT_NOSEL)
    4e54:	8d 81       	ldd	r24, Y+5	; 0x05
    4e56:	88 23       	and	r24, r24
    4e58:	19 f4       	brne	.+6      	; 0x4e60 <main+0x18ae>
					lcdPrintData("~",1);
    4e5a:	8e e2       	ldi	r24, 0x2E	; 46
    4e5c:	90 e2       	ldi	r25, 0x20	; 32
    4e5e:	02 c0       	rjmp	.+4      	; 0x4e64 <main+0x18b2>
				else
					lcdPrintData(">",1);
    4e60:	89 e4       	ldi	r24, 0x49	; 73
    4e62:	90 e2       	ldi	r25, 0x20	; 32
    4e64:	61 e0       	ldi	r22, 0x01	; 1
    4e66:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>

				lcdPrintData("Range=",6);
    4e6a:	8b e1       	ldi	r24, 0x1B	; 27
    4e6c:	91 e2       	ldi	r25, 0x21	; 33
    4e6e:	66 e0       	ldi	r22, 0x06	; 6
    4e70:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				if(profiles[profile_index].curr_range == RANGE_10UA)
    4e74:	8a 81       	ldd	r24, Y+2	; 0x02
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	2d e1       	ldi	r18, 0x1D	; 29
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	82 9f       	mul	r24, r18
    4e7e:	f0 01       	movw	r30, r0
    4e80:	83 9f       	mul	r24, r19
    4e82:	f0 0d       	add	r31, r0
    4e84:	92 9f       	mul	r25, r18
    4e86:	f0 0d       	add	r31, r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	ea 5b       	subi	r30, 0xBA	; 186
    4e8c:	fe 4d       	sbci	r31, 0xDE	; 222
    4e8e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4e90:	81 30       	cpi	r24, 0x01	; 1
    4e92:	21 f4       	brne	.+8      	; 0x4e9c <main+0x18ea>
					lcdPrintData("0-10uA",5);
    4e94:	82 e2       	ldi	r24, 0x22	; 34
    4e96:	91 e2       	ldi	r25, 0x21	; 33
    4e98:	65 e0       	ldi	r22, 0x05	; 5
    4e9a:	03 c0       	rjmp	.+6      	; 0x4ea2 <main+0x18f0>
				else
					lcdPrintData("0-50uA",6);
    4e9c:	89 e2       	ldi	r24, 0x29	; 41
    4e9e:	91 e2       	ldi	r25, 0x21	; 33
    4ea0:	66 e0       	ldi	r22, 0x06	; 6
    4ea2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
				
			}


			while(buttonHandler(profiles,&status,&profile_index,&profile_opt_index,&profile_edit_index,&profile_edit_sel,&length)!=1) {}
    4ea6:	86 e4       	ldi	r24, 0x46	; 70
    4ea8:	91 e2       	ldi	r25, 0x21	; 33
    4eaa:	be 01       	movw	r22, r28
    4eac:	6f 5f       	subi	r22, 0xFF	; 255
    4eae:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb0:	a1 01       	movw	r20, r2
    4eb2:	9e 01       	movw	r18, r28
    4eb4:	2d 5f       	subi	r18, 0xFD	; 253
    4eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4eb8:	8e 01       	movw	r16, r28
    4eba:	0c 5f       	subi	r16, 0xFC	; 252
    4ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebe:	e5 e0       	ldi	r30, 0x05	; 5
    4ec0:	ee 2e       	mov	r14, r30
    4ec2:	f1 2c       	mov	r15, r1
    4ec4:	ec 0e       	add	r14, r28
    4ec6:	fd 1e       	adc	r15, r29
    4ec8:	b6 e0       	ldi	r27, 0x06	; 6
    4eca:	cb 2e       	mov	r12, r27
    4ecc:	d1 2c       	mov	r13, r1
    4ece:	cc 0e       	add	r12, r28
    4ed0:	dd 1e       	adc	r13, r29
    4ed2:	0e 94 8c 03 	call	0x718	; 0x718 <buttonHandler>
    4ed6:	01 97       	sbiw	r24, 0x01	; 1
    4ed8:	31 f7       	brne	.-52     	; 0x4ea6 <main+0x18f4>
    4eda:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <main+0x1fa>
		}
		else if (status == PROFILE_RESULTS)
    4ede:	84 30       	cpi	r24, 0x04	; 4
    4ee0:	11 f0       	breq	.+4      	; 0x4ee6 <main+0x1934>
    4ee2:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <main+0x1fa>
		{
			//clear display
			lcdClear();
    4ee6:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <lcdClear>
			lcdHome();
    4eea:	0e 94 76 2a 	call	0x54ec	; 0x54ec <lcdHome>

			//display name
			lcdPrintData(profiles[profile_index].name, 15);
    4eee:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef0:	2d e1       	ldi	r18, 0x1D	; 29
    4ef2:	82 9f       	mul	r24, r18
    4ef4:	c0 01       	movw	r24, r0
    4ef6:	11 24       	eor	r1, r1
    4ef8:	8a 5b       	subi	r24, 0xBA	; 186
    4efa:	9e 4d       	sbci	r25, 0xDE	; 222
    4efc:	6f e0       	ldi	r22, 0x0F	; 15
    4efe:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
		

			lcdGotoXY(0,1);
    4f02:	80 e0       	ldi	r24, 0x00	; 0
    4f04:	61 e0       	ldi	r22, 0x01	; 1
    4f06:	0e 94 86 2a 	call	0x550c	; 0x550c <lcdGotoXY>
			lcdPrintData("Test Complete",13);
    4f0a:	87 e3       	ldi	r24, 0x37	; 55
    4f0c:	91 e2       	ldi	r25, 0x21	; 33
    4f0e:	6d e0       	ldi	r22, 0x0D	; 13
    4f10:	0e 94 c0 2a 	call	0x5580	; 0x5580 <lcdPrintData>
			//lcdGotoXY(0,2);
			//lcdPrintData("~Store Results?",15);

			while(buttonHandler(profiles,&status,&profile_index,&profile_opt_index,&profile_edit_index,&profile_edit_sel,&length)!=1) {}
    4f14:	86 e4       	ldi	r24, 0x46	; 70
    4f16:	91 e2       	ldi	r25, 0x21	; 33
    4f18:	be 01       	movw	r22, r28
    4f1a:	6f 5f       	subi	r22, 0xFF	; 255
    4f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1e:	a1 01       	movw	r20, r2
    4f20:	9e 01       	movw	r18, r28
    4f22:	2d 5f       	subi	r18, 0xFD	; 253
    4f24:	3f 4f       	sbci	r19, 0xFF	; 255
    4f26:	8e 01       	movw	r16, r28
    4f28:	0c 5f       	subi	r16, 0xFC	; 252
    4f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f2c:	a5 e0       	ldi	r26, 0x05	; 5
    4f2e:	ea 2e       	mov	r14, r26
    4f30:	f1 2c       	mov	r15, r1
    4f32:	ec 0e       	add	r14, r28
    4f34:	fd 1e       	adc	r15, r29
    4f36:	f6 e0       	ldi	r31, 0x06	; 6
    4f38:	cf 2e       	mov	r12, r31
    4f3a:	d1 2c       	mov	r13, r1
    4f3c:	cc 0e       	add	r12, r28
    4f3e:	dd 1e       	adc	r13, r29
    4f40:	0e 94 8c 03 	call	0x718	; 0x718 <buttonHandler>
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	31 f7       	brne	.-52     	; 0x4f14 <main+0x1962>
    4f48:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <main+0x1fa>

00004f4c <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    4f4c:	dc 01       	movw	r26, r24
	if(&ADCA == adc){
    4f4e:	82 e0       	ldi	r24, 0x02	; 2
    4f50:	a0 30       	cpi	r26, 0x00	; 0
    4f52:	b8 07       	cpc	r27, r24
    4f54:	81 f4       	brne	.+32     	; 0x4f76 <ADC_CalibrationValues_Load+0x2a>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    4f56:	82 e0       	ldi	r24, 0x02	; 2
    4f58:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    4f5c:	e0 e2       	ldi	r30, 0x20	; 32
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    4f62:	10 92 ca 01 	sts	0x01CA, r1
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
	if(&ADCA == adc){
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    4f66:	1c 96       	adiw	r26, 0x0c	; 12
    4f68:	ec 93       	st	X, r30
    4f6a:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    4f6c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    4f70:	e1 e2       	ldi	r30, 0x21	; 33
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	0f c0       	rjmp	.+30     	; 0x4f94 <ADC_CalibrationValues_Load+0x48>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    4f76:	82 e0       	ldi	r24, 0x02	; 2
    4f78:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    4f7c:	e4 e2       	ldi	r30, 0x24	; 36
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    4f82:	10 92 ca 01 	sts	0x01CA, r1
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    4f86:	1c 96       	adiw	r26, 0x0c	; 12
    4f88:	ec 93       	st	X, r30
    4f8a:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    4f8c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    4f90:	e5 e2       	ldi	r30, 0x25	; 37
    4f92:	f0 e0       	ldi	r31, 0x00	; 0
    4f94:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    4f96:	10 92 ca 01 	sts	0x01CA, r1
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    4f9a:	1d 96       	adiw	r26, 0x0d	; 13
    4f9c:	ec 93       	st	X, r30
    4f9e:	08 95       	ret

00004fa0 <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    4fa0:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    4fa6:	24 81       	ldd	r18, Z+4	; 0x04
    4fa8:	35 81       	ldd	r19, Z+5	; 0x05
    4faa:	26 1b       	sub	r18, r22
    4fac:	31 09       	sbc	r19, r1

	return answer;
}
    4fae:	c9 01       	movw	r24, r18
    4fb0:	08 95       	ret

00004fb2 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    4fb2:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    4fb8:	24 81       	ldd	r18, Z+4	; 0x04
    4fba:	35 81       	ldd	r19, Z+5	; 0x05
    4fbc:	77 27       	eor	r23, r23
    4fbe:	67 fd       	sbrc	r22, 7
    4fc0:	70 95       	com	r23
    4fc2:	26 1b       	sub	r18, r22
    4fc4:	37 0b       	sbc	r19, r23

	return answer;
}
    4fc6:	c9 01       	movw	r24, r18
    4fc8:	08 95       	ret

00004fca <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    4fca:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    4fd0:	24 81       	ldd	r18, Z+4	; 0x04
    4fd2:	35 81       	ldd	r19, Z+5	; 0x05
}
    4fd4:	c9 01       	movw	r24, r18
    4fd6:	08 95       	ret

00004fd8 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    4fd8:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    4fde:	84 81       	ldd	r24, Z+4	; 0x04
}
    4fe0:	08 95       	ret

00004fe2 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    4fe2:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    4fe8:	85 81       	ldd	r24, Z+5	; 0x05
}
    4fea:	08 95       	ret

00004fec <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    4fec:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    4fee:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    4ff0:	14 82       	std	Z+4, r1	; 0x04
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ff2:	9a e2       	ldi	r25, 0x2A	; 42
    4ff4:	9a 95       	dec	r25
    4ff6:	f1 f7       	brne	.-4      	; 0x4ff4 <ADC_Wait_8MHz+0x8>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    4ff8:	84 83       	std	Z+4, r24	; 0x04
}
    4ffa:	08 95       	ret

00004ffc <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    4ffc:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    4ffe:	94 81       	ldd	r25, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	84 83       	std	Z+4, r24	; 0x04
    5004:	85 e5       	ldi	r24, 0x55	; 85
    5006:	8a 95       	dec	r24
    5008:	f1 f7       	brne	.-4      	; 0x5006 <ADC_Wait_32MHz+0xa>

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    500a:	94 83       	std	Z+4, r25	; 0x04
}
    500c:	08 95       	ret

0000500e <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    500e:	fb 01       	movw	r30, r22
    if (oversampling)
    5010:	44 23       	and	r20, r20
    5012:	d9 f0       	breq	.+54     	; 0x504a <ADC_Offset_Get_Unsigned+0x3c>
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	40 e0       	ldi	r20, 0x00	; 0
    501a:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    501c:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    501e:	80 81       	ld	r24, Z
    5020:	80 68       	ori	r24, 0x80	; 128
    5022:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    5024:	83 81       	ldd	r24, Z+3	; 0x03
    5026:	80 ff       	sbrs	r24, 0
    5028:	fd cf       	rjmp	.-6      	; 0x5024 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    502a:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    502c:	84 81       	ldd	r24, Z+4	; 0x04
    502e:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    5030:	28 0f       	add	r18, r24
    5032:	39 1f       	adc	r19, r25
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    5034:	4f 5f       	subi	r20, 0xFF	; 255
    5036:	5f 4f       	sbci	r21, 0xFF	; 255
    5038:	44 30       	cpi	r20, 0x04	; 4
    503a:	51 05       	cpc	r21, r1
    503c:	81 f7       	brne	.-32     	; 0x501e <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    503e:	36 95       	lsr	r19
    5040:	27 95       	ror	r18
    5042:	36 95       	lsr	r19
    5044:	27 95       	ror	r18
    5046:	82 2f       	mov	r24, r18
    5048:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    504a:	80 81       	ld	r24, Z
    504c:	80 68       	ori	r24, 0x80	; 128
    504e:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    5050:	83 81       	ldd	r24, Z+3	; 0x03
    5052:	80 ff       	sbrs	r24, 0
    5054:	fd cf       	rjmp	.-6      	; 0x5050 <ADC_Offset_Get_Unsigned+0x42>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    505a:	84 81       	ldd	r24, Z+4	; 0x04
    505c:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
    505e:	08 95       	ret

00005060 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    5060:	fb 01       	movw	r30, r22
    if (oversampling)
    5062:	44 23       	and	r20, r20
    5064:	d9 f0       	breq	.+54     	; 0x509c <ADC_Offset_Get_Signed+0x3c>
    5066:	40 e0       	ldi	r20, 0x00	; 0
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    506e:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    5070:	80 81       	ld	r24, Z
    5072:	80 68       	ori	r24, 0x80	; 128
    5074:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    5076:	83 81       	ldd	r24, Z+3	; 0x03
    5078:	80 ff       	sbrs	r24, 0
    507a:	fd cf       	rjmp	.-6      	; 0x5076 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    507c:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    507e:	84 81       	ldd	r24, Z+4	; 0x04
    5080:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    5082:	48 0f       	add	r20, r24
    5084:	59 1f       	adc	r21, r25
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    5086:	2f 5f       	subi	r18, 0xFF	; 255
    5088:	3f 4f       	sbci	r19, 0xFF	; 255
    508a:	24 30       	cpi	r18, 0x04	; 4
    508c:	31 05       	cpc	r19, r1
    508e:	81 f7       	brne	.-32     	; 0x5070 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    5090:	ca 01       	movw	r24, r20
    5092:	64 e0       	ldi	r22, 0x04	; 4
    5094:	70 e0       	ldi	r23, 0x00	; 0
    5096:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__divmodhi4>
    509a:	0b c0       	rjmp	.+22     	; 0x50b2 <ADC_Offset_Get_Signed+0x52>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    509c:	80 81       	ld	r24, Z
    509e:	80 68       	ori	r24, 0x80	; 128
    50a0:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    50a2:	83 81       	ldd	r24, Z+3	; 0x03
    50a4:	80 ff       	sbrs	r24, 0
    50a6:	fd cf       	rjmp	.-6      	; 0x50a2 <ADC_Offset_Get_Signed+0x42>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    50ac:	84 81       	ldd	r24, Z+4	; 0x04
    50ae:	95 81       	ldd	r25, Z+5	; 0x05
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    50b0:	68 2f       	mov	r22, r24
      
      return offset;
    }
}
    50b2:	86 2f       	mov	r24, r22
    50b4:	08 95       	ret

000050b6 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    50b6:	aa ec       	ldi	r26, 0xCA	; 202
    50b8:	b1 e0       	ldi	r27, 0x01	; 1
    50ba:	92 e0       	ldi	r25, 0x02	; 2
    50bc:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    50be:	e8 2f       	mov	r30, r24
    50c0:	f0 e0       	ldi	r31, 0x00	; 0
    50c2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    50c4:	1c 92       	st	X, r1

	return result;
}
    50c6:	8e 2f       	mov	r24, r30
    50c8:	08 95       	ret

000050ca <DAC_SingleChannel_Enable>:
 *  \param  leftAdjust  Set to true to make data registers left adjusted.
 */
void DAC_SingleChannel_Enable( volatile DAC_t * dac,
                              DAC_REFSEL_t convRef,
                              bool leftAdjust )
{
    50ca:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_SINGLE_gc;
    50cc:	81 81       	ldd	r24, Z+1	; 0x01
    50ce:	8f 79       	andi	r24, 0x9F	; 159
    50d0:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~(DAC_REFSEL_gm | DAC_LEFTADJ_bm) ) |
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	86 7e       	andi	r24, 0xE6	; 230
    50d6:	68 2b       	or	r22, r24
    50d8:	64 2b       	or	r22, r20
    50da:	62 83       	std	Z+2, r22	; 0x02
	             convRef | ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->CTRLA = ( dac->CTRLA & ~DAC_CH1EN_bm ) |
    50dc:	80 81       	ld	r24, Z
    50de:	82 7f       	andi	r24, 0xF2	; 242
    50e0:	85 60       	ori	r24, 0x05	; 5
    50e2:	80 83       	st	Z, r24
	             DAC_CH0EN_bm | DAC_ENABLE_bm;
}
    50e4:	08 95       	ret

000050e6 <DAC_DualChannel_Enable>:
void DAC_DualChannel_Enable( volatile DAC_t * dac,
                            DAC_REFSEL_t convRef,
                            bool leftAdjust,
                            DAC_CONINTVAL_t sampleInterval,
                            DAC_REFRESH_t refreshInterval )
{
    50e6:	0f 93       	push	r16
    50e8:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_DUAL_gc;
    50ea:	81 81       	ldd	r24, Z+1	; 0x01
    50ec:	8f 79       	andi	r24, 0x9F	; 159
    50ee:	80 64       	ori	r24, 0x40	; 64
    50f0:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~( DAC_REFSEL_gm | DAC_LEFTADJ_bm ) ) |
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	86 7e       	andi	r24, 0xE6	; 230
    50f6:	68 2b       	or	r22, r24
    50f8:	64 2b       	or	r22, r20
    50fa:	62 83       	std	Z+2, r22	; 0x02
	             convRef |
	             ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->TIMCTRL = (uint8_t) sampleInterval | refreshInterval;
    50fc:	02 2b       	or	r16, r18
    50fe:	04 83       	std	Z+4, r16	; 0x04
	dac->CTRLA |= DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
    5100:	80 81       	ld	r24, Z
    5102:	8d 60       	ori	r24, 0x0D	; 13
    5104:	80 83       	st	Z, r24
}
    5106:	0f 91       	pop	r16
    5108:	08 95       	ret

0000510a <DAC_Channel_Write>:
 *  \param  dac     Pointer to DAC module register section.
 *  \param  data    Data to be converted.
 *  \param  channel Selected channel in the DAC module, either CH0 or CH1.
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
    510a:	fc 01       	movw	r30, r24
	if ( channel == CH0 ) {
    510c:	44 23       	and	r20, r20
    510e:	19 f4       	brne	.+6      	; 0x5116 <DAC_Channel_Write+0xc>
		dac->CH0DATA = data;
    5110:	60 8f       	std	Z+24, r22	; 0x18
    5112:	71 8f       	std	Z+25, r23	; 0x19
    5114:	08 95       	ret
	} else {
		dac->CH1DATA = data;
    5116:	62 8f       	std	Z+26, r22	; 0x1a
    5118:	73 8f       	std	Z+27, r23	; 0x1b
    511a:	08 95       	ret

0000511c <DAC_Channel_DataEmpty>:
 *
 *  \retval dacStatus True if data register is empty.
 *  \retval dacStatus False if data register is not empty.
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
    511c:	fc 01       	movw	r30, r24
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
    511e:	85 81       	ldd	r24, Z+5	; 0x05
    5120:	66 23       	and	r22, r22
    5122:	19 f4       	brne	.+6      	; 0x512a <DAC_Channel_DataEmpty+0xe>
    5124:	21 e0       	ldi	r18, 0x01	; 1
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	02 c0       	rjmp	.+4      	; 0x512e <DAC_Channel_DataEmpty+0x12>
    512a:	22 e0       	ldi	r18, 0x02	; 2
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	40 e0       	ldi	r20, 0x00	; 0
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	28 23       	and	r18, r24
    5134:	39 23       	and	r19, r25
    5136:	23 2b       	or	r18, r19
    5138:	09 f0       	breq	.+2      	; 0x513c <DAC_Channel_DataEmpty+0x20>
    513a:	41 e0       	ldi	r20, 0x01	; 1
	return dacStatus;
}
    513c:	84 2f       	mov	r24, r20
    513e:	08 95       	ret

00005140 <DAC_EventAction_Set>:
 *  \param  eventLine   Event line (0..7) to use for triggering conversions.
 */
void DAC_EventAction_Set( volatile DAC_t * dac,
                          DAC_TRIG_t trigChannel,
                          uint8_t eventLine )
{
    5140:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_TRIG_1_1 ) | trigChannel;
    5142:	81 81       	ldd	r24, Z+1	; 0x01
    5144:	8c 7f       	andi	r24, 0xFC	; 252
    5146:	86 2b       	or	r24, r22
    5148:	81 83       	std	Z+1, r24	; 0x01
	dac->EVCTRL = eventLine & DAC_EVSEL_gm;
    514a:	47 70       	andi	r20, 0x07	; 7
    514c:	43 83       	std	Z+3, r20	; 0x03
}
    514e:	08 95       	ret

00005150 <lcdInitHW>:
{
	// initialize I/O ports
	// if I/O interface is in use
#ifdef LCD_PORT_INTERFACE
	// initialize LCD control lines
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);
    5150:	e4 e4       	ldi	r30, 0x44	; 68
    5152:	f6 e0       	ldi	r31, 0x06	; 6
    5154:	80 81       	ld	r24, Z
    5156:	8f 7d       	andi	r24, 0xDF	; 223
    5158:	80 83       	st	Z, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);
    515a:	80 81       	ld	r24, Z
    515c:	8f 7b       	andi	r24, 0xBF	; 191
    515e:	80 83       	st	Z, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);
    5160:	80 81       	ld	r24, Z
    5162:	8f 77       	andi	r24, 0x7F	; 127
    5164:	80 83       	st	Z, r24
	// initialize LCD control lines to output
	sbi(LCD_CTRL_DDR, LCD_CTRL_RS);
    5166:	e0 e4       	ldi	r30, 0x40	; 64
    5168:	f6 e0       	ldi	r31, 0x06	; 6
    516a:	80 81       	ld	r24, Z
    516c:	80 62       	ori	r24, 0x20	; 32
    516e:	80 83       	st	Z, r24
	sbi(LCD_CTRL_DDR, LCD_CTRL_RW);
    5170:	80 81       	ld	r24, Z
    5172:	80 64       	ori	r24, 0x40	; 64
    5174:	80 83       	st	Z, r24
	sbi(LCD_CTRL_DDR, LCD_CTRL_E);
    5176:	80 81       	ld	r24, Z
    5178:	80 68       	ori	r24, 0x80	; 128
    517a:	80 83       	st	Z, r24
	// initialize LCD data port to input
	// initialize LCD data lines to pull-up
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    517c:	e0 e6       	ldi	r30, 0x60	; 96
    517e:	f6 e0       	ldi	r31, 0x06	; 6
    5180:	80 81       	ld	r24, Z
    5182:	80 7f       	andi	r24, 0xF0	; 240
    5184:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    5186:	e4 e6       	ldi	r30, 0x64	; 100
    5188:	f6 e0       	ldi	r31, 0x06	; 6
    518a:	80 81       	ld	r24, Z
    518c:	8f 60       	ori	r24, 0x0F	; 15
    518e:	80 83       	st	Z, r24
	#endif
#else
	// enable external memory bus if not already enabled
	sbi(MCUCR, SRE);			// enable bus interface
#endif
}
    5190:	08 95       	ret

00005192 <lcdBusyWait>:
void lcdBusyWait(void)
{
	// wait until LCD busy bit goes to zero
	// do a read from control register
#ifdef LCD_PORT_INTERFACE
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);				// set RS to "control"
    5192:	80 91 44 06 	lds	r24, 0x0644
    5196:	8f 7d       	andi	r24, 0xDF	; 223
    5198:	80 93 44 06 	sts	0x0644, r24
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);	// set data I/O lines to input (4bit)
    519c:	80 91 60 06 	lds	r24, 0x0660
    51a0:	80 7f       	andi	r24, 0xF0	; 240
    51a2:	80 93 60 06 	sts	0x0660, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    51a6:	80 91 64 06 	lds	r24, 0x0664
    51aa:	8f 60       	ori	r24, 0x0F	; 15
    51ac:	80 93 64 06 	sts	0x0664, r24
	#else
		outb(LCD_DATA_DDR, 0x00);					// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);					// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);				// set R/W to "read"
    51b0:	80 91 44 06 	lds	r24, 0x0644
    51b4:	80 64       	ori	r24, 0x40	; 64
    51b6:	80 93 44 06 	sts	0x0644, r24
	sbi(LCD_CTRL_PORT, LCD_CTRL_E);					// set "E" line
    51ba:	80 91 44 06 	lds	r24, 0x0644
    51be:	80 68       	ori	r24, 0x80	; 128
    51c0:	80 93 44 06 	sts	0x0644, r24
    51c4:	8a e0       	ldi	r24, 0x0A	; 10
    51c6:	8a 95       	dec	r24
    51c8:	f1 f7       	brne	.-4      	; 0x51c6 <lcdBusyWait+0x34>
	LCD_DELAY;								// wait
	while(inb(LCD_DATA_PIN) & 1<<LCD_BUSY)
	{
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);		// clear "E" line
    51ca:	9a e0       	ldi	r25, 0x0A	; 10
    51cc:	2c c0       	rjmp	.+88     	; 0x5226 <lcdBusyWait+0x94>
    51ce:	80 91 44 06 	lds	r24, 0x0644
    51d2:	8f 77       	andi	r24, 0x7F	; 127
    51d4:	80 93 44 06 	sts	0x0644, r24
    51d8:	89 2f       	mov	r24, r25
    51da:	8a 95       	dec	r24
    51dc:	f1 f7       	brne	.-4      	; 0x51da <lcdBusyWait+0x48>
		LCD_DELAY;									// wait
		LCD_DELAY;									// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);		// set "E" line
    51de:	89 2f       	mov	r24, r25
    51e0:	8a 95       	dec	r24
    51e2:	f1 f7       	brne	.-4      	; 0x51e0 <lcdBusyWait+0x4e>
    51e4:	80 91 44 06 	lds	r24, 0x0644
    51e8:	80 68       	ori	r24, 0x80	; 128
    51ea:	80 93 44 06 	sts	0x0644, r24
    51ee:	89 2f       	mov	r24, r25
    51f0:	8a 95       	dec	r24
    51f2:	f1 f7       	brne	.-4      	; 0x51f0 <lcdBusyWait+0x5e>
		LCD_DELAY;									// wait
		LCD_DELAY;									// wait
		#ifdef LCD_DATA_4BIT						// do an extra clock for 4 bit reads
			cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    51f4:	89 2f       	mov	r24, r25
    51f6:	8a 95       	dec	r24
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <lcdBusyWait+0x64>
    51fa:	80 91 44 06 	lds	r24, 0x0644
    51fe:	8f 77       	andi	r24, 0x7F	; 127
    5200:	80 93 44 06 	sts	0x0644, r24
    5204:	89 2f       	mov	r24, r25
    5206:	8a 95       	dec	r24
    5208:	f1 f7       	brne	.-4      	; 0x5206 <lcdBusyWait+0x74>
			LCD_DELAY;								// wait
			LCD_DELAY;								// wait
			sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    520a:	89 2f       	mov	r24, r25
    520c:	8a 95       	dec	r24
    520e:	f1 f7       	brne	.-4      	; 0x520c <lcdBusyWait+0x7a>
    5210:	80 91 44 06 	lds	r24, 0x0644
    5214:	80 68       	ori	r24, 0x80	; 128
    5216:	80 93 44 06 	sts	0x0644, r24
    521a:	89 2f       	mov	r24, r25
    521c:	8a 95       	dec	r24
    521e:	f1 f7       	brne	.-4      	; 0x521c <lcdBusyWait+0x8a>
		outb(LCD_DATA_POUT, 0xFF);					// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);				// set R/W to "read"
	sbi(LCD_CTRL_PORT, LCD_CTRL_E);					// set "E" line
	LCD_DELAY;								// wait
	while(inb(LCD_DATA_PIN) & 1<<LCD_BUSY)
    5220:	89 2f       	mov	r24, r25
    5222:	8a 95       	dec	r24
    5224:	f1 f7       	brne	.-4      	; 0x5222 <lcdBusyWait+0x90>
    5226:	80 91 68 06 	lds	r24, 0x0668
    522a:	83 fd       	sbrc	r24, 3
    522c:	d0 cf       	rjmp	.-96     	; 0x51ce <lcdBusyWait+0x3c>
			sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
			LCD_DELAY;								// wait
			LCD_DELAY;								// wait
		#endif
	}
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);			// clear "E" line
    522e:	80 91 44 06 	lds	r24, 0x0644
    5232:	8f 77       	andi	r24, 0x7F	; 127
    5234:	80 93 44 06 	sts	0x0644, r24
	// sbi(MCUCR, SRW);			// enable RAM waitstate
	// wait until LCD busy bit goes to zero
	while( (*((volatile unsigned char *) (LCD_CTRL_ADDR))) & (1<<LCD_BUSY) );
	// cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
    5238:	08 95       	ret

0000523a <lcdControlWrite>:

void lcdControlWrite(u08 data) 
{
    523a:	1f 93       	push	r17
    523c:	18 2f       	mov	r17, r24
// write the control byte to the display controller
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();							// wait until LCD not busy
    523e:	0e 94 c9 28 	call	0x5192	; 0x5192 <lcdBusyWait>
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// set RS to "control"
    5242:	e4 e4       	ldi	r30, 0x44	; 68
    5244:	f6 e0       	ldi	r31, 0x06	; 6
    5246:	80 81       	ld	r24, Z
    5248:	8f 7d       	andi	r24, 0xDF	; 223
    524a:	80 83       	st	Z, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);			// set R/W to "write"
    524c:	80 81       	ld	r24, Z
    524e:	8f 7b       	andi	r24, 0xBF	; 191
    5250:	80 83       	st	Z, r24
	#ifdef LCD_DATA_4BIT
		// 4 bit write
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    5252:	80 81       	ld	r24, Z
    5254:	80 68       	ori	r24, 0x80	; 128
    5256:	80 83       	st	Z, r24
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0x0F);	// set data I/O lines to output (4bit)
    5258:	20 e6       	ldi	r18, 0x60	; 96
    525a:	36 e0       	ldi	r19, 0x06	; 6
    525c:	d9 01       	movw	r26, r18
    525e:	8c 91       	ld	r24, X
    5260:	8f 60       	ori	r24, 0x0F	; 15
    5262:	8c 93       	st	X, r24
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data>>4) );	// output data, high 4 bits
    5264:	a4 e6       	ldi	r26, 0x64	; 100
    5266:	b6 e0       	ldi	r27, 0x06	; 6
    5268:	8c 91       	ld	r24, X
    526a:	91 2f       	mov	r25, r17
    526c:	92 95       	swap	r25
    526e:	9f 70       	andi	r25, 0x0F	; 15
    5270:	80 7f       	andi	r24, 0xF0	; 240
    5272:	98 2b       	or	r25, r24
    5274:	9c 93       	st	X, r25
    5276:	9a e0       	ldi	r25, 0x0A	; 10
    5278:	89 2f       	mov	r24, r25
    527a:	8a 95       	dec	r24
    527c:	f1 f7       	brne	.-4      	; 0x527a <lcdControlWrite+0x40>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    527e:	89 2f       	mov	r24, r25
    5280:	8a 95       	dec	r24
    5282:	f1 f7       	brne	.-4      	; 0x5280 <lcdControlWrite+0x46>
    5284:	80 81       	ld	r24, Z
    5286:	8f 77       	andi	r24, 0x7F	; 127
    5288:	80 83       	st	Z, r24
    528a:	89 2f       	mov	r24, r25
    528c:	8a 95       	dec	r24
    528e:	f1 f7       	brne	.-4      	; 0x528c <lcdControlWrite+0x52>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    5290:	89 2f       	mov	r24, r25
    5292:	8a 95       	dec	r24
    5294:	f1 f7       	brne	.-4      	; 0x5292 <lcdControlWrite+0x58>
    5296:	80 81       	ld	r24, Z
    5298:	80 68       	ori	r24, 0x80	; 128
    529a:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (0x0F&data) );	// output data, low 4 bits
    529c:	8c 91       	ld	r24, X
    529e:	1f 70       	andi	r17, 0x0F	; 15
    52a0:	80 7f       	andi	r24, 0xF0	; 240
    52a2:	81 2b       	or	r24, r17
    52a4:	8c 93       	st	X, r24
    52a6:	89 2f       	mov	r24, r25
    52a8:	8a 95       	dec	r24
    52aa:	f1 f7       	brne	.-4      	; 0x52a8 <lcdControlWrite+0x6e>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    52ac:	9a 95       	dec	r25
    52ae:	f1 f7       	brne	.-4      	; 0x52ac <lcdControlWrite+0x72>
    52b0:	80 81       	ld	r24, Z
    52b2:	8f 77       	andi	r24, 0x7F	; 127
    52b4:	80 83       	st	Z, r24
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
	#endif
	//	leave data lines in input mode so they can be most easily used for other purposes
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    52b6:	f9 01       	movw	r30, r18
    52b8:	80 81       	ld	r24, Z
    52ba:	80 7f       	andi	r24, 0xF0	; 240
    52bc:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    52be:	8c 91       	ld	r24, X
    52c0:	8f 60       	ori	r24, 0x0F	; 15
    52c2:	8c 93       	st	X, r24
	//sbi(MCUCR, SRW);			// enable RAM waitstate
	lcdBusyWait();				// wait until LCD not busy
	*((volatile unsigned char *) (LCD_CTRL_ADDR)) = data;
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
    52c4:	1f 91       	pop	r17
    52c6:	08 95       	ret

000052c8 <lcdControlWrite4>:

void lcdControlWrite4(u08 data) 
{
// write the control byte to the display controller
	//lcdBusyWait();							// wait until LCD not busy
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// set RS to "control"
    52c8:	e4 e4       	ldi	r30, 0x44	; 68
    52ca:	f6 e0       	ldi	r31, 0x06	; 6
    52cc:	90 81       	ld	r25, Z
    52ce:	9f 7d       	andi	r25, 0xDF	; 223
    52d0:	90 83       	st	Z, r25
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);			// set R/W to "write"
    52d2:	90 81       	ld	r25, Z
    52d4:	9f 7b       	andi	r25, 0xBF	; 191
    52d6:	90 83       	st	Z, r25

		// 4 bit write
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    52d8:	90 81       	ld	r25, Z
    52da:	90 68       	ori	r25, 0x80	; 128
    52dc:	90 83       	st	Z, r25
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0x0F);	// set data I/O lines to output (4bit)
    52de:	20 e6       	ldi	r18, 0x60	; 96
    52e0:	36 e0       	ldi	r19, 0x06	; 6
    52e2:	d9 01       	movw	r26, r18
    52e4:	9c 91       	ld	r25, X
    52e6:	9f 60       	ori	r25, 0x0F	; 15
    52e8:	9c 93       	st	X, r25
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data>>4) );	// output data, high 4 bits
    52ea:	a4 e6       	ldi	r26, 0x64	; 100
    52ec:	b6 e0       	ldi	r27, 0x06	; 6
    52ee:	9c 91       	ld	r25, X
    52f0:	82 95       	swap	r24
    52f2:	8f 70       	andi	r24, 0x0F	; 15
    52f4:	90 7f       	andi	r25, 0xF0	; 240
    52f6:	98 2b       	or	r25, r24
    52f8:	9c 93       	st	X, r25
    52fa:	8a e0       	ldi	r24, 0x0A	; 10
    52fc:	98 2f       	mov	r25, r24
    52fe:	9a 95       	dec	r25
    5300:	f1 f7       	brne	.-4      	; 0x52fe <lcdControlWrite4+0x36>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    5302:	8a 95       	dec	r24
    5304:	f1 f7       	brne	.-4      	; 0x5302 <lcdControlWrite4+0x3a>
    5306:	80 81       	ld	r24, Z
    5308:	8f 77       	andi	r24, 0x7F	; 127
    530a:	80 83       	st	Z, r24

	

		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    530c:	f9 01       	movw	r30, r18
    530e:	80 81       	ld	r24, Z
    5310:	80 7f       	andi	r24, 0xF0	; 240
    5312:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    5314:	8c 91       	ld	r24, X
    5316:	8f 60       	ori	r24, 0x0F	; 15
    5318:	8c 93       	st	X, r24

}
    531a:	08 95       	ret

0000531c <lcdControlRead>:
u08 lcdControlRead(void)
{
// read the control byte from the display controller
	register u08 data;
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();				// wait until LCD not busy
    531c:	0e 94 c9 28 	call	0x5192	; 0x5192 <lcdBusyWait>
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    5320:	e0 e6       	ldi	r30, 0x60	; 96
    5322:	f6 e0       	ldi	r31, 0x06	; 6
    5324:	80 81       	ld	r24, Z
    5326:	80 7f       	andi	r24, 0xF0	; 240
    5328:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    532a:	e4 e6       	ldi	r30, 0x64	; 100
    532c:	f6 e0       	ldi	r31, 0x06	; 6
    532e:	80 81       	ld	r24, Z
    5330:	8f 60       	ori	r24, 0x0F	; 15
    5332:	80 83       	st	Z, r24
	#else
		outb(LCD_DATA_DDR, 0x00);			// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);			// set pull-ups to on (8bit)
	#endif
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "control"
    5334:	e4 e4       	ldi	r30, 0x44	; 68
    5336:	f6 e0       	ldi	r31, 0x06	; 6
    5338:	80 81       	ld	r24, Z
    533a:	8f 7d       	andi	r24, 0xDF	; 223
    533c:	80 83       	st	Z, r24
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "read"
    533e:	80 81       	ld	r24, Z
    5340:	80 64       	ori	r24, 0x40	; 64
    5342:	80 83       	st	Z, r24
	#ifdef LCD_DATA_4BIT
		// 4 bit read
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    5344:	80 81       	ld	r24, Z
    5346:	80 68       	ori	r24, 0x80	; 128
    5348:	80 83       	st	Z, r24
    534a:	9a e0       	ldi	r25, 0x0A	; 10
    534c:	89 2f       	mov	r24, r25
    534e:	8a 95       	dec	r24
    5350:	f1 f7       	brne	.-4      	; 0x534e <lcdControlRead+0x32>
		LCD_DELAY;						// wait
		LCD_DELAY;						// wait
		data = inb(LCD_DATA_PIN)<<4;	// input data, high 4 bits
    5352:	89 2f       	mov	r24, r25
    5354:	8a 95       	dec	r24
    5356:	f1 f7       	brne	.-4      	; 0x5354 <lcdControlRead+0x38>
    5358:	a8 e6       	ldi	r26, 0x68	; 104
    535a:	b6 e0       	ldi	r27, 0x06	; 6
    535c:	2c 91       	ld	r18, X
	//	data = inb(LCD_DATA_PIN)&0xF0;	// input data, high 4 bits
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    535e:	80 81       	ld	r24, Z
    5360:	8f 77       	andi	r24, 0x7F	; 127
    5362:	80 83       	st	Z, r24
    5364:	89 2f       	mov	r24, r25
    5366:	8a 95       	dec	r24
    5368:	f1 f7       	brne	.-4      	; 0x5366 <lcdControlRead+0x4a>
		LCD_DELAY;						// wait
		LCD_DELAY;						// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    536a:	89 2f       	mov	r24, r25
    536c:	8a 95       	dec	r24
    536e:	f1 f7       	brne	.-4      	; 0x536c <lcdControlRead+0x50>
    5370:	80 81       	ld	r24, Z
    5372:	80 68       	ori	r24, 0x80	; 128
    5374:	80 83       	st	Z, r24
    5376:	89 2f       	mov	r24, r25
    5378:	8a 95       	dec	r24
    537a:	f1 f7       	brne	.-4      	; 0x5378 <lcdControlRead+0x5c>
		LCD_DELAY;						// wait
		LCD_DELAY;						// wait
		data |= (inb(LCD_DATA_PIN)&0x0F);	// input data, low 4 bits
    537c:	9a 95       	dec	r25
    537e:	f1 f7       	brne	.-4      	; 0x537c <lcdControlRead+0x60>
    5380:	8c 91       	ld	r24, X
    5382:	8f 70       	andi	r24, 0x0F	; 15
    5384:	22 95       	swap	r18
    5386:	20 7f       	andi	r18, 0xF0	; 240
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    5388:	90 81       	ld	r25, Z
    538a:	9f 77       	andi	r25, 0x7F	; 127
    538c:	90 83       	st	Z, r25
	lcdBusyWait();				// wait until LCD not busy
	data = *((volatile unsigned char *) (LCD_CTRL_ADDR));
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
	return data;
}
    538e:	82 2b       	or	r24, r18
    5390:	08 95       	ret

00005392 <lcdDataWrite>:

void lcdDataWrite(u08 data) 
{
    5392:	1f 93       	push	r17
    5394:	18 2f       	mov	r17, r24
// write a data byte to the display
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();							// wait until LCD not busy
    5396:	0e 94 c9 28 	call	0x5192	; 0x5192 <lcdBusyWait>
	sbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "data"
    539a:	e4 e4       	ldi	r30, 0x44	; 68
    539c:	f6 e0       	ldi	r31, 0x06	; 6
    539e:	80 81       	ld	r24, Z
    53a0:	80 62       	ori	r24, 0x20	; 32
    53a2:	80 83       	st	Z, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "write"
    53a4:	80 81       	ld	r24, Z
    53a6:	8f 7b       	andi	r24, 0xBF	; 191
    53a8:	80 83       	st	Z, r24
	#ifdef LCD_DATA_4BIT
		// 4 bit write
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    53aa:	80 81       	ld	r24, Z
    53ac:	80 68       	ori	r24, 0x80	; 128
    53ae:	80 83       	st	Z, r24
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0x0F);	// set data I/O lines to output (4bit)
    53b0:	20 e6       	ldi	r18, 0x60	; 96
    53b2:	36 e0       	ldi	r19, 0x06	; 6
    53b4:	d9 01       	movw	r26, r18
    53b6:	8c 91       	ld	r24, X
    53b8:	8f 60       	ori	r24, 0x0F	; 15
    53ba:	8c 93       	st	X, r24
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data>>4) );	// output data, high 4 bits
    53bc:	a4 e6       	ldi	r26, 0x64	; 100
    53be:	b6 e0       	ldi	r27, 0x06	; 6
    53c0:	8c 91       	ld	r24, X
    53c2:	91 2f       	mov	r25, r17
    53c4:	92 95       	swap	r25
    53c6:	9f 70       	andi	r25, 0x0F	; 15
    53c8:	80 7f       	andi	r24, 0xF0	; 240
    53ca:	98 2b       	or	r25, r24
    53cc:	9c 93       	st	X, r25
    53ce:	9a e0       	ldi	r25, 0x0A	; 10
    53d0:	89 2f       	mov	r24, r25
    53d2:	8a 95       	dec	r24
    53d4:	f1 f7       	brne	.-4      	; 0x53d2 <lcdDataWrite+0x40>
		//outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | 0x06 );	// output data, high 4 bits
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    53d6:	89 2f       	mov	r24, r25
    53d8:	8a 95       	dec	r24
    53da:	f1 f7       	brne	.-4      	; 0x53d8 <lcdDataWrite+0x46>
    53dc:	80 81       	ld	r24, Z
    53de:	8f 77       	andi	r24, 0x7F	; 127
    53e0:	80 83       	st	Z, r24
    53e2:	89 2f       	mov	r24, r25
    53e4:	8a 95       	dec	r24
    53e6:	f1 f7       	brne	.-4      	; 0x53e4 <lcdDataWrite+0x52>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    53e8:	89 2f       	mov	r24, r25
    53ea:	8a 95       	dec	r24
    53ec:	f1 f7       	brne	.-4      	; 0x53ea <lcdDataWrite+0x58>
    53ee:	80 81       	ld	r24, Z
    53f0:	80 68       	ori	r24, 0x80	; 128
    53f2:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data&0x0F) );	// output data, low 4 bits
    53f4:	8c 91       	ld	r24, X
    53f6:	1f 70       	andi	r17, 0x0F	; 15
    53f8:	80 7f       	andi	r24, 0xF0	; 240
    53fa:	81 2b       	or	r24, r17
    53fc:	8c 93       	st	X, r24
    53fe:	89 2f       	mov	r24, r25
    5400:	8a 95       	dec	r24
    5402:	f1 f7       	brne	.-4      	; 0x5400 <lcdDataWrite+0x6e>
		//outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | 0x07 );	// output data, high 4 bits
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    5404:	9a 95       	dec	r25
    5406:	f1 f7       	brne	.-4      	; 0x5404 <lcdDataWrite+0x72>
    5408:	80 81       	ld	r24, Z
    540a:	8f 77       	andi	r24, 0x7F	; 127
    540c:	80 83       	st	Z, r24
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
	#endif
	//	leave data lines in input mode so they can be most easily used for other purposes
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    540e:	f9 01       	movw	r30, r18
    5410:	80 81       	ld	r24, Z
    5412:	80 7f       	andi	r24, 0xF0	; 240
    5414:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    5416:	8c 91       	ld	r24, X
    5418:	8f 60       	ori	r24, 0x0F	; 15
    541a:	8c 93       	st	X, r24
	//sbi(MCUCR, SRW);			// enable RAM waitstate
	lcdBusyWait();				// wait until LCD not busy
	*((volatile unsigned char *) (LCD_DATA_ADDR)) = data;
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
    541c:	1f 91       	pop	r17
    541e:	08 95       	ret

00005420 <lcdDataRead>:
u08 lcdDataRead(void)
{
// read a data byte from the display
	register u08 data;
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();				// wait until LCD not busy
    5420:	0e 94 c9 28 	call	0x5192	; 0x5192 <lcdBusyWait>
	#ifdef LCD_DATA_4BIT
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
    5424:	e0 e6       	ldi	r30, 0x60	; 96
    5426:	f6 e0       	ldi	r31, 0x06	; 6
    5428:	80 81       	ld	r24, Z
    542a:	80 7f       	andi	r24, 0xF0	; 240
    542c:	80 83       	st	Z, r24
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
    542e:	e4 e6       	ldi	r30, 0x64	; 100
    5430:	f6 e0       	ldi	r31, 0x06	; 6
    5432:	80 81       	ld	r24, Z
    5434:	8f 60       	ori	r24, 0x0F	; 15
    5436:	80 83       	st	Z, r24
	#else
		outb(LCD_DATA_DDR, 0x00);			// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);			// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "data"
    5438:	e4 e4       	ldi	r30, 0x44	; 68
    543a:	f6 e0       	ldi	r31, 0x06	; 6
    543c:	80 81       	ld	r24, Z
    543e:	80 62       	ori	r24, 0x20	; 32
    5440:	80 83       	st	Z, r24
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "read"
    5442:	80 81       	ld	r24, Z
    5444:	80 64       	ori	r24, 0x40	; 64
    5446:	80 83       	st	Z, r24
	#ifdef LCD_DATA_4BIT
		// 4 bit read
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    5448:	80 81       	ld	r24, Z
    544a:	80 68       	ori	r24, 0x80	; 128
    544c:	80 83       	st	Z, r24
    544e:	9a e0       	ldi	r25, 0x0A	; 10
    5450:	89 2f       	mov	r24, r25
    5452:	8a 95       	dec	r24
    5454:	f1 f7       	brne	.-4      	; 0x5452 <lcdDataRead+0x32>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		data = inb(LCD_DATA_PIN)>>4;	// input data, high 4 bits
    5456:	89 2f       	mov	r24, r25
    5458:	8a 95       	dec	r24
    545a:	f1 f7       	brne	.-4      	; 0x5458 <lcdDataRead+0x38>
    545c:	a8 e6       	ldi	r26, 0x68	; 104
    545e:	b6 e0       	ldi	r27, 0x06	; 6
    5460:	2c 91       	ld	r18, X
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    5462:	80 81       	ld	r24, Z
    5464:	8f 77       	andi	r24, 0x7F	; 127
    5466:	80 83       	st	Z, r24
    5468:	89 2f       	mov	r24, r25
    546a:	8a 95       	dec	r24
    546c:	f1 f7       	brne	.-4      	; 0x546a <lcdDataRead+0x4a>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
    546e:	89 2f       	mov	r24, r25
    5470:	8a 95       	dec	r24
    5472:	f1 f7       	brne	.-4      	; 0x5470 <lcdDataRead+0x50>
    5474:	80 81       	ld	r24, Z
    5476:	80 68       	ori	r24, 0x80	; 128
    5478:	80 83       	st	Z, r24
    547a:	89 2f       	mov	r24, r25
    547c:	8a 95       	dec	r24
    547e:	f1 f7       	brne	.-4      	; 0x547c <lcdDataRead+0x5c>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		data |= inb(LCD_DATA_PIN)&0x0F;			// input data, low 4 bits
    5480:	9a 95       	dec	r25
    5482:	f1 f7       	brne	.-4      	; 0x5480 <lcdDataRead+0x60>
    5484:	8c 91       	ld	r24, X
    5486:	8f 70       	andi	r24, 0x0F	; 15
    5488:	22 95       	swap	r18
    548a:	2f 70       	andi	r18, 0x0F	; 15
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
    548c:	90 81       	ld	r25, Z
    548e:	9f 77       	andi	r25, 0x7F	; 127
    5490:	90 83       	st	Z, r25
	lcdBusyWait();				// wait until LCD not busy
	data = *((volatile unsigned char *) (LCD_DATA_ADDR));
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
	return data;
}
    5492:	82 2b       	or	r24, r18
    5494:	08 95       	ret

00005496 <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    5496:	0e 94 a8 28 	call	0x5150	; 0x5150 <lcdInitHW>
	lcdControlWrite4(0x30);
    549a:	80 e3       	ldi	r24, 0x30	; 48
    549c:	0e 94 64 29 	call	0x52c8	; 0x52c8 <lcdControlWrite4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    54a0:	84 ef       	ldi	r24, 0xF4	; 244
    54a2:	91 e0       	ldi	r25, 0x01	; 1
    54a4:	01 97       	sbiw	r24, 0x01	; 1
    54a6:	f1 f7       	brne	.-4      	; 0x54a4 <lcdInit+0xe>
	_delay_ms(2);
	lcdControlWrite4(0x30);
    54a8:	80 e3       	ldi	r24, 0x30	; 48
    54aa:	0e 94 64 29 	call	0x52c8	; 0x52c8 <lcdControlWrite4>
	lcdControlWrite4(0x30);
    54ae:	80 e3       	ldi	r24, 0x30	; 48
    54b0:	0e 94 64 29 	call	0x52c8	; 0x52c8 <lcdControlWrite4>
	lcdControlWrite4(0x20);
    54b4:	80 e2       	ldi	r24, 0x20	; 32
    54b6:	0e 94 64 29 	call	0x52c8	; 0x52c8 <lcdControlWrite4>
	lcdControlWrite(0x29);
    54ba:	89 e2       	ldi	r24, 0x29	; 41
    54bc:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x15);
    54c0:	85 e1       	ldi	r24, 0x15	; 21
    54c2:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x72);
    54c6:	82 e7       	ldi	r24, 0x72	; 114
    54c8:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x55);
    54cc:	85 e5       	ldi	r24, 0x55	; 85
    54ce:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x6E);
    54d2:	8e e6       	ldi	r24, 0x6E	; 110
    54d4:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x0C);
    54d8:	8c e0       	ldi	r24, 0x0C	; 12
    54da:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x01);
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
	lcdControlWrite(0x06);
    54e4:	86 e0       	ldi	r24, 0x06	; 6
    54e6:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
//	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
//	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
//	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
//	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
//	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
}
    54ea:	08 95       	ret

000054ec <lcdHome>:

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    54ec:	82 e0       	ldi	r24, 0x02	; 2
    54ee:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
    54f2:	84 ef       	ldi	r24, 0xF4	; 244
    54f4:	91 e0       	ldi	r25, 0x01	; 1
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	f1 f7       	brne	.-4      	; 0x54f6 <lcdHome+0xa>
	_delay_ms(2);
}
    54fa:	08 95       	ret

000054fc <lcdClear>:

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
    5502:	84 ef       	ldi	r24, 0xF4	; 244
    5504:	91 e0       	ldi	r25, 0x01	; 1
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	f1 f7       	brne	.-4      	; 0x5506 <lcdClear+0xa>
	_delay_ms(2);
}
    550a:	08 95       	ret

0000550c <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    550c:	62 30       	cpi	r22, 0x02	; 2
    550e:	31 f0       	breq	.+12     	; 0x551c <lcdGotoXY+0x10>
    5510:	63 30       	cpi	r22, 0x03	; 3
    5512:	31 f0       	breq	.+12     	; 0x5520 <lcdGotoXY+0x14>
    5514:	61 30       	cpi	r22, 0x01	; 1
    5516:	29 f4       	brne	.+10     	; 0x5522 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    5518:	80 5f       	subi	r24, 0xF0	; 240
    551a:	03 c0       	rjmp	.+6      	; 0x5522 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    551c:	80 5e       	subi	r24, 0xE0	; 224
    551e:	01 c0       	rjmp	.+2      	; 0x5522 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    5520:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    5522:	80 68       	ori	r24, 0x80	; 128
    5524:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
}
    5528:	08 95       	ret

0000552a <lcdLoadCustomChar>:

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    552a:	ff 92       	push	r15
    552c:	0f 93       	push	r16
    552e:	1f 93       	push	r17
    5530:	cf 93       	push	r28
    5532:	df 93       	push	r29
    5534:	ec 01       	movw	r28, r24
    5536:	16 2f       	mov	r17, r22
    5538:	04 2f       	mov	r16, r20
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    553a:	0e 94 8e 29 	call	0x531c	; 0x531c <lcdControlRead>
    553e:	f8 2e       	mov	r15, r24

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    5540:	00 0f       	add	r16, r16
    5542:	00 0f       	add	r16, r16
    5544:	00 0f       	add	r16, r16
    5546:	11 0f       	add	r17, r17
    5548:	11 0f       	add	r17, r17
    554a:	11 0f       	add	r17, r17
    554c:	c1 0f       	add	r28, r17
    554e:	d1 1d       	adc	r29, r1
    5550:	10 e0       	ldi	r17, 0x00	; 0

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    5552:	81 2f       	mov	r24, r17
    5554:	80 0f       	add	r24, r16
    5556:	80 64       	ori	r24, 0x40	; 64
    5558:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    555c:	fe 01       	movw	r30, r28
    555e:	84 91       	lpm	r24, Z+
    5560:	0e 94 c9 29 	call	0x5392	; 0x5392 <lcdDataWrite>
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    5564:	1f 5f       	subi	r17, 0xFF	; 255
    5566:	21 96       	adiw	r28, 0x01	; 1
    5568:	18 30       	cpi	r17, 0x08	; 8
    556a:	99 f7       	brne	.-26     	; 0x5552 <lcdLoadCustomChar+0x28>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    556c:	8f 2d       	mov	r24, r15
    556e:	80 68       	ori	r24, 0x80	; 128
    5570:	0e 94 1d 29 	call	0x523a	; 0x523a <lcdControlWrite>

}
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	1f 91       	pop	r17
    557a:	0f 91       	pop	r16
    557c:	ff 90       	pop	r15
    557e:	08 95       	ret

00005580 <lcdPrintData>:

void lcdPrintData(char* data, u08 nBytes)
{
    5580:	0f 93       	push	r16
    5582:	1f 93       	push	r17
    5584:	cf 93       	push	r28
    5586:	df 93       	push	r29
    5588:	06 2f       	mov	r16, r22
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    558a:	00 97       	sbiw	r24, 0x00	; 0
    558c:	49 f0       	breq	.+18     	; 0x55a0 <lcdPrintData+0x20>
    558e:	ec 01       	movw	r28, r24
    5590:	10 e0       	ldi	r17, 0x00	; 0
    5592:	04 c0       	rjmp	.+8      	; 0x559c <lcdPrintData+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		lcdDataWrite(data[i]);
    5594:	89 91       	ld	r24, Y+
    5596:	0e 94 c9 29 	call	0x5392	; 0x5392 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    559a:	1f 5f       	subi	r17, 0xFF	; 255
    559c:	10 17       	cp	r17, r16
    559e:	d0 f3       	brcs	.-12     	; 0x5594 <lcdPrintData+0x14>
	{
		lcdDataWrite(data[i]);
	}
}
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	1f 91       	pop	r17
    55a6:	0f 91       	pop	r16
    55a8:	08 95       	ret

000055aa <lcdProgressBar>:

void lcdProgressBar(u16 progress, u16 maxprogress, u08 length)
{
    55aa:	7f 92       	push	r7
    55ac:	8f 92       	push	r8
    55ae:	9f 92       	push	r9
    55b0:	af 92       	push	r10
    55b2:	bf 92       	push	r11
    55b4:	cf 92       	push	r12
    55b6:	df 92       	push	r13
    55b8:	ef 92       	push	r14
    55ba:	ff 92       	push	r15
    55bc:	0f 93       	push	r16
    55be:	1f 93       	push	r17
    55c0:	74 2e       	mov	r7, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    55c2:	9c 01       	movw	r18, r24
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	28 0f       	add	r18, r24
    55ca:	39 1f       	adc	r19, r25
    55cc:	22 0f       	add	r18, r18
    55ce:	33 1f       	adc	r19, r19
    55d0:	87 2d       	mov	r24, r7
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	ac 01       	movw	r20, r24
    55d6:	24 9f       	mul	r18, r20
    55d8:	c0 01       	movw	r24, r0
    55da:	25 9f       	mul	r18, r21
    55dc:	90 0d       	add	r25, r0
    55de:	34 9f       	mul	r19, r20
    55e0:	90 0d       	add	r25, r0
    55e2:	11 24       	eor	r1, r1
    55e4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodhi4>
    55e8:	5b 01       	movw	r10, r22
    55ea:	cc 24       	eor	r12, r12
    55ec:	dd 24       	eor	r13, r13
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    55ee:	c6 01       	movw	r24, r12
    55f0:	b5 01       	movw	r22, r10
    55f2:	26 e0       	ldi	r18, 0x06	; 6
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	50 e0       	ldi	r21, 0x00	; 0
    55fa:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <__udivmodsi4>
    55fe:	86 2e       	mov	r8, r22
    5600:	99 24       	eor	r9, r9
    5602:	ee 24       	eor	r14, r14
    5604:	ff 24       	eor	r15, r15
    5606:	87 01       	movw	r16, r14
    5608:	1f c0       	rjmp	.+62     	; 0x5648 <lcdProgressBar+0x9e>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(u16)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    560a:	d8 01       	movw	r26, r16
    560c:	c7 01       	movw	r24, r14
    560e:	05 96       	adiw	r24, 0x05	; 5
    5610:	a1 1d       	adc	r26, r1
    5612:	b1 1d       	adc	r27, r1
    5614:	a8 16       	cp	r10, r24
    5616:	b9 06       	cpc	r11, r25
    5618:	ca 06       	cpc	r12, r26
    561a:	db 06       	cpc	r13, r27
    561c:	10 f0       	brcs	.+4      	; 0x5622 <lcdProgressBar+0x78>
    561e:	85 e0       	ldi	r24, 0x05	; 5
    5620:	08 c0       	rjmp	.+16     	; 0x5632 <lcdProgressBar+0x88>
		{
			// this is a partial or empty block
			if( ((i*(u16)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    5622:	ae 14       	cp	r10, r14
    5624:	bf 04       	cpc	r11, r15
    5626:	c0 06       	cpc	r12, r16
    5628:	d1 06       	cpc	r13, r17
    562a:	10 f0       	brcs	.+4      	; 0x5630 <lcdProgressBar+0x86>
    562c:	88 2d       	mov	r24, r8
    562e:	01 c0       	rjmp	.+2      	; 0x5632 <lcdProgressBar+0x88>
    5630:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		lcdDataWrite(c);
    5632:	0e 94 c9 29 	call	0x5392	; 0x5392 <lcdDataWrite>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    5636:	93 94       	inc	r9
    5638:	86 e0       	ldi	r24, 0x06	; 6
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	a0 e0       	ldi	r26, 0x00	; 0
    563e:	b0 e0       	ldi	r27, 0x00	; 0
    5640:	e8 0e       	add	r14, r24
    5642:	f9 1e       	adc	r15, r25
    5644:	0a 1f       	adc	r16, r26
    5646:	1b 1f       	adc	r17, r27
    5648:	97 14       	cp	r9, r7
    564a:	f8 f2       	brcs	.-66     	; 0x560a <lcdProgressBar+0x60>
		
		// write character to display
		lcdDataWrite(c);
	}

}
    564c:	1f 91       	pop	r17
    564e:	0f 91       	pop	r16
    5650:	ff 90       	pop	r15
    5652:	ef 90       	pop	r14
    5654:	df 90       	pop	r13
    5656:	cf 90       	pop	r12
    5658:	bf 90       	pop	r11
    565a:	af 90       	pop	r10
    565c:	9f 90       	pop	r9
    565e:	8f 90       	pop	r8
    5660:	7f 90       	pop	r7
    5662:	08 95       	ret

00005664 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
    5664:	af 92       	push	r10
    5666:	cf 92       	push	r12
    5668:	ef 92       	push	r14
    566a:	0f 93       	push	r16
    566c:	dc 01       	movw	r26, r24
    566e:	fb 01       	movw	r30, r22
	spi->module         = module;
    5670:	6d 93       	st	X+, r22
    5672:	7c 93       	st	X, r23
    5674:	11 97       	sbiw	r26, 0x01	; 1
	spi->port           = port;
    5676:	12 96       	adiw	r26, 0x02	; 2
    5678:	4d 93       	st	X+, r20
    567a:	5c 93       	st	X, r21
    567c:	13 97       	sbiw	r26, 0x03	; 3
	spi->interrupted    = false;
    567e:	14 96       	adiw	r26, 0x04	; 4
    5680:	1c 92       	st	X, r1
    5682:	14 97       	sbiw	r26, 0x04	; 4

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    5684:	cc 20       	and	r12, r12
    5686:	11 f4       	brne	.+4      	; 0x568c <SPI_MasterInit+0x28>
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	01 c0       	rjmp	.+2      	; 0x568e <SPI_MasterInit+0x2a>
    568c:	90 e8       	ldi	r25, 0x80	; 128
    568e:	22 23       	and	r18, r18
    5690:	11 f4       	brne	.+4      	; 0x5696 <SPI_MasterInit+0x32>
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	01 c0       	rjmp	.+2      	; 0x5698 <SPI_MasterInit+0x34>
    5696:	80 e2       	ldi	r24, 0x20	; 32
    5698:	00 65       	ori	r16, 0x50	; 80
    569a:	0a 29       	or	r16, r10
    569c:	90 2b       	or	r25, r16
    569e:	89 2b       	or	r24, r25
    56a0:	80 83       	st	Z, r24
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    56a2:	ed 91       	ld	r30, X+
    56a4:	fc 91       	ld	r31, X
    56a6:	11 97       	sbiw	r26, 0x01	; 1
    56a8:	e1 82       	std	Z+1, r14	; 0x01

	/* No assigned data packet. */
	spi->dataPacket = NULL;
    56aa:	15 96       	adiw	r26, 0x05	; 5
    56ac:	1d 92       	st	X+, r1
    56ae:	1c 92       	st	X, r1
    56b0:	16 97       	sbiw	r26, 0x06	; 6

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
    56b2:	12 96       	adiw	r26, 0x02	; 2
    56b4:	ed 91       	ld	r30, X+
    56b6:	fc 91       	ld	r31, X
    56b8:	13 97       	sbiw	r26, 0x03	; 3
    56ba:	80 ea       	ldi	r24, 0xA0	; 160
    56bc:	81 83       	std	Z+1, r24	; 0x01
}
    56be:	0f 91       	pop	r16
    56c0:	ef 90       	pop	r14
    56c2:	cf 90       	pop	r12
    56c4:	af 90       	pop	r10
    56c6:	08 95       	ret

000056c8 <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
    56c8:	ef 92       	push	r14
    56ca:	0f 93       	push	r16
    56cc:	dc 01       	movw	r26, r24
    56ce:	fb 01       	movw	r30, r22
	/* SPI module. */
	spi->module       = module;
    56d0:	6d 93       	st	X+, r22
    56d2:	7c 93       	st	X, r23
    56d4:	11 97       	sbiw	r26, 0x01	; 1
	spi->port         = port;
    56d6:	12 96       	adiw	r26, 0x02	; 2
    56d8:	4d 93       	st	X+, r20
    56da:	5c 93       	st	X, r21
    56dc:	13 97       	sbiw	r26, 0x03	; 3

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    56de:	22 23       	and	r18, r18
    56e0:	11 f4       	brne	.+4      	; 0x56e6 <SPI_SlaveInit+0x1e>
    56e2:	80 e4       	ldi	r24, 0x40	; 64
    56e4:	01 c0       	rjmp	.+2      	; 0x56e8 <SPI_SlaveInit+0x20>
    56e6:	80 e6       	ldi	r24, 0x60	; 96
    56e8:	80 2b       	or	r24, r16
    56ea:	80 83       	st	Z, r24
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    56ec:	ed 91       	ld	r30, X+
    56ee:	fc 91       	ld	r31, X
    56f0:	11 97       	sbiw	r26, 0x01	; 1
    56f2:	e1 82       	std	Z+1, r14	; 0x01

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
    56f4:	12 96       	adiw	r26, 0x02	; 2
    56f6:	ed 91       	ld	r30, X+
    56f8:	fc 91       	ld	r31, X
    56fa:	13 97       	sbiw	r26, 0x03	; 3
    56fc:	80 e4       	ldi	r24, 0x40	; 64
    56fe:	81 83       	std	Z+1, r24	; 0x01
}
    5700:	0f 91       	pop	r16
    5702:	ef 90       	pop	r14
    5704:	08 95       	ret

00005706 <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
    5706:	ef 92       	push	r14
    5708:	0f 93       	push	r16
    570a:	1f 93       	push	r17
    570c:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
    570e:	00 83       	st	Z, r16
    5710:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
    5712:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
    5714:	63 83       	std	Z+3, r22	; 0x03
    5716:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
    5718:	45 83       	std	Z+5, r20	; 0x05
    571a:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
    571c:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
    571e:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
    5720:	11 86       	std	Z+9, r1	; 0x09
}
    5722:	1f 91       	pop	r17
    5724:	0f 91       	pop	r16
    5726:	ef 90       	pop	r14
    5728:	08 95       	ret

0000572a <SPI_MasterInterruptHandler>:
 *  a pointer to the related SPI_Master_t struct as argument.
 *
 *  \param spi        Pointer to the modules own SPI_Master_t struct.
 */
void SPI_MasterInterruptHandler(SPI_Master_t *spi)
{
    572a:	cf 93       	push	r28
    572c:	df 93       	push	r29
    572e:	dc 01       	movw	r26, r24
	uint8_t data;
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;
    5730:	15 96       	adiw	r26, 0x05	; 5
    5732:	cd 91       	ld	r28, X+
    5734:	dc 91       	ld	r29, X
    5736:	16 97       	sbiw	r26, 0x06	; 6
    5738:	98 85       	ldd	r25, Y+8	; 0x08

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
    573a:	ed 91       	ld	r30, X+
    573c:	fc 91       	ld	r31, X
    573e:	11 97       	sbiw	r26, 0x01	; 1
    5740:	80 81       	ld	r24, Z
    5742:	84 fd       	sbrc	r24, 4
    5744:	05 c0       	rjmp	.+10     	; 0x5750 <SPI_MasterInterruptHandler+0x26>
		spi->interrupted = true;
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	14 96       	adiw	r26, 0x04	; 4
    574a:	8c 93       	st	X, r24
    574c:	14 97       	sbiw	r26, 0x04	; 4
    574e:	24 c0       	rjmp	.+72     	; 0x5798 <SPI_MasterInterruptHandler+0x6e>
	}

	else {  /* Data interrupt. */

		/* Store received data. */
		data = spi->module->DATA;
    5750:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    5752:	ed 81       	ldd	r30, Y+5	; 0x05
    5754:	fe 81       	ldd	r31, Y+6	; 0x06
    5756:	e9 0f       	add	r30, r25
    5758:	f1 1d       	adc	r31, r1
    575a:	80 83       	st	Z, r24

		/* Next byte. */
		bytesTransceived++;
    575c:	9f 5f       	subi	r25, 0xFF	; 255

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
    575e:	15 96       	adiw	r26, 0x05	; 5
    5760:	ed 91       	ld	r30, X+
    5762:	fc 91       	ld	r31, X
    5764:	16 97       	sbiw	r26, 0x06	; 6
    5766:	87 81       	ldd	r24, Z+7	; 0x07
    5768:	98 17       	cp	r25, r24
    576a:	58 f4       	brcc	.+22     	; 0x5782 <SPI_MasterInterruptHandler+0x58>
			/* Put data byte in transmit data register. */
			data = spi->dataPacket->transmitData[bytesTransceived];
    576c:	03 80       	ldd	r0, Z+3	; 0x03
    576e:	f4 81       	ldd	r31, Z+4	; 0x04
    5770:	e0 2d       	mov	r30, r0
    5772:	e9 0f       	add	r30, r25
    5774:	f1 1d       	adc	r31, r1
    5776:	80 81       	ld	r24, Z
			spi->module->DATA = data;
    5778:	ed 91       	ld	r30, X+
    577a:	fc 91       	ld	r31, X
    577c:	11 97       	sbiw	r26, 0x01	; 1
    577e:	83 83       	std	Z+3, r24	; 0x03
    5780:	0b c0       	rjmp	.+22     	; 0x5798 <SPI_MasterInterruptHandler+0x6e>

		/* Transmission complete. */
		else {

			/* Release SS to slave(s). */
			uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    5782:	82 81       	ldd	r24, Z+2	; 0x02
			SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    5784:	01 90       	ld	r0, Z+
    5786:	f0 81       	ld	r31, Z
    5788:	e0 2d       	mov	r30, r0
    578a:	85 83       	std	Z+5, r24	; 0x05

			spi->dataPacket->complete = true;
    578c:	15 96       	adiw	r26, 0x05	; 5
    578e:	ed 91       	ld	r30, X+
    5790:	fc 91       	ld	r31, X
    5792:	16 97       	sbiw	r26, 0x06	; 6
    5794:	81 e0       	ldi	r24, 0x01	; 1
    5796:	81 87       	std	Z+9, r24	; 0x09
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    5798:	15 96       	adiw	r26, 0x05	; 5
    579a:	ed 91       	ld	r30, X+
    579c:	fc 91       	ld	r31, X
    579e:	16 97       	sbiw	r26, 0x06	; 6
    57a0:	90 87       	std	Z+8, r25	; 0x08
}
    57a2:	df 91       	pop	r29
    57a4:	cf 91       	pop	r28
    57a6:	08 95       	ret

000057a8 <SPI_MasterInterruptTransceivePacket>:
 *  \retval SPI_BUSY          The SPI module is busy.
 *  \retval SPI_INTERRUPTED   The transmission was interrupted by another master.
 */
uint8_t SPI_MasterInterruptTransceivePacket(SPI_Master_t *spi,
                                            SPI_DataPacket_t *dataPacket)
{
    57a8:	cf 93       	push	r28
    57aa:	df 93       	push	r29
    57ac:	dc 01       	movw	r26, r24
    57ae:	eb 01       	movw	r28, r22
	uint8_t data;
	bool interrupted = spi->interrupted;
    57b0:	14 96       	adiw	r26, 0x04	; 4
    57b2:	9c 91       	ld	r25, X
    57b4:	14 97       	sbiw	r26, 0x04	; 4

	/* If no packets sent so far. */
	if (spi->dataPacket == NULL) {
    57b6:	15 96       	adiw	r26, 0x05	; 5
    57b8:	ed 91       	ld	r30, X+
    57ba:	fc 91       	ld	r31, X
    57bc:	16 97       	sbiw	r26, 0x06	; 6
    57be:	30 97       	sbiw	r30, 0x00	; 0
    57c0:	29 f4       	brne	.+10     	; 0x57cc <SPI_MasterInterruptTransceivePacket+0x24>
		spi->dataPacket = dataPacket;
    57c2:	15 96       	adiw	r26, 0x05	; 5
    57c4:	6d 93       	st	X+, r22
    57c6:	7c 93       	st	X, r23
    57c8:	16 97       	sbiw	r26, 0x06	; 6
    57ca:	10 c0       	rjmp	.+32     	; 0x57ec <SPI_MasterInterruptTransceivePacket+0x44>
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
    57cc:	81 85       	ldd	r24, Z+9	; 0x09
    57ce:	88 23       	and	r24, r24
    57d0:	11 f4       	brne	.+4      	; 0x57d6 <SPI_MasterInterruptTransceivePacket+0x2e>
    57d2:	82 e0       	ldi	r24, 0x02	; 2
    57d4:	28 c0       	rjmp	.+80     	; 0x5826 <SPI_MasterInterruptTransceivePacket+0x7e>
		return (SPI_BUSY);
	}

	/* If interrupted by other master. */
	else if (interrupted) {
    57d6:	99 23       	and	r25, r25
    57d8:	49 f0       	breq	.+18     	; 0x57ec <SPI_MasterInterruptTransceivePacket+0x44>
		/* If SS released. */
		if (spi->port->OUT & SPI_SS_bm) {
    57da:	12 96       	adiw	r26, 0x02	; 2
    57dc:	ed 91       	ld	r30, X+
    57de:	fc 91       	ld	r31, X
    57e0:	13 97       	sbiw	r26, 0x03	; 3
    57e2:	84 81       	ldd	r24, Z+4	; 0x04
    57e4:	84 fd       	sbrc	r24, 4
    57e6:	02 c0       	rjmp	.+4      	; 0x57ec <SPI_MasterInterruptTransceivePacket+0x44>
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	1d c0       	rjmp	.+58     	; 0x5826 <SPI_MasterInterruptTransceivePacket+0x7e>
		}
	}

	/* NOT interrupted by other master.
	* Start transmission. */
	spi->dataPacket = dataPacket;
    57ec:	15 96       	adiw	r26, 0x05	; 5
    57ee:	cd 93       	st	X+, r28
    57f0:	dc 93       	st	X, r29
    57f2:	16 97       	sbiw	r26, 0x06	; 6
	spi->dataPacket->complete = false;
    57f4:	19 86       	std	Y+9, r1	; 0x09
	spi->interrupted = false;
    57f6:	14 96       	adiw	r26, 0x04	; 4
    57f8:	1c 92       	st	X, r1
    57fa:	14 97       	sbiw	r26, 0x04	; 4

	/* SS to slave(s) low.*/
	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    57fc:	8a 81       	ldd	r24, Y+2	; 0x02
	SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    57fe:	e8 81       	ld	r30, Y
    5800:	f9 81       	ldd	r31, Y+1	; 0x01
    5802:	86 83       	std	Z+6, r24	; 0x06

	spi->dataPacket->bytesTransceived = 0;
    5804:	15 96       	adiw	r26, 0x05	; 5
    5806:	ed 91       	ld	r30, X+
    5808:	fc 91       	ld	r31, X
    580a:	16 97       	sbiw	r26, 0x06	; 6
    580c:	10 86       	std	Z+8, r1	; 0x08

	/* Start sending data. */
	data = spi->dataPacket->transmitData[0];
    580e:	15 96       	adiw	r26, 0x05	; 5
    5810:	ed 91       	ld	r30, X+
    5812:	fc 91       	ld	r31, X
    5814:	16 97       	sbiw	r26, 0x06	; 6
    5816:	03 80       	ldd	r0, Z+3	; 0x03
    5818:	f4 81       	ldd	r31, Z+4	; 0x04
    581a:	e0 2d       	mov	r30, r0
    581c:	80 81       	ld	r24, Z
	spi->module->DATA = data;
    581e:	ed 91       	ld	r30, X+
    5820:	fc 91       	ld	r31, X
    5822:	83 83       	std	Z+3, r24	; 0x03
    5824:	80 e0       	ldi	r24, 0x00	; 0

	/* Successs */
	return (SPI_OK);
}
    5826:	df 91       	pop	r29
    5828:	cf 91       	pop	r28
    582a:	08 95       	ret

0000582c <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
    582c:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
    582e:	a0 81       	ld	r26, Z
    5830:	b1 81       	ldd	r27, Z+1	; 0x01
    5832:	13 96       	adiw	r26, 0x03	; 3
    5834:	6c 93       	st	X, r22

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
    5836:	01 90       	ld	r0, Z+
    5838:	f0 81       	ld	r31, Z
    583a:	e0 2d       	mov	r30, r0
    583c:	82 81       	ldd	r24, Z+2	; 0x02
    583e:	87 ff       	sbrs	r24, 7
    5840:	fd cf       	rjmp	.-6      	; 0x583c <SPI_MasterTransceiveByte+0x10>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
    5842:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
    5844:	08 95       	ret

00005846 <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
    5846:	cf 93       	push	r28
    5848:	df 93       	push	r29
    584a:	ec 01       	movw	r28, r24
    584c:	fb 01       	movw	r30, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
    584e:	61 15       	cp	r22, r1
    5850:	71 05       	cpc	r23, r1
    5852:	11 f4       	brne	.+4      	; 0x5858 <SPI_MasterTransceivePacket+0x12>
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	37 c0       	rjmp	.+110    	; 0x58c6 <SPI_MasterTransceivePacket+0x80>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
    5858:	6d 83       	std	Y+5, r22	; 0x05
    585a:	7e 83       	std	Y+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    585c:	42 81       	ldd	r20, Z+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    585e:	a0 81       	ld	r26, Z
    5860:	b1 81       	ldd	r27, Z+1	; 0x01
    5862:	10 97       	sbiw	r26, 0x00	; 0
    5864:	11 f0       	breq	.+4      	; 0x586a <SPI_MasterTransceivePacket+0x24>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    5866:	16 96       	adiw	r26, 0x06	; 6
    5868:	4c 93       	st	X, r20
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
    586a:	67 81       	ldd	r22, Z+7	; 0x07
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	1a c0       	rjmp	.+52     	; 0x58a4 <SPI_MasterTransceivePacket+0x5e>
	while (bytesTransceived < bytesToTransceive) {

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
    5870:	29 2f       	mov	r18, r25
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	03 80       	ldd	r0, Z+3	; 0x03
    5876:	f4 81       	ldd	r31, Z+4	; 0x04
    5878:	e0 2d       	mov	r30, r0
    587a:	e2 0f       	add	r30, r18
    587c:	f3 1f       	adc	r31, r19
    587e:	80 81       	ld	r24, Z
		spi->module->DATA = data;
    5880:	e8 81       	ld	r30, Y
    5882:	f9 81       	ldd	r31, Y+1	; 0x01
    5884:	83 83       	std	Z+3, r24	; 0x03

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
    5886:	e8 81       	ld	r30, Y
    5888:	f9 81       	ldd	r31, Y+1	; 0x01
    588a:	82 81       	ldd	r24, Z+2	; 0x02
    588c:	87 ff       	sbrs	r24, 7
    588e:	fd cf       	rjmp	.-6      	; 0x588a <SPI_MasterTransceivePacket+0x44>

		}
		/* Read received data. */
		data = spi->module->DATA;
    5890:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    5892:	ed 81       	ldd	r30, Y+5	; 0x05
    5894:	fe 81       	ldd	r31, Y+6	; 0x06
    5896:	05 80       	ldd	r0, Z+5	; 0x05
    5898:	f6 81       	ldd	r31, Z+6	; 0x06
    589a:	e0 2d       	mov	r30, r0
    589c:	e2 0f       	add	r30, r18
    589e:	f3 1f       	adc	r31, r19
    58a0:	80 83       	st	Z, r24

		bytesTransceived++;
    58a2:	9f 5f       	subi	r25, 0xFF	; 255
    58a4:	ed 81       	ldd	r30, Y+5	; 0x05
    58a6:	fe 81       	ldd	r31, Y+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
    58a8:	96 17       	cp	r25, r22
    58aa:	10 f3       	brcs	.-60     	; 0x5870 <SPI_MasterTransceivePacket+0x2a>

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    58ac:	01 90       	ld	r0, Z+
    58ae:	f0 81       	ld	r31, Z
    58b0:	e0 2d       	mov	r30, r0
    58b2:	30 97       	sbiw	r30, 0x00	; 0
    58b4:	09 f0       	breq	.+2      	; 0x58b8 <SPI_MasterTransceivePacket+0x72>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    58b6:	45 83       	std	Z+5, r20	; 0x05
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    58b8:	ed 81       	ldd	r30, Y+5	; 0x05
    58ba:	fe 81       	ldd	r31, Y+6	; 0x06
    58bc:	60 87       	std	Z+8, r22	; 0x08
	spi->dataPacket->complete = true;
    58be:	ed 81       	ldd	r30, Y+5	; 0x05
    58c0:	fe 81       	ldd	r31, Y+6	; 0x06
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
    58c6:	df 91       	pop	r29
    58c8:	cf 91       	pop	r28
    58ca:	08 95       	ret

000058cc <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    58cc:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    58ce:	60 83       	st	Z, r22
    58d0:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    58d2:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    58d4:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
    58d6:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
    58d8:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
    58da:	15 86       	std	Z+13, r1	; 0x0d
}
    58dc:	08 95       	ret

000058de <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
    58de:	fc 01       	movw	r30, r24
    58e0:	62 83       	std	Z+2, r22	; 0x02
}
    58e2:	08 95       	ret

000058e4 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    58e4:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    58e6:	85 85       	ldd	r24, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    58e8:	96 85       	ldd	r25, Z+14	; 0x0e
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	8f 5f       	subi	r24, 0xFF	; 255
    58ee:	83 70       	andi	r24, 0x03	; 3
    58f0:	89 13       	cpse	r24, r25
    58f2:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
    58f4:	82 2f       	mov	r24, r18
    58f6:	08 95       	ret

000058f8 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    58f8:	dc 01       	movw	r26, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    58fa:	1d 96       	adiw	r26, 0x0d	; 13
    58fc:	8c 91       	ld	r24, X
    58fe:	1d 97       	sbiw	r26, 0x0d	; 13
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    5900:	1e 96       	adiw	r26, 0x0e	; 14
    5902:	9c 91       	ld	r25, X
    5904:	1e 97       	sbiw	r26, 0x0e	; 14

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	8f 5f       	subi	r24, 0xFF	; 255
    590a:	83 70       	andi	r24, 0x03	; 3
    590c:	89 17       	cp	r24, r25
    590e:	b1 f0       	breq	.+44     	; 0x593c <USART_TXBuffer_PutByte+0x44>
    5910:	21 e0       	ldi	r18, 0x01	; 1
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    5912:	1d 96       	adiw	r26, 0x0d	; 13
    5914:	8c 91       	ld	r24, X
    5916:	1d 97       	sbiw	r26, 0x0d	; 13
	  	TXbufPtr->TX[tempTX_Head]= data;
    5918:	fd 01       	movw	r30, r26
    591a:	e8 0f       	add	r30, r24
    591c:	f1 1d       	adc	r31, r1
    591e:	67 83       	std	Z+7, r22	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    5920:	8f 5f       	subi	r24, 0xFF	; 255
    5922:	83 70       	andi	r24, 0x03	; 3
    5924:	1d 96       	adiw	r26, 0x0d	; 13
    5926:	8c 93       	st	X, r24
    5928:	1d 97       	sbiw	r26, 0x0d	; 13

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    592a:	ed 91       	ld	r30, X+
    592c:	fc 91       	ld	r31, X
    592e:	11 97       	sbiw	r26, 0x01	; 1
    5930:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    5932:	8c 7f       	andi	r24, 0xFC	; 252
    5934:	12 96       	adiw	r26, 0x02	; 2
    5936:	9c 91       	ld	r25, X
    5938:	89 2b       	or	r24, r25
		usart_data->usart->CTRLA = tempCTRLA;
    593a:	83 83       	std	Z+3, r24	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    593c:	82 2f       	mov	r24, r18
    593e:	08 95       	ret

00005940 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
    5940:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    5942:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    5944:	84 85       	ldd	r24, Z+12	; 0x0c
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	98 13       	cpse	r25, r24
    594a:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
	//return true;
}
    594c:	82 2f       	mov	r24, r18
    594e:	08 95       	ret

00005950 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    5950:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    5952:	1c 96       	adiw	r26, 0x0c	; 12
    5954:	8c 91       	ld	r24, X
    5956:	1c 97       	sbiw	r26, 0x0c	; 12
    5958:	fd 01       	movw	r30, r26
    595a:	e8 0f       	add	r30, r24
    595c:	f1 1d       	adc	r31, r1
    595e:	83 81       	ldd	r24, Z+3	; 0x03

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    5960:	1c 96       	adiw	r26, 0x0c	; 12
    5962:	9c 91       	ld	r25, X
    5964:	1c 97       	sbiw	r26, 0x0c	; 12
    5966:	9f 5f       	subi	r25, 0xFF	; 255
    5968:	93 70       	andi	r25, 0x03	; 3
    596a:	1c 96       	adiw	r26, 0x0c	; 12
    596c:	9c 93       	st	X, r25

	return ans;
}
    596e:	08 95       	ret

00005970 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    5970:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    5972:	1b 96       	adiw	r26, 0x0b	; 11
    5974:	9c 91       	ld	r25, X
    5976:	1b 97       	sbiw	r26, 0x0b	; 11
    5978:	9f 5f       	subi	r25, 0xFF	; 255
    597a:	93 70       	andi	r25, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    597c:	1c 96       	adiw	r26, 0x0c	; 12
    597e:	8c 91       	ld	r24, X
    5980:	1c 97       	sbiw	r26, 0x0c	; 12
	uint8_t data = usart_data->usart->DATA;
    5982:	ed 91       	ld	r30, X+
    5984:	fc 91       	ld	r31, X
    5986:	11 97       	sbiw	r26, 0x01	; 1
    5988:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
    598a:	98 17       	cp	r25, r24
    598c:	11 f4       	brne	.+4      	; 0x5992 <USART_RXComplete+0x22>
    598e:	80 e0       	ldi	r24, 0x00	; 0
    5990:	08 95       	ret
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    5992:	1b 96       	adiw	r26, 0x0b	; 11
    5994:	8c 91       	ld	r24, X
    5996:	1b 97       	sbiw	r26, 0x0b	; 11
    5998:	fd 01       	movw	r30, r26
    599a:	e8 0f       	add	r30, r24
    599c:	f1 1d       	adc	r31, r1
    599e:	23 83       	std	Z+3, r18	; 0x03
		usart_data->buffer.RX_Head = tempRX_Head;
    59a0:	1b 96       	adiw	r26, 0x0b	; 11
    59a2:	9c 93       	st	X, r25
    59a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
    59a6:	08 95       	ret

000059a8 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    59a8:	cf 93       	push	r28
    59aa:	df 93       	push	r29
    59ac:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    59ae:	1e 96       	adiw	r26, 0x0e	; 14
    59b0:	9c 91       	ld	r25, X
    59b2:	1e 97       	sbiw	r26, 0x0e	; 14
	if (bufPtr->TX_Head == tempTX_Tail){
    59b4:	1d 96       	adiw	r26, 0x0d	; 13
    59b6:	8c 91       	ld	r24, X
    59b8:	1d 97       	sbiw	r26, 0x0d	; 13
    59ba:	cd 91       	ld	r28, X+
    59bc:	dc 91       	ld	r29, X
    59be:	11 97       	sbiw	r26, 0x01	; 1
    59c0:	89 17       	cp	r24, r25
    59c2:	21 f4       	brne	.+8      	; 0x59cc <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    59c4:	8b 81       	ldd	r24, Y+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    59c6:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    59c8:	8b 83       	std	Y+3, r24	; 0x03
    59ca:	0f c0       	rjmp	.+30     	; 0x59ea <USART_DataRegEmpty+0x42>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    59cc:	1e 96       	adiw	r26, 0x0e	; 14
    59ce:	8c 91       	ld	r24, X
    59d0:	1e 97       	sbiw	r26, 0x0e	; 14
    59d2:	fd 01       	movw	r30, r26
    59d4:	e8 0f       	add	r30, r24
    59d6:	f1 1d       	adc	r31, r1
    59d8:	87 81       	ldd	r24, Z+7	; 0x07
		usart_data->usart->DATA = data;
    59da:	88 83       	st	Y, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    59dc:	1e 96       	adiw	r26, 0x0e	; 14
    59de:	8c 91       	ld	r24, X
    59e0:	1e 97       	sbiw	r26, 0x0e	; 14
    59e2:	8f 5f       	subi	r24, 0xFF	; 255
    59e4:	83 70       	andi	r24, 0x03	; 3
    59e6:	1e 96       	adiw	r26, 0x0e	; 14
    59e8:	8c 93       	st	X, r24
	}
}
    59ea:	df 91       	pop	r29
    59ec:	cf 91       	pop	r28
    59ee:	08 95       	ret

000059f0 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
    59f0:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
    59f2:	70 ff       	sbrs	r23, 0
    59f4:	03 c0       	rjmp	.+6      	; 0x59fc <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
    59f6:	84 81       	ldd	r24, Z+4	; 0x04
    59f8:	81 60       	ori	r24, 0x01	; 1
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <USART_NineBits_PutChar+0x10>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
    59fc:	84 81       	ldd	r24, Z+4	; 0x04
    59fe:	8e 7f       	andi	r24, 0xFE	; 254
    5a00:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
    5a02:	60 83       	st	Z, r22
}
    5a04:	08 95       	ret

00005a06 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
    5a06:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
    5a08:	84 81       	ldd	r24, Z+4	; 0x04
    5a0a:	80 ff       	sbrs	r24, 0
    5a0c:	05 c0       	rjmp	.+10     	; 0x5a18 <USART_NineBits_GetChar+0x12>
		return(0x0100 | usart->DATA);
    5a0e:	80 81       	ld	r24, Z
    5a10:	28 2f       	mov	r18, r24
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	31 60       	ori	r19, 0x01	; 1
    5a16:	03 c0       	rjmp	.+6      	; 0x5a1e <USART_NineBits_GetChar+0x18>
	}else {
		return(usart->DATA);
    5a18:	80 81       	ld	r24, Z
    5a1a:	28 2f       	mov	r18, r24
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    5a1e:	c9 01       	movw	r24, r18
    5a20:	08 95       	ret

00005a22 <__subsf3>:
    5a22:	50 58       	subi	r21, 0x80	; 128

00005a24 <__addsf3>:
    5a24:	bb 27       	eor	r27, r27
    5a26:	aa 27       	eor	r26, r26
    5a28:	0e d0       	rcall	.+28     	; 0x5a46 <__addsf3x>
    5a2a:	4d c1       	rjmp	.+666    	; 0x5cc6 <__fp_round>
    5a2c:	3e d1       	rcall	.+636    	; 0x5caa <__fp_pscA>
    5a2e:	30 f0       	brcs	.+12     	; 0x5a3c <__addsf3+0x18>
    5a30:	43 d1       	rcall	.+646    	; 0x5cb8 <__fp_pscB>
    5a32:	20 f0       	brcs	.+8      	; 0x5a3c <__addsf3+0x18>
    5a34:	31 f4       	brne	.+12     	; 0x5a42 <__addsf3+0x1e>
    5a36:	9f 3f       	cpi	r25, 0xFF	; 255
    5a38:	11 f4       	brne	.+4      	; 0x5a3e <__addsf3+0x1a>
    5a3a:	1e f4       	brtc	.+6      	; 0x5a42 <__addsf3+0x1e>
    5a3c:	33 c1       	rjmp	.+614    	; 0x5ca4 <__fp_nan>
    5a3e:	0e f4       	brtc	.+2      	; 0x5a42 <__addsf3+0x1e>
    5a40:	e0 95       	com	r30
    5a42:	e7 fb       	bst	r30, 7
    5a44:	29 c1       	rjmp	.+594    	; 0x5c98 <__fp_inf>

00005a46 <__addsf3x>:
    5a46:	e9 2f       	mov	r30, r25
    5a48:	4f d1       	rcall	.+670    	; 0x5ce8 <__fp_split3>
    5a4a:	80 f3       	brcs	.-32     	; 0x5a2c <__addsf3+0x8>
    5a4c:	ba 17       	cp	r27, r26
    5a4e:	62 07       	cpc	r22, r18
    5a50:	73 07       	cpc	r23, r19
    5a52:	84 07       	cpc	r24, r20
    5a54:	95 07       	cpc	r25, r21
    5a56:	18 f0       	brcs	.+6      	; 0x5a5e <__addsf3x+0x18>
    5a58:	71 f4       	brne	.+28     	; 0x5a76 <__addsf3x+0x30>
    5a5a:	9e f5       	brtc	.+102    	; 0x5ac2 <__addsf3x+0x7c>
    5a5c:	67 c1       	rjmp	.+718    	; 0x5d2c <__fp_zero>
    5a5e:	0e f4       	brtc	.+2      	; 0x5a62 <__addsf3x+0x1c>
    5a60:	e0 95       	com	r30
    5a62:	0b 2e       	mov	r0, r27
    5a64:	ba 2f       	mov	r27, r26
    5a66:	a0 2d       	mov	r26, r0
    5a68:	0b 01       	movw	r0, r22
    5a6a:	b9 01       	movw	r22, r18
    5a6c:	90 01       	movw	r18, r0
    5a6e:	0c 01       	movw	r0, r24
    5a70:	ca 01       	movw	r24, r20
    5a72:	a0 01       	movw	r20, r0
    5a74:	11 24       	eor	r1, r1
    5a76:	ff 27       	eor	r31, r31
    5a78:	59 1b       	sub	r21, r25
    5a7a:	99 f0       	breq	.+38     	; 0x5aa2 <__addsf3x+0x5c>
    5a7c:	59 3f       	cpi	r21, 0xF9	; 249
    5a7e:	50 f4       	brcc	.+20     	; 0x5a94 <__addsf3x+0x4e>
    5a80:	50 3e       	cpi	r21, 0xE0	; 224
    5a82:	68 f1       	brcs	.+90     	; 0x5ade <__addsf3x+0x98>
    5a84:	1a 16       	cp	r1, r26
    5a86:	f0 40       	sbci	r31, 0x00	; 0
    5a88:	a2 2f       	mov	r26, r18
    5a8a:	23 2f       	mov	r18, r19
    5a8c:	34 2f       	mov	r19, r20
    5a8e:	44 27       	eor	r20, r20
    5a90:	58 5f       	subi	r21, 0xF8	; 248
    5a92:	f3 cf       	rjmp	.-26     	; 0x5a7a <__addsf3x+0x34>
    5a94:	46 95       	lsr	r20
    5a96:	37 95       	ror	r19
    5a98:	27 95       	ror	r18
    5a9a:	a7 95       	ror	r26
    5a9c:	f0 40       	sbci	r31, 0x00	; 0
    5a9e:	53 95       	inc	r21
    5aa0:	c9 f7       	brne	.-14     	; 0x5a94 <__addsf3x+0x4e>
    5aa2:	7e f4       	brtc	.+30     	; 0x5ac2 <__addsf3x+0x7c>
    5aa4:	1f 16       	cp	r1, r31
    5aa6:	ba 0b       	sbc	r27, r26
    5aa8:	62 0b       	sbc	r22, r18
    5aaa:	73 0b       	sbc	r23, r19
    5aac:	84 0b       	sbc	r24, r20
    5aae:	ba f0       	brmi	.+46     	; 0x5ade <__addsf3x+0x98>
    5ab0:	91 50       	subi	r25, 0x01	; 1
    5ab2:	a1 f0       	breq	.+40     	; 0x5adc <__addsf3x+0x96>
    5ab4:	ff 0f       	add	r31, r31
    5ab6:	bb 1f       	adc	r27, r27
    5ab8:	66 1f       	adc	r22, r22
    5aba:	77 1f       	adc	r23, r23
    5abc:	88 1f       	adc	r24, r24
    5abe:	c2 f7       	brpl	.-16     	; 0x5ab0 <__addsf3x+0x6a>
    5ac0:	0e c0       	rjmp	.+28     	; 0x5ade <__addsf3x+0x98>
    5ac2:	ba 0f       	add	r27, r26
    5ac4:	62 1f       	adc	r22, r18
    5ac6:	73 1f       	adc	r23, r19
    5ac8:	84 1f       	adc	r24, r20
    5aca:	48 f4       	brcc	.+18     	; 0x5ade <__addsf3x+0x98>
    5acc:	87 95       	ror	r24
    5ace:	77 95       	ror	r23
    5ad0:	67 95       	ror	r22
    5ad2:	b7 95       	ror	r27
    5ad4:	f7 95       	ror	r31
    5ad6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ad8:	08 f0       	brcs	.+2      	; 0x5adc <__addsf3x+0x96>
    5ada:	b3 cf       	rjmp	.-154    	; 0x5a42 <__addsf3+0x1e>
    5adc:	93 95       	inc	r25
    5ade:	88 0f       	add	r24, r24
    5ae0:	08 f0       	brcs	.+2      	; 0x5ae4 <__addsf3x+0x9e>
    5ae2:	99 27       	eor	r25, r25
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	97 95       	ror	r25
    5ae8:	87 95       	ror	r24
    5aea:	08 95       	ret

00005aec <__divsf3>:
    5aec:	0c d0       	rcall	.+24     	; 0x5b06 <__divsf3x>
    5aee:	eb c0       	rjmp	.+470    	; 0x5cc6 <__fp_round>
    5af0:	e3 d0       	rcall	.+454    	; 0x5cb8 <__fp_pscB>
    5af2:	40 f0       	brcs	.+16     	; 0x5b04 <__divsf3+0x18>
    5af4:	da d0       	rcall	.+436    	; 0x5caa <__fp_pscA>
    5af6:	30 f0       	brcs	.+12     	; 0x5b04 <__divsf3+0x18>
    5af8:	21 f4       	brne	.+8      	; 0x5b02 <__divsf3+0x16>
    5afa:	5f 3f       	cpi	r21, 0xFF	; 255
    5afc:	19 f0       	breq	.+6      	; 0x5b04 <__divsf3+0x18>
    5afe:	cc c0       	rjmp	.+408    	; 0x5c98 <__fp_inf>
    5b00:	51 11       	cpse	r21, r1
    5b02:	15 c1       	rjmp	.+554    	; 0x5d2e <__fp_szero>
    5b04:	cf c0       	rjmp	.+414    	; 0x5ca4 <__fp_nan>

00005b06 <__divsf3x>:
    5b06:	f0 d0       	rcall	.+480    	; 0x5ce8 <__fp_split3>
    5b08:	98 f3       	brcs	.-26     	; 0x5af0 <__divsf3+0x4>

00005b0a <__divsf3_pse>:
    5b0a:	99 23       	and	r25, r25
    5b0c:	c9 f3       	breq	.-14     	; 0x5b00 <__divsf3+0x14>
    5b0e:	55 23       	and	r21, r21
    5b10:	b1 f3       	breq	.-20     	; 0x5afe <__divsf3+0x12>
    5b12:	95 1b       	sub	r25, r21
    5b14:	55 0b       	sbc	r21, r21
    5b16:	bb 27       	eor	r27, r27
    5b18:	aa 27       	eor	r26, r26
    5b1a:	62 17       	cp	r22, r18
    5b1c:	73 07       	cpc	r23, r19
    5b1e:	84 07       	cpc	r24, r20
    5b20:	38 f0       	brcs	.+14     	; 0x5b30 <__divsf3_pse+0x26>
    5b22:	9f 5f       	subi	r25, 0xFF	; 255
    5b24:	5f 4f       	sbci	r21, 0xFF	; 255
    5b26:	22 0f       	add	r18, r18
    5b28:	33 1f       	adc	r19, r19
    5b2a:	44 1f       	adc	r20, r20
    5b2c:	aa 1f       	adc	r26, r26
    5b2e:	a9 f3       	breq	.-22     	; 0x5b1a <__divsf3_pse+0x10>
    5b30:	33 d0       	rcall	.+102    	; 0x5b98 <__divsf3_pse+0x8e>
    5b32:	0e 2e       	mov	r0, r30
    5b34:	3a f0       	brmi	.+14     	; 0x5b44 <__divsf3_pse+0x3a>
    5b36:	e0 e8       	ldi	r30, 0x80	; 128
    5b38:	30 d0       	rcall	.+96     	; 0x5b9a <__divsf3_pse+0x90>
    5b3a:	91 50       	subi	r25, 0x01	; 1
    5b3c:	50 40       	sbci	r21, 0x00	; 0
    5b3e:	e6 95       	lsr	r30
    5b40:	00 1c       	adc	r0, r0
    5b42:	ca f7       	brpl	.-14     	; 0x5b36 <__divsf3_pse+0x2c>
    5b44:	29 d0       	rcall	.+82     	; 0x5b98 <__divsf3_pse+0x8e>
    5b46:	fe 2f       	mov	r31, r30
    5b48:	27 d0       	rcall	.+78     	; 0x5b98 <__divsf3_pse+0x8e>
    5b4a:	66 0f       	add	r22, r22
    5b4c:	77 1f       	adc	r23, r23
    5b4e:	88 1f       	adc	r24, r24
    5b50:	bb 1f       	adc	r27, r27
    5b52:	26 17       	cp	r18, r22
    5b54:	37 07       	cpc	r19, r23
    5b56:	48 07       	cpc	r20, r24
    5b58:	ab 07       	cpc	r26, r27
    5b5a:	b0 e8       	ldi	r27, 0x80	; 128
    5b5c:	09 f0       	breq	.+2      	; 0x5b60 <__divsf3_pse+0x56>
    5b5e:	bb 0b       	sbc	r27, r27
    5b60:	80 2d       	mov	r24, r0
    5b62:	bf 01       	movw	r22, r30
    5b64:	ff 27       	eor	r31, r31
    5b66:	93 58       	subi	r25, 0x83	; 131
    5b68:	5f 4f       	sbci	r21, 0xFF	; 255
    5b6a:	2a f0       	brmi	.+10     	; 0x5b76 <__divsf3_pse+0x6c>
    5b6c:	9e 3f       	cpi	r25, 0xFE	; 254
    5b6e:	51 05       	cpc	r21, r1
    5b70:	68 f0       	brcs	.+26     	; 0x5b8c <__divsf3_pse+0x82>
    5b72:	92 c0       	rjmp	.+292    	; 0x5c98 <__fp_inf>
    5b74:	dc c0       	rjmp	.+440    	; 0x5d2e <__fp_szero>
    5b76:	5f 3f       	cpi	r21, 0xFF	; 255
    5b78:	ec f3       	brlt	.-6      	; 0x5b74 <__divsf3_pse+0x6a>
    5b7a:	98 3e       	cpi	r25, 0xE8	; 232
    5b7c:	dc f3       	brlt	.-10     	; 0x5b74 <__divsf3_pse+0x6a>
    5b7e:	86 95       	lsr	r24
    5b80:	77 95       	ror	r23
    5b82:	67 95       	ror	r22
    5b84:	b7 95       	ror	r27
    5b86:	f7 95       	ror	r31
    5b88:	9f 5f       	subi	r25, 0xFF	; 255
    5b8a:	c9 f7       	brne	.-14     	; 0x5b7e <__divsf3_pse+0x74>
    5b8c:	88 0f       	add	r24, r24
    5b8e:	91 1d       	adc	r25, r1
    5b90:	96 95       	lsr	r25
    5b92:	87 95       	ror	r24
    5b94:	97 f9       	bld	r25, 7
    5b96:	08 95       	ret
    5b98:	e1 e0       	ldi	r30, 0x01	; 1
    5b9a:	66 0f       	add	r22, r22
    5b9c:	77 1f       	adc	r23, r23
    5b9e:	88 1f       	adc	r24, r24
    5ba0:	bb 1f       	adc	r27, r27
    5ba2:	62 17       	cp	r22, r18
    5ba4:	73 07       	cpc	r23, r19
    5ba6:	84 07       	cpc	r24, r20
    5ba8:	ba 07       	cpc	r27, r26
    5baa:	20 f0       	brcs	.+8      	; 0x5bb4 <__divsf3_pse+0xaa>
    5bac:	62 1b       	sub	r22, r18
    5bae:	73 0b       	sbc	r23, r19
    5bb0:	84 0b       	sbc	r24, r20
    5bb2:	ba 0b       	sbc	r27, r26
    5bb4:	ee 1f       	adc	r30, r30
    5bb6:	88 f7       	brcc	.-30     	; 0x5b9a <__divsf3_pse+0x90>
    5bb8:	e0 95       	com	r30
    5bba:	08 95       	ret

00005bbc <__fixsfsi>:
    5bbc:	04 d0       	rcall	.+8      	; 0x5bc6 <__fixunssfsi>
    5bbe:	68 94       	set
    5bc0:	b1 11       	cpse	r27, r1
    5bc2:	b5 c0       	rjmp	.+362    	; 0x5d2e <__fp_szero>
    5bc4:	08 95       	ret

00005bc6 <__fixunssfsi>:
    5bc6:	98 d0       	rcall	.+304    	; 0x5cf8 <__fp_splitA>
    5bc8:	88 f0       	brcs	.+34     	; 0x5bec <__fixunssfsi+0x26>
    5bca:	9f 57       	subi	r25, 0x7F	; 127
    5bcc:	90 f0       	brcs	.+36     	; 0x5bf2 <__fixunssfsi+0x2c>
    5bce:	b9 2f       	mov	r27, r25
    5bd0:	99 27       	eor	r25, r25
    5bd2:	b7 51       	subi	r27, 0x17	; 23
    5bd4:	a0 f0       	brcs	.+40     	; 0x5bfe <__fixunssfsi+0x38>
    5bd6:	d1 f0       	breq	.+52     	; 0x5c0c <__fixunssfsi+0x46>
    5bd8:	66 0f       	add	r22, r22
    5bda:	77 1f       	adc	r23, r23
    5bdc:	88 1f       	adc	r24, r24
    5bde:	99 1f       	adc	r25, r25
    5be0:	1a f0       	brmi	.+6      	; 0x5be8 <__fixunssfsi+0x22>
    5be2:	ba 95       	dec	r27
    5be4:	c9 f7       	brne	.-14     	; 0x5bd8 <__fixunssfsi+0x12>
    5be6:	12 c0       	rjmp	.+36     	; 0x5c0c <__fixunssfsi+0x46>
    5be8:	b1 30       	cpi	r27, 0x01	; 1
    5bea:	81 f0       	breq	.+32     	; 0x5c0c <__fixunssfsi+0x46>
    5bec:	9f d0       	rcall	.+318    	; 0x5d2c <__fp_zero>
    5bee:	b1 e0       	ldi	r27, 0x01	; 1
    5bf0:	08 95       	ret
    5bf2:	9c c0       	rjmp	.+312    	; 0x5d2c <__fp_zero>
    5bf4:	67 2f       	mov	r22, r23
    5bf6:	78 2f       	mov	r23, r24
    5bf8:	88 27       	eor	r24, r24
    5bfa:	b8 5f       	subi	r27, 0xF8	; 248
    5bfc:	39 f0       	breq	.+14     	; 0x5c0c <__fixunssfsi+0x46>
    5bfe:	b9 3f       	cpi	r27, 0xF9	; 249
    5c00:	cc f3       	brlt	.-14     	; 0x5bf4 <__fixunssfsi+0x2e>
    5c02:	86 95       	lsr	r24
    5c04:	77 95       	ror	r23
    5c06:	67 95       	ror	r22
    5c08:	b3 95       	inc	r27
    5c0a:	d9 f7       	brne	.-10     	; 0x5c02 <__fixunssfsi+0x3c>
    5c0c:	3e f4       	brtc	.+14     	; 0x5c1c <__fixunssfsi+0x56>
    5c0e:	90 95       	com	r25
    5c10:	80 95       	com	r24
    5c12:	70 95       	com	r23
    5c14:	61 95       	neg	r22
    5c16:	7f 4f       	sbci	r23, 0xFF	; 255
    5c18:	8f 4f       	sbci	r24, 0xFF	; 255
    5c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1c:	08 95       	ret

00005c1e <__floatunsisf>:
    5c1e:	e8 94       	clt
    5c20:	09 c0       	rjmp	.+18     	; 0x5c34 <__floatsisf+0x12>

00005c22 <__floatsisf>:
    5c22:	97 fb       	bst	r25, 7
    5c24:	3e f4       	brtc	.+14     	; 0x5c34 <__floatsisf+0x12>
    5c26:	90 95       	com	r25
    5c28:	80 95       	com	r24
    5c2a:	70 95       	com	r23
    5c2c:	61 95       	neg	r22
    5c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c30:	8f 4f       	sbci	r24, 0xFF	; 255
    5c32:	9f 4f       	sbci	r25, 0xFF	; 255
    5c34:	99 23       	and	r25, r25
    5c36:	a9 f0       	breq	.+42     	; 0x5c62 <__floatsisf+0x40>
    5c38:	f9 2f       	mov	r31, r25
    5c3a:	96 e9       	ldi	r25, 0x96	; 150
    5c3c:	bb 27       	eor	r27, r27
    5c3e:	93 95       	inc	r25
    5c40:	f6 95       	lsr	r31
    5c42:	87 95       	ror	r24
    5c44:	77 95       	ror	r23
    5c46:	67 95       	ror	r22
    5c48:	b7 95       	ror	r27
    5c4a:	f1 11       	cpse	r31, r1
    5c4c:	f8 cf       	rjmp	.-16     	; 0x5c3e <__floatsisf+0x1c>
    5c4e:	fa f4       	brpl	.+62     	; 0x5c8e <__floatsisf+0x6c>
    5c50:	bb 0f       	add	r27, r27
    5c52:	11 f4       	brne	.+4      	; 0x5c58 <__floatsisf+0x36>
    5c54:	60 ff       	sbrs	r22, 0
    5c56:	1b c0       	rjmp	.+54     	; 0x5c8e <__floatsisf+0x6c>
    5c58:	6f 5f       	subi	r22, 0xFF	; 255
    5c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c60:	16 c0       	rjmp	.+44     	; 0x5c8e <__floatsisf+0x6c>
    5c62:	88 23       	and	r24, r24
    5c64:	11 f0       	breq	.+4      	; 0x5c6a <__floatsisf+0x48>
    5c66:	96 e9       	ldi	r25, 0x96	; 150
    5c68:	11 c0       	rjmp	.+34     	; 0x5c8c <__floatsisf+0x6a>
    5c6a:	77 23       	and	r23, r23
    5c6c:	21 f0       	breq	.+8      	; 0x5c76 <__floatsisf+0x54>
    5c6e:	9e e8       	ldi	r25, 0x8E	; 142
    5c70:	87 2f       	mov	r24, r23
    5c72:	76 2f       	mov	r23, r22
    5c74:	05 c0       	rjmp	.+10     	; 0x5c80 <__floatsisf+0x5e>
    5c76:	66 23       	and	r22, r22
    5c78:	71 f0       	breq	.+28     	; 0x5c96 <__floatsisf+0x74>
    5c7a:	96 e8       	ldi	r25, 0x86	; 134
    5c7c:	86 2f       	mov	r24, r22
    5c7e:	70 e0       	ldi	r23, 0x00	; 0
    5c80:	60 e0       	ldi	r22, 0x00	; 0
    5c82:	2a f0       	brmi	.+10     	; 0x5c8e <__floatsisf+0x6c>
    5c84:	9a 95       	dec	r25
    5c86:	66 0f       	add	r22, r22
    5c88:	77 1f       	adc	r23, r23
    5c8a:	88 1f       	adc	r24, r24
    5c8c:	da f7       	brpl	.-10     	; 0x5c84 <__floatsisf+0x62>
    5c8e:	88 0f       	add	r24, r24
    5c90:	96 95       	lsr	r25
    5c92:	87 95       	ror	r24
    5c94:	97 f9       	bld	r25, 7
    5c96:	08 95       	ret

00005c98 <__fp_inf>:
    5c98:	97 f9       	bld	r25, 7
    5c9a:	9f 67       	ori	r25, 0x7F	; 127
    5c9c:	80 e8       	ldi	r24, 0x80	; 128
    5c9e:	70 e0       	ldi	r23, 0x00	; 0
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	08 95       	ret

00005ca4 <__fp_nan>:
    5ca4:	9f ef       	ldi	r25, 0xFF	; 255
    5ca6:	80 ec       	ldi	r24, 0xC0	; 192
    5ca8:	08 95       	ret

00005caa <__fp_pscA>:
    5caa:	00 24       	eor	r0, r0
    5cac:	0a 94       	dec	r0
    5cae:	16 16       	cp	r1, r22
    5cb0:	17 06       	cpc	r1, r23
    5cb2:	18 06       	cpc	r1, r24
    5cb4:	09 06       	cpc	r0, r25
    5cb6:	08 95       	ret

00005cb8 <__fp_pscB>:
    5cb8:	00 24       	eor	r0, r0
    5cba:	0a 94       	dec	r0
    5cbc:	12 16       	cp	r1, r18
    5cbe:	13 06       	cpc	r1, r19
    5cc0:	14 06       	cpc	r1, r20
    5cc2:	05 06       	cpc	r0, r21
    5cc4:	08 95       	ret

00005cc6 <__fp_round>:
    5cc6:	09 2e       	mov	r0, r25
    5cc8:	03 94       	inc	r0
    5cca:	00 0c       	add	r0, r0
    5ccc:	11 f4       	brne	.+4      	; 0x5cd2 <__fp_round+0xc>
    5cce:	88 23       	and	r24, r24
    5cd0:	52 f0       	brmi	.+20     	; 0x5ce6 <__fp_round+0x20>
    5cd2:	bb 0f       	add	r27, r27
    5cd4:	40 f4       	brcc	.+16     	; 0x5ce6 <__fp_round+0x20>
    5cd6:	bf 2b       	or	r27, r31
    5cd8:	11 f4       	brne	.+4      	; 0x5cde <__fp_round+0x18>
    5cda:	60 ff       	sbrs	r22, 0
    5cdc:	04 c0       	rjmp	.+8      	; 0x5ce6 <__fp_round+0x20>
    5cde:	6f 5f       	subi	r22, 0xFF	; 255
    5ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	08 95       	ret

00005ce8 <__fp_split3>:
    5ce8:	57 fd       	sbrc	r21, 7
    5cea:	90 58       	subi	r25, 0x80	; 128
    5cec:	44 0f       	add	r20, r20
    5cee:	55 1f       	adc	r21, r21
    5cf0:	59 f0       	breq	.+22     	; 0x5d08 <__fp_splitA+0x10>
    5cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cf4:	71 f0       	breq	.+28     	; 0x5d12 <__fp_splitA+0x1a>
    5cf6:	47 95       	ror	r20

00005cf8 <__fp_splitA>:
    5cf8:	88 0f       	add	r24, r24
    5cfa:	97 fb       	bst	r25, 7
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	61 f0       	breq	.+24     	; 0x5d18 <__fp_splitA+0x20>
    5d00:	9f 3f       	cpi	r25, 0xFF	; 255
    5d02:	79 f0       	breq	.+30     	; 0x5d22 <__fp_splitA+0x2a>
    5d04:	87 95       	ror	r24
    5d06:	08 95       	ret
    5d08:	12 16       	cp	r1, r18
    5d0a:	13 06       	cpc	r1, r19
    5d0c:	14 06       	cpc	r1, r20
    5d0e:	55 1f       	adc	r21, r21
    5d10:	f2 cf       	rjmp	.-28     	; 0x5cf6 <__fp_split3+0xe>
    5d12:	46 95       	lsr	r20
    5d14:	f1 df       	rcall	.-30     	; 0x5cf8 <__fp_splitA>
    5d16:	08 c0       	rjmp	.+16     	; 0x5d28 <__fp_splitA+0x30>
    5d18:	16 16       	cp	r1, r22
    5d1a:	17 06       	cpc	r1, r23
    5d1c:	18 06       	cpc	r1, r24
    5d1e:	99 1f       	adc	r25, r25
    5d20:	f1 cf       	rjmp	.-30     	; 0x5d04 <__fp_splitA+0xc>
    5d22:	86 95       	lsr	r24
    5d24:	71 05       	cpc	r23, r1
    5d26:	61 05       	cpc	r22, r1
    5d28:	08 94       	sec
    5d2a:	08 95       	ret

00005d2c <__fp_zero>:
    5d2c:	e8 94       	clt

00005d2e <__fp_szero>:
    5d2e:	bb 27       	eor	r27, r27
    5d30:	66 27       	eor	r22, r22
    5d32:	77 27       	eor	r23, r23
    5d34:	cb 01       	movw	r24, r22
    5d36:	97 f9       	bld	r25, 7
    5d38:	08 95       	ret

00005d3a <__mulsf3>:
    5d3a:	0b d0       	rcall	.+22     	; 0x5d52 <__mulsf3x>
    5d3c:	c4 cf       	rjmp	.-120    	; 0x5cc6 <__fp_round>
    5d3e:	b5 df       	rcall	.-150    	; 0x5caa <__fp_pscA>
    5d40:	28 f0       	brcs	.+10     	; 0x5d4c <__mulsf3+0x12>
    5d42:	ba df       	rcall	.-140    	; 0x5cb8 <__fp_pscB>
    5d44:	18 f0       	brcs	.+6      	; 0x5d4c <__mulsf3+0x12>
    5d46:	95 23       	and	r25, r21
    5d48:	09 f0       	breq	.+2      	; 0x5d4c <__mulsf3+0x12>
    5d4a:	a6 cf       	rjmp	.-180    	; 0x5c98 <__fp_inf>
    5d4c:	ab cf       	rjmp	.-170    	; 0x5ca4 <__fp_nan>
    5d4e:	11 24       	eor	r1, r1
    5d50:	ee cf       	rjmp	.-36     	; 0x5d2e <__fp_szero>

00005d52 <__mulsf3x>:
    5d52:	ca df       	rcall	.-108    	; 0x5ce8 <__fp_split3>
    5d54:	a0 f3       	brcs	.-24     	; 0x5d3e <__mulsf3+0x4>

00005d56 <__mulsf3_pse>:
    5d56:	95 9f       	mul	r25, r21
    5d58:	d1 f3       	breq	.-12     	; 0x5d4e <__mulsf3+0x14>
    5d5a:	95 0f       	add	r25, r21
    5d5c:	50 e0       	ldi	r21, 0x00	; 0
    5d5e:	55 1f       	adc	r21, r21
    5d60:	62 9f       	mul	r22, r18
    5d62:	f0 01       	movw	r30, r0
    5d64:	72 9f       	mul	r23, r18
    5d66:	bb 27       	eor	r27, r27
    5d68:	f0 0d       	add	r31, r0
    5d6a:	b1 1d       	adc	r27, r1
    5d6c:	63 9f       	mul	r22, r19
    5d6e:	aa 27       	eor	r26, r26
    5d70:	f0 0d       	add	r31, r0
    5d72:	b1 1d       	adc	r27, r1
    5d74:	aa 1f       	adc	r26, r26
    5d76:	64 9f       	mul	r22, r20
    5d78:	66 27       	eor	r22, r22
    5d7a:	b0 0d       	add	r27, r0
    5d7c:	a1 1d       	adc	r26, r1
    5d7e:	66 1f       	adc	r22, r22
    5d80:	82 9f       	mul	r24, r18
    5d82:	22 27       	eor	r18, r18
    5d84:	b0 0d       	add	r27, r0
    5d86:	a1 1d       	adc	r26, r1
    5d88:	62 1f       	adc	r22, r18
    5d8a:	73 9f       	mul	r23, r19
    5d8c:	b0 0d       	add	r27, r0
    5d8e:	a1 1d       	adc	r26, r1
    5d90:	62 1f       	adc	r22, r18
    5d92:	83 9f       	mul	r24, r19
    5d94:	a0 0d       	add	r26, r0
    5d96:	61 1d       	adc	r22, r1
    5d98:	22 1f       	adc	r18, r18
    5d9a:	74 9f       	mul	r23, r20
    5d9c:	33 27       	eor	r19, r19
    5d9e:	a0 0d       	add	r26, r0
    5da0:	61 1d       	adc	r22, r1
    5da2:	23 1f       	adc	r18, r19
    5da4:	84 9f       	mul	r24, r20
    5da6:	60 0d       	add	r22, r0
    5da8:	21 1d       	adc	r18, r1
    5daa:	82 2f       	mov	r24, r18
    5dac:	76 2f       	mov	r23, r22
    5dae:	6a 2f       	mov	r22, r26
    5db0:	11 24       	eor	r1, r1
    5db2:	9f 57       	subi	r25, 0x7F	; 127
    5db4:	50 40       	sbci	r21, 0x00	; 0
    5db6:	8a f0       	brmi	.+34     	; 0x5dda <__mulsf3_pse+0x84>
    5db8:	e1 f0       	breq	.+56     	; 0x5df2 <__mulsf3_pse+0x9c>
    5dba:	88 23       	and	r24, r24
    5dbc:	4a f0       	brmi	.+18     	; 0x5dd0 <__mulsf3_pse+0x7a>
    5dbe:	ee 0f       	add	r30, r30
    5dc0:	ff 1f       	adc	r31, r31
    5dc2:	bb 1f       	adc	r27, r27
    5dc4:	66 1f       	adc	r22, r22
    5dc6:	77 1f       	adc	r23, r23
    5dc8:	88 1f       	adc	r24, r24
    5dca:	91 50       	subi	r25, 0x01	; 1
    5dcc:	50 40       	sbci	r21, 0x00	; 0
    5dce:	a9 f7       	brne	.-22     	; 0x5dba <__mulsf3_pse+0x64>
    5dd0:	9e 3f       	cpi	r25, 0xFE	; 254
    5dd2:	51 05       	cpc	r21, r1
    5dd4:	70 f0       	brcs	.+28     	; 0x5df2 <__mulsf3_pse+0x9c>
    5dd6:	60 cf       	rjmp	.-320    	; 0x5c98 <__fp_inf>
    5dd8:	aa cf       	rjmp	.-172    	; 0x5d2e <__fp_szero>
    5dda:	5f 3f       	cpi	r21, 0xFF	; 255
    5ddc:	ec f3       	brlt	.-6      	; 0x5dd8 <__mulsf3_pse+0x82>
    5dde:	98 3e       	cpi	r25, 0xE8	; 232
    5de0:	dc f3       	brlt	.-10     	; 0x5dd8 <__mulsf3_pse+0x82>
    5de2:	86 95       	lsr	r24
    5de4:	77 95       	ror	r23
    5de6:	67 95       	ror	r22
    5de8:	b7 95       	ror	r27
    5dea:	f7 95       	ror	r31
    5dec:	e7 95       	ror	r30
    5dee:	9f 5f       	subi	r25, 0xFF	; 255
    5df0:	c1 f7       	brne	.-16     	; 0x5de2 <__mulsf3_pse+0x8c>
    5df2:	fe 2b       	or	r31, r30
    5df4:	88 0f       	add	r24, r24
    5df6:	91 1d       	adc	r25, r1
    5df8:	96 95       	lsr	r25
    5dfa:	87 95       	ror	r24
    5dfc:	97 f9       	bld	r25, 7
    5dfe:	08 95       	ret

00005e00 <round>:
    5e00:	7b df       	rcall	.-266    	; 0x5cf8 <__fp_splitA>
    5e02:	e0 f0       	brcs	.+56     	; 0x5e3c <round+0x3c>
    5e04:	9e 37       	cpi	r25, 0x7E	; 126
    5e06:	d8 f0       	brcs	.+54     	; 0x5e3e <round+0x3e>
    5e08:	96 39       	cpi	r25, 0x96	; 150
    5e0a:	b8 f4       	brcc	.+46     	; 0x5e3a <round+0x3a>
    5e0c:	9e 38       	cpi	r25, 0x8E	; 142
    5e0e:	48 f4       	brcc	.+18     	; 0x5e22 <round+0x22>
    5e10:	67 2f       	mov	r22, r23
    5e12:	78 2f       	mov	r23, r24
    5e14:	88 27       	eor	r24, r24
    5e16:	98 5f       	subi	r25, 0xF8	; 248
    5e18:	f9 cf       	rjmp	.-14     	; 0x5e0c <round+0xc>
    5e1a:	86 95       	lsr	r24
    5e1c:	77 95       	ror	r23
    5e1e:	67 95       	ror	r22
    5e20:	93 95       	inc	r25
    5e22:	95 39       	cpi	r25, 0x95	; 149
    5e24:	d0 f3       	brcs	.-12     	; 0x5e1a <round+0x1a>
    5e26:	b6 2f       	mov	r27, r22
    5e28:	b1 70       	andi	r27, 0x01	; 1
    5e2a:	6b 0f       	add	r22, r27
    5e2c:	71 1d       	adc	r23, r1
    5e2e:	81 1d       	adc	r24, r1
    5e30:	20 f4       	brcc	.+8      	; 0x5e3a <round+0x3a>
    5e32:	87 95       	ror	r24
    5e34:	77 95       	ror	r23
    5e36:	67 95       	ror	r22
    5e38:	93 95       	inc	r25
    5e3a:	08 c0       	rjmp	.+16     	; 0x5e4c <__fp_mintl>
    5e3c:	22 c0       	rjmp	.+68     	; 0x5e82 <__fp_mpack>
    5e3e:	77 cf       	rjmp	.-274    	; 0x5d2e <__fp_szero>

00005e40 <sin>:
    5e40:	9f 93       	push	r25
    5e42:	2e d0       	rcall	.+92     	; 0x5ea0 <__fp_rempio2>
    5e44:	0f 90       	pop	r0
    5e46:	07 fc       	sbrc	r0, 7
    5e48:	ee 5f       	subi	r30, 0xFE	; 254
    5e4a:	51 c0       	rjmp	.+162    	; 0x5eee <__fp_sinus>

00005e4c <__fp_mintl>:
    5e4c:	88 23       	and	r24, r24
    5e4e:	71 f4       	brne	.+28     	; 0x5e6c <__fp_mintl+0x20>
    5e50:	77 23       	and	r23, r23
    5e52:	21 f0       	breq	.+8      	; 0x5e5c <__fp_mintl+0x10>
    5e54:	98 50       	subi	r25, 0x08	; 8
    5e56:	87 2b       	or	r24, r23
    5e58:	76 2f       	mov	r23, r22
    5e5a:	07 c0       	rjmp	.+14     	; 0x5e6a <__fp_mintl+0x1e>
    5e5c:	66 23       	and	r22, r22
    5e5e:	11 f4       	brne	.+4      	; 0x5e64 <__fp_mintl+0x18>
    5e60:	99 27       	eor	r25, r25
    5e62:	0d c0       	rjmp	.+26     	; 0x5e7e <__fp_mintl+0x32>
    5e64:	90 51       	subi	r25, 0x10	; 16
    5e66:	86 2b       	or	r24, r22
    5e68:	70 e0       	ldi	r23, 0x00	; 0
    5e6a:	60 e0       	ldi	r22, 0x00	; 0
    5e6c:	2a f0       	brmi	.+10     	; 0x5e78 <__fp_mintl+0x2c>
    5e6e:	9a 95       	dec	r25
    5e70:	66 0f       	add	r22, r22
    5e72:	77 1f       	adc	r23, r23
    5e74:	88 1f       	adc	r24, r24
    5e76:	da f7       	brpl	.-10     	; 0x5e6e <__fp_mintl+0x22>
    5e78:	88 0f       	add	r24, r24
    5e7a:	96 95       	lsr	r25
    5e7c:	87 95       	ror	r24
    5e7e:	97 f9       	bld	r25, 7
    5e80:	08 95       	ret

00005e82 <__fp_mpack>:
    5e82:	9f 3f       	cpi	r25, 0xFF	; 255
    5e84:	31 f0       	breq	.+12     	; 0x5e92 <__fp_mpack_finite+0xc>

00005e86 <__fp_mpack_finite>:
    5e86:	91 50       	subi	r25, 0x01	; 1
    5e88:	20 f4       	brcc	.+8      	; 0x5e92 <__fp_mpack_finite+0xc>
    5e8a:	87 95       	ror	r24
    5e8c:	77 95       	ror	r23
    5e8e:	67 95       	ror	r22
    5e90:	b7 95       	ror	r27
    5e92:	88 0f       	add	r24, r24
    5e94:	91 1d       	adc	r25, r1
    5e96:	96 95       	lsr	r25
    5e98:	87 95       	ror	r24
    5e9a:	97 f9       	bld	r25, 7
    5e9c:	08 95       	ret
    5e9e:	02 cf       	rjmp	.-508    	; 0x5ca4 <__fp_nan>

00005ea0 <__fp_rempio2>:
    5ea0:	2b df       	rcall	.-426    	; 0x5cf8 <__fp_splitA>
    5ea2:	e8 f3       	brcs	.-6      	; 0x5e9e <__fp_mpack_finite+0x18>
    5ea4:	e8 94       	clt
    5ea6:	e0 e0       	ldi	r30, 0x00	; 0
    5ea8:	bb 27       	eor	r27, r27
    5eaa:	9f 57       	subi	r25, 0x7F	; 127
    5eac:	f0 f0       	brcs	.+60     	; 0x5eea <__fp_rempio2+0x4a>
    5eae:	2a ed       	ldi	r18, 0xDA	; 218
    5eb0:	3f e0       	ldi	r19, 0x0F	; 15
    5eb2:	49 ec       	ldi	r20, 0xC9	; 201
    5eb4:	06 c0       	rjmp	.+12     	; 0x5ec2 <__fp_rempio2+0x22>
    5eb6:	ee 0f       	add	r30, r30
    5eb8:	bb 0f       	add	r27, r27
    5eba:	66 1f       	adc	r22, r22
    5ebc:	77 1f       	adc	r23, r23
    5ebe:	88 1f       	adc	r24, r24
    5ec0:	28 f0       	brcs	.+10     	; 0x5ecc <__fp_rempio2+0x2c>
    5ec2:	b2 3a       	cpi	r27, 0xA2	; 162
    5ec4:	62 07       	cpc	r22, r18
    5ec6:	73 07       	cpc	r23, r19
    5ec8:	84 07       	cpc	r24, r20
    5eca:	28 f0       	brcs	.+10     	; 0x5ed6 <__fp_rempio2+0x36>
    5ecc:	b2 5a       	subi	r27, 0xA2	; 162
    5ece:	62 0b       	sbc	r22, r18
    5ed0:	73 0b       	sbc	r23, r19
    5ed2:	84 0b       	sbc	r24, r20
    5ed4:	e3 95       	inc	r30
    5ed6:	9a 95       	dec	r25
    5ed8:	72 f7       	brpl	.-36     	; 0x5eb6 <__fp_rempio2+0x16>
    5eda:	80 38       	cpi	r24, 0x80	; 128
    5edc:	30 f4       	brcc	.+12     	; 0x5eea <__fp_rempio2+0x4a>
    5ede:	9a 95       	dec	r25
    5ee0:	bb 0f       	add	r27, r27
    5ee2:	66 1f       	adc	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	88 1f       	adc	r24, r24
    5ee8:	d2 f7       	brpl	.-12     	; 0x5ede <__fp_rempio2+0x3e>
    5eea:	90 48       	sbci	r25, 0x80	; 128
    5eec:	cc cf       	rjmp	.-104    	; 0x5e86 <__fp_mpack_finite>

00005eee <__fp_sinus>:
    5eee:	ef 93       	push	r30
    5ef0:	e0 ff       	sbrs	r30, 0
    5ef2:	06 c0       	rjmp	.+12     	; 0x5f00 <__fp_sinus+0x12>
    5ef4:	a2 ea       	ldi	r26, 0xA2	; 162
    5ef6:	2a ed       	ldi	r18, 0xDA	; 218
    5ef8:	3f e0       	ldi	r19, 0x0F	; 15
    5efa:	49 ec       	ldi	r20, 0xC9	; 201
    5efc:	5f eb       	ldi	r21, 0xBF	; 191
    5efe:	a3 dd       	rcall	.-1210   	; 0x5a46 <__addsf3x>
    5f00:	e2 de       	rcall	.-572    	; 0x5cc6 <__fp_round>
    5f02:	0f 90       	pop	r0
    5f04:	03 94       	inc	r0
    5f06:	01 fc       	sbrc	r0, 1
    5f08:	90 58       	subi	r25, 0x80	; 128
    5f0a:	e8 e7       	ldi	r30, 0x78	; 120
    5f0c:	f1 e0       	ldi	r31, 0x01	; 1
    5f0e:	00 c0       	rjmp	.+0      	; 0x5f10 <__fp_powsodd>

00005f10 <__fp_powsodd>:
    5f10:	9f 93       	push	r25
    5f12:	8f 93       	push	r24
    5f14:	7f 93       	push	r23
    5f16:	6f 93       	push	r22
    5f18:	ff 93       	push	r31
    5f1a:	ef 93       	push	r30
    5f1c:	9b 01       	movw	r18, r22
    5f1e:	ac 01       	movw	r20, r24
    5f20:	0c df       	rcall	.-488    	; 0x5d3a <__mulsf3>
    5f22:	ef 91       	pop	r30
    5f24:	ff 91       	pop	r31
    5f26:	05 d0       	rcall	.+10     	; 0x5f32 <__fp_powser>
    5f28:	2f 91       	pop	r18
    5f2a:	3f 91       	pop	r19
    5f2c:	4f 91       	pop	r20
    5f2e:	5f 91       	pop	r21
    5f30:	04 cf       	rjmp	.-504    	; 0x5d3a <__mulsf3>

00005f32 <__fp_powser>:
    5f32:	df 93       	push	r29
    5f34:	cf 93       	push	r28
    5f36:	1f 93       	push	r17
    5f38:	0f 93       	push	r16
    5f3a:	ff 92       	push	r15
    5f3c:	ef 92       	push	r14
    5f3e:	df 92       	push	r13
    5f40:	7b 01       	movw	r14, r22
    5f42:	8c 01       	movw	r16, r24
    5f44:	68 94       	set
    5f46:	05 c0       	rjmp	.+10     	; 0x5f52 <__fp_powser+0x20>
    5f48:	da 2e       	mov	r13, r26
    5f4a:	ef 01       	movw	r28, r30
    5f4c:	02 df       	rcall	.-508    	; 0x5d52 <__mulsf3x>
    5f4e:	fe 01       	movw	r30, r28
    5f50:	e8 94       	clt
    5f52:	a5 91       	lpm	r26, Z+
    5f54:	25 91       	lpm	r18, Z+
    5f56:	35 91       	lpm	r19, Z+
    5f58:	45 91       	lpm	r20, Z+
    5f5a:	55 91       	lpm	r21, Z+
    5f5c:	ae f3       	brts	.-22     	; 0x5f48 <__fp_powser+0x16>
    5f5e:	ef 01       	movw	r28, r30
    5f60:	72 dd       	rcall	.-1308   	; 0x5a46 <__addsf3x>
    5f62:	fe 01       	movw	r30, r28
    5f64:	97 01       	movw	r18, r14
    5f66:	a8 01       	movw	r20, r16
    5f68:	da 94       	dec	r13
    5f6a:	79 f7       	brne	.-34     	; 0x5f4a <__fp_powser+0x18>
    5f6c:	df 90       	pop	r13
    5f6e:	ef 90       	pop	r14
    5f70:	ff 90       	pop	r15
    5f72:	0f 91       	pop	r16
    5f74:	1f 91       	pop	r17
    5f76:	cf 91       	pop	r28
    5f78:	df 91       	pop	r29
    5f7a:	08 95       	ret

00005f7c <__udivmodhi4>:
    5f7c:	aa 1b       	sub	r26, r26
    5f7e:	bb 1b       	sub	r27, r27
    5f80:	51 e1       	ldi	r21, 0x11	; 17
    5f82:	07 c0       	rjmp	.+14     	; 0x5f92 <__udivmodhi4_ep>

00005f84 <__udivmodhi4_loop>:
    5f84:	aa 1f       	adc	r26, r26
    5f86:	bb 1f       	adc	r27, r27
    5f88:	a6 17       	cp	r26, r22
    5f8a:	b7 07       	cpc	r27, r23
    5f8c:	10 f0       	brcs	.+4      	; 0x5f92 <__udivmodhi4_ep>
    5f8e:	a6 1b       	sub	r26, r22
    5f90:	b7 0b       	sbc	r27, r23

00005f92 <__udivmodhi4_ep>:
    5f92:	88 1f       	adc	r24, r24
    5f94:	99 1f       	adc	r25, r25
    5f96:	5a 95       	dec	r21
    5f98:	a9 f7       	brne	.-22     	; 0x5f84 <__udivmodhi4_loop>
    5f9a:	80 95       	com	r24
    5f9c:	90 95       	com	r25
    5f9e:	bc 01       	movw	r22, r24
    5fa0:	cd 01       	movw	r24, r26
    5fa2:	08 95       	ret

00005fa4 <__divmodhi4>:
    5fa4:	97 fb       	bst	r25, 7
    5fa6:	09 2e       	mov	r0, r25
    5fa8:	07 26       	eor	r0, r23
    5faa:	0a d0       	rcall	.+20     	; 0x5fc0 <__divmodhi4_neg1>
    5fac:	77 fd       	sbrc	r23, 7
    5fae:	04 d0       	rcall	.+8      	; 0x5fb8 <__divmodhi4_neg2>
    5fb0:	e5 df       	rcall	.-54     	; 0x5f7c <__udivmodhi4>
    5fb2:	06 d0       	rcall	.+12     	; 0x5fc0 <__divmodhi4_neg1>
    5fb4:	00 20       	and	r0, r0
    5fb6:	1a f4       	brpl	.+6      	; 0x5fbe <__divmodhi4_exit>

00005fb8 <__divmodhi4_neg2>:
    5fb8:	70 95       	com	r23
    5fba:	61 95       	neg	r22
    5fbc:	7f 4f       	sbci	r23, 0xFF	; 255

00005fbe <__divmodhi4_exit>:
    5fbe:	08 95       	ret

00005fc0 <__divmodhi4_neg1>:
    5fc0:	f6 f7       	brtc	.-4      	; 0x5fbe <__divmodhi4_exit>
    5fc2:	90 95       	com	r25
    5fc4:	81 95       	neg	r24
    5fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc8:	08 95       	ret

00005fca <__udivmodsi4>:
    5fca:	a1 e2       	ldi	r26, 0x21	; 33
    5fcc:	1a 2e       	mov	r1, r26
    5fce:	aa 1b       	sub	r26, r26
    5fd0:	bb 1b       	sub	r27, r27
    5fd2:	fd 01       	movw	r30, r26
    5fd4:	0d c0       	rjmp	.+26     	; 0x5ff0 <__udivmodsi4_ep>

00005fd6 <__udivmodsi4_loop>:
    5fd6:	aa 1f       	adc	r26, r26
    5fd8:	bb 1f       	adc	r27, r27
    5fda:	ee 1f       	adc	r30, r30
    5fdc:	ff 1f       	adc	r31, r31
    5fde:	a2 17       	cp	r26, r18
    5fe0:	b3 07       	cpc	r27, r19
    5fe2:	e4 07       	cpc	r30, r20
    5fe4:	f5 07       	cpc	r31, r21
    5fe6:	20 f0       	brcs	.+8      	; 0x5ff0 <__udivmodsi4_ep>
    5fe8:	a2 1b       	sub	r26, r18
    5fea:	b3 0b       	sbc	r27, r19
    5fec:	e4 0b       	sbc	r30, r20
    5fee:	f5 0b       	sbc	r31, r21

00005ff0 <__udivmodsi4_ep>:
    5ff0:	66 1f       	adc	r22, r22
    5ff2:	77 1f       	adc	r23, r23
    5ff4:	88 1f       	adc	r24, r24
    5ff6:	99 1f       	adc	r25, r25
    5ff8:	1a 94       	dec	r1
    5ffa:	69 f7       	brne	.-38     	; 0x5fd6 <__udivmodsi4_loop>
    5ffc:	60 95       	com	r22
    5ffe:	70 95       	com	r23
    6000:	80 95       	com	r24
    6002:	90 95       	com	r25
    6004:	9b 01       	movw	r18, r22
    6006:	ac 01       	movw	r20, r24
    6008:	bd 01       	movw	r22, r26
    600a:	cf 01       	movw	r24, r30
    600c:	08 95       	ret

0000600e <__divmodsi4>:
    600e:	97 fb       	bst	r25, 7
    6010:	09 2e       	mov	r0, r25
    6012:	05 26       	eor	r0, r21
    6014:	0e d0       	rcall	.+28     	; 0x6032 <__divmodsi4_neg1>
    6016:	57 fd       	sbrc	r21, 7
    6018:	04 d0       	rcall	.+8      	; 0x6022 <__divmodsi4_neg2>
    601a:	d7 df       	rcall	.-82     	; 0x5fca <__udivmodsi4>
    601c:	0a d0       	rcall	.+20     	; 0x6032 <__divmodsi4_neg1>
    601e:	00 1c       	adc	r0, r0
    6020:	38 f4       	brcc	.+14     	; 0x6030 <__divmodsi4_exit>

00006022 <__divmodsi4_neg2>:
    6022:	50 95       	com	r21
    6024:	40 95       	com	r20
    6026:	30 95       	com	r19
    6028:	21 95       	neg	r18
    602a:	3f 4f       	sbci	r19, 0xFF	; 255
    602c:	4f 4f       	sbci	r20, 0xFF	; 255
    602e:	5f 4f       	sbci	r21, 0xFF	; 255

00006030 <__divmodsi4_exit>:
    6030:	08 95       	ret

00006032 <__divmodsi4_neg1>:
    6032:	f6 f7       	brtc	.-4      	; 0x6030 <__divmodsi4_exit>
    6034:	90 95       	com	r25
    6036:	80 95       	com	r24
    6038:	70 95       	com	r23
    603a:	61 95       	neg	r22
    603c:	7f 4f       	sbci	r23, 0xFF	; 255
    603e:	8f 4f       	sbci	r24, 0xFF	; 255
    6040:	9f 4f       	sbci	r25, 0xFF	; 255
    6042:	08 95       	ret

00006044 <sprintf>:
    6044:	ae e0       	ldi	r26, 0x0E	; 14
    6046:	b0 e0       	ldi	r27, 0x00	; 0
    6048:	e8 e2       	ldi	r30, 0x28	; 40
    604a:	f0 e3       	ldi	r31, 0x30	; 48
    604c:	0c 94 13 33 	jmp	0x6626	; 0x6626 <__prologue_saves__+0x1c>
    6050:	0d 89       	ldd	r16, Y+21	; 0x15
    6052:	1e 89       	ldd	r17, Y+22	; 0x16
    6054:	86 e0       	ldi	r24, 0x06	; 6
    6056:	8c 83       	std	Y+4, r24	; 0x04
    6058:	09 83       	std	Y+1, r16	; 0x01
    605a:	1a 83       	std	Y+2, r17	; 0x02
    605c:	8f ef       	ldi	r24, 0xFF	; 255
    605e:	9f e7       	ldi	r25, 0x7F	; 127
    6060:	8d 83       	std	Y+5, r24	; 0x05
    6062:	9e 83       	std	Y+6, r25	; 0x06
    6064:	9e 01       	movw	r18, r28
    6066:	27 5e       	subi	r18, 0xE7	; 231
    6068:	3f 4f       	sbci	r19, 0xFF	; 255
    606a:	ce 01       	movw	r24, r28
    606c:	01 96       	adiw	r24, 0x01	; 1
    606e:	6f 89       	ldd	r22, Y+23	; 0x17
    6070:	78 8d       	ldd	r23, Y+24	; 0x18
    6072:	a9 01       	movw	r20, r18
    6074:	0e 94 46 30 	call	0x608c	; 0x608c <vfprintf>
    6078:	2f 81       	ldd	r18, Y+7	; 0x07
    607a:	38 85       	ldd	r19, Y+8	; 0x08
    607c:	02 0f       	add	r16, r18
    607e:	13 1f       	adc	r17, r19
    6080:	f8 01       	movw	r30, r16
    6082:	10 82       	st	Z, r1
    6084:	2e 96       	adiw	r28, 0x0e	; 14
    6086:	e4 e0       	ldi	r30, 0x04	; 4
    6088:	0c 94 2f 33 	jmp	0x665e	; 0x665e <__epilogue_restores__+0x1c>

0000608c <vfprintf>:
    608c:	ab e0       	ldi	r26, 0x0B	; 11
    608e:	b0 e0       	ldi	r27, 0x00	; 0
    6090:	ec e4       	ldi	r30, 0x4C	; 76
    6092:	f0 e3       	ldi	r31, 0x30	; 48
    6094:	0c 94 05 33 	jmp	0x660a	; 0x660a <__prologue_saves__>
    6098:	3c 01       	movw	r6, r24
    609a:	2b 01       	movw	r4, r22
    609c:	5a 01       	movw	r10, r20
    609e:	fc 01       	movw	r30, r24
    60a0:	16 82       	std	Z+6, r1	; 0x06
    60a2:	17 82       	std	Z+7, r1	; 0x07
    60a4:	83 81       	ldd	r24, Z+3	; 0x03
    60a6:	81 fd       	sbrc	r24, 1
    60a8:	03 c0       	rjmp	.+6      	; 0x60b0 <vfprintf+0x24>
    60aa:	6f ef       	ldi	r22, 0xFF	; 255
    60ac:	7f ef       	ldi	r23, 0xFF	; 255
    60ae:	c6 c1       	rjmp	.+908    	; 0x643c <vfprintf+0x3b0>
    60b0:	9a e0       	ldi	r25, 0x0A	; 10
    60b2:	89 2e       	mov	r8, r25
    60b4:	1e 01       	movw	r2, r28
    60b6:	08 94       	sec
    60b8:	21 1c       	adc	r2, r1
    60ba:	31 1c       	adc	r3, r1
    60bc:	f3 01       	movw	r30, r6
    60be:	23 81       	ldd	r18, Z+3	; 0x03
    60c0:	f2 01       	movw	r30, r4
    60c2:	23 fd       	sbrc	r18, 3
    60c4:	85 91       	lpm	r24, Z+
    60c6:	23 ff       	sbrs	r18, 3
    60c8:	81 91       	ld	r24, Z+
    60ca:	2f 01       	movw	r4, r30
    60cc:	88 23       	and	r24, r24
    60ce:	09 f4       	brne	.+2      	; 0x60d2 <vfprintf+0x46>
    60d0:	b2 c1       	rjmp	.+868    	; 0x6436 <vfprintf+0x3aa>
    60d2:	85 32       	cpi	r24, 0x25	; 37
    60d4:	39 f4       	brne	.+14     	; 0x60e4 <vfprintf+0x58>
    60d6:	23 fd       	sbrc	r18, 3
    60d8:	85 91       	lpm	r24, Z+
    60da:	23 ff       	sbrs	r18, 3
    60dc:	81 91       	ld	r24, Z+
    60de:	2f 01       	movw	r4, r30
    60e0:	85 32       	cpi	r24, 0x25	; 37
    60e2:	29 f4       	brne	.+10     	; 0x60ee <vfprintf+0x62>
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	b3 01       	movw	r22, r6
    60e8:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    60ec:	e7 cf       	rjmp	.-50     	; 0x60bc <vfprintf+0x30>
    60ee:	98 2f       	mov	r25, r24
    60f0:	ff 24       	eor	r15, r15
    60f2:	ee 24       	eor	r14, r14
    60f4:	99 24       	eor	r9, r9
    60f6:	ff e1       	ldi	r31, 0x1F	; 31
    60f8:	ff 15       	cp	r31, r15
    60fa:	d0 f0       	brcs	.+52     	; 0x6130 <vfprintf+0xa4>
    60fc:	9b 32       	cpi	r25, 0x2B	; 43
    60fe:	69 f0       	breq	.+26     	; 0x611a <vfprintf+0x8e>
    6100:	9c 32       	cpi	r25, 0x2C	; 44
    6102:	28 f4       	brcc	.+10     	; 0x610e <vfprintf+0x82>
    6104:	90 32       	cpi	r25, 0x20	; 32
    6106:	59 f0       	breq	.+22     	; 0x611e <vfprintf+0x92>
    6108:	93 32       	cpi	r25, 0x23	; 35
    610a:	91 f4       	brne	.+36     	; 0x6130 <vfprintf+0xa4>
    610c:	0e c0       	rjmp	.+28     	; 0x612a <vfprintf+0x9e>
    610e:	9d 32       	cpi	r25, 0x2D	; 45
    6110:	49 f0       	breq	.+18     	; 0x6124 <vfprintf+0x98>
    6112:	90 33       	cpi	r25, 0x30	; 48
    6114:	69 f4       	brne	.+26     	; 0x6130 <vfprintf+0xa4>
    6116:	41 e0       	ldi	r20, 0x01	; 1
    6118:	24 c0       	rjmp	.+72     	; 0x6162 <vfprintf+0xd6>
    611a:	52 e0       	ldi	r21, 0x02	; 2
    611c:	f5 2a       	or	r15, r21
    611e:	84 e0       	ldi	r24, 0x04	; 4
    6120:	f8 2a       	or	r15, r24
    6122:	28 c0       	rjmp	.+80     	; 0x6174 <vfprintf+0xe8>
    6124:	98 e0       	ldi	r25, 0x08	; 8
    6126:	f9 2a       	or	r15, r25
    6128:	25 c0       	rjmp	.+74     	; 0x6174 <vfprintf+0xe8>
    612a:	e0 e1       	ldi	r30, 0x10	; 16
    612c:	fe 2a       	or	r15, r30
    612e:	22 c0       	rjmp	.+68     	; 0x6174 <vfprintf+0xe8>
    6130:	f7 fc       	sbrc	r15, 7
    6132:	29 c0       	rjmp	.+82     	; 0x6186 <vfprintf+0xfa>
    6134:	89 2f       	mov	r24, r25
    6136:	80 53       	subi	r24, 0x30	; 48
    6138:	8a 30       	cpi	r24, 0x0A	; 10
    613a:	70 f4       	brcc	.+28     	; 0x6158 <vfprintf+0xcc>
    613c:	f6 fe       	sbrs	r15, 6
    613e:	05 c0       	rjmp	.+10     	; 0x614a <vfprintf+0xbe>
    6140:	98 9c       	mul	r9, r8
    6142:	90 2c       	mov	r9, r0
    6144:	11 24       	eor	r1, r1
    6146:	98 0e       	add	r9, r24
    6148:	15 c0       	rjmp	.+42     	; 0x6174 <vfprintf+0xe8>
    614a:	e8 9c       	mul	r14, r8
    614c:	e0 2c       	mov	r14, r0
    614e:	11 24       	eor	r1, r1
    6150:	e8 0e       	add	r14, r24
    6152:	f0 e2       	ldi	r31, 0x20	; 32
    6154:	ff 2a       	or	r15, r31
    6156:	0e c0       	rjmp	.+28     	; 0x6174 <vfprintf+0xe8>
    6158:	9e 32       	cpi	r25, 0x2E	; 46
    615a:	29 f4       	brne	.+10     	; 0x6166 <vfprintf+0xda>
    615c:	f6 fc       	sbrc	r15, 6
    615e:	6b c1       	rjmp	.+726    	; 0x6436 <vfprintf+0x3aa>
    6160:	40 e4       	ldi	r20, 0x40	; 64
    6162:	f4 2a       	or	r15, r20
    6164:	07 c0       	rjmp	.+14     	; 0x6174 <vfprintf+0xe8>
    6166:	9c 36       	cpi	r25, 0x6C	; 108
    6168:	19 f4       	brne	.+6      	; 0x6170 <vfprintf+0xe4>
    616a:	50 e8       	ldi	r21, 0x80	; 128
    616c:	f5 2a       	or	r15, r21
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <vfprintf+0xe8>
    6170:	98 36       	cpi	r25, 0x68	; 104
    6172:	49 f4       	brne	.+18     	; 0x6186 <vfprintf+0xfa>
    6174:	f2 01       	movw	r30, r4
    6176:	23 fd       	sbrc	r18, 3
    6178:	95 91       	lpm	r25, Z+
    617a:	23 ff       	sbrs	r18, 3
    617c:	91 91       	ld	r25, Z+
    617e:	2f 01       	movw	r4, r30
    6180:	99 23       	and	r25, r25
    6182:	09 f0       	breq	.+2      	; 0x6186 <vfprintf+0xfa>
    6184:	b8 cf       	rjmp	.-144    	; 0x60f6 <vfprintf+0x6a>
    6186:	89 2f       	mov	r24, r25
    6188:	85 54       	subi	r24, 0x45	; 69
    618a:	83 30       	cpi	r24, 0x03	; 3
    618c:	18 f0       	brcs	.+6      	; 0x6194 <vfprintf+0x108>
    618e:	80 52       	subi	r24, 0x20	; 32
    6190:	83 30       	cpi	r24, 0x03	; 3
    6192:	38 f4       	brcc	.+14     	; 0x61a2 <vfprintf+0x116>
    6194:	44 e0       	ldi	r20, 0x04	; 4
    6196:	50 e0       	ldi	r21, 0x00	; 0
    6198:	a4 0e       	add	r10, r20
    619a:	b5 1e       	adc	r11, r21
    619c:	5f e3       	ldi	r21, 0x3F	; 63
    619e:	59 83       	std	Y+1, r21	; 0x01
    61a0:	0f c0       	rjmp	.+30     	; 0x61c0 <vfprintf+0x134>
    61a2:	93 36       	cpi	r25, 0x63	; 99
    61a4:	31 f0       	breq	.+12     	; 0x61b2 <vfprintf+0x126>
    61a6:	93 37       	cpi	r25, 0x73	; 115
    61a8:	79 f0       	breq	.+30     	; 0x61c8 <vfprintf+0x13c>
    61aa:	93 35       	cpi	r25, 0x53	; 83
    61ac:	09 f0       	breq	.+2      	; 0x61b0 <vfprintf+0x124>
    61ae:	56 c0       	rjmp	.+172    	; 0x625c <vfprintf+0x1d0>
    61b0:	20 c0       	rjmp	.+64     	; 0x61f2 <vfprintf+0x166>
    61b2:	f5 01       	movw	r30, r10
    61b4:	80 81       	ld	r24, Z
    61b6:	89 83       	std	Y+1, r24	; 0x01
    61b8:	42 e0       	ldi	r20, 0x02	; 2
    61ba:	50 e0       	ldi	r21, 0x00	; 0
    61bc:	a4 0e       	add	r10, r20
    61be:	b5 1e       	adc	r11, r21
    61c0:	61 01       	movw	r12, r2
    61c2:	01 e0       	ldi	r16, 0x01	; 1
    61c4:	10 e0       	ldi	r17, 0x00	; 0
    61c6:	12 c0       	rjmp	.+36     	; 0x61ec <vfprintf+0x160>
    61c8:	f5 01       	movw	r30, r10
    61ca:	c0 80       	ld	r12, Z
    61cc:	d1 80       	ldd	r13, Z+1	; 0x01
    61ce:	f6 fc       	sbrc	r15, 6
    61d0:	03 c0       	rjmp	.+6      	; 0x61d8 <vfprintf+0x14c>
    61d2:	6f ef       	ldi	r22, 0xFF	; 255
    61d4:	7f ef       	ldi	r23, 0xFF	; 255
    61d6:	02 c0       	rjmp	.+4      	; 0x61dc <vfprintf+0x150>
    61d8:	69 2d       	mov	r22, r9
    61da:	70 e0       	ldi	r23, 0x00	; 0
    61dc:	42 e0       	ldi	r20, 0x02	; 2
    61de:	50 e0       	ldi	r21, 0x00	; 0
    61e0:	a4 0e       	add	r10, r20
    61e2:	b5 1e       	adc	r11, r21
    61e4:	c6 01       	movw	r24, r12
    61e6:	0e 94 70 32 	call	0x64e0	; 0x64e0 <strnlen>
    61ea:	8c 01       	movw	r16, r24
    61ec:	5f e7       	ldi	r21, 0x7F	; 127
    61ee:	f5 22       	and	r15, r21
    61f0:	14 c0       	rjmp	.+40     	; 0x621a <vfprintf+0x18e>
    61f2:	f5 01       	movw	r30, r10
    61f4:	c0 80       	ld	r12, Z
    61f6:	d1 80       	ldd	r13, Z+1	; 0x01
    61f8:	f6 fc       	sbrc	r15, 6
    61fa:	03 c0       	rjmp	.+6      	; 0x6202 <vfprintf+0x176>
    61fc:	6f ef       	ldi	r22, 0xFF	; 255
    61fe:	7f ef       	ldi	r23, 0xFF	; 255
    6200:	02 c0       	rjmp	.+4      	; 0x6206 <vfprintf+0x17a>
    6202:	69 2d       	mov	r22, r9
    6204:	70 e0       	ldi	r23, 0x00	; 0
    6206:	42 e0       	ldi	r20, 0x02	; 2
    6208:	50 e0       	ldi	r21, 0x00	; 0
    620a:	a4 0e       	add	r10, r20
    620c:	b5 1e       	adc	r11, r21
    620e:	c6 01       	movw	r24, r12
    6210:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <strnlen_P>
    6214:	8c 01       	movw	r16, r24
    6216:	50 e8       	ldi	r21, 0x80	; 128
    6218:	f5 2a       	or	r15, r21
    621a:	f3 fe       	sbrs	r15, 3
    621c:	07 c0       	rjmp	.+14     	; 0x622c <vfprintf+0x1a0>
    621e:	1a c0       	rjmp	.+52     	; 0x6254 <vfprintf+0x1c8>
    6220:	80 e2       	ldi	r24, 0x20	; 32
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	b3 01       	movw	r22, r6
    6226:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    622a:	ea 94       	dec	r14
    622c:	8e 2d       	mov	r24, r14
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	08 17       	cp	r16, r24
    6232:	19 07       	cpc	r17, r25
    6234:	a8 f3       	brcs	.-22     	; 0x6220 <vfprintf+0x194>
    6236:	0e c0       	rjmp	.+28     	; 0x6254 <vfprintf+0x1c8>
    6238:	f6 01       	movw	r30, r12
    623a:	f7 fc       	sbrc	r15, 7
    623c:	85 91       	lpm	r24, Z+
    623e:	f7 fe       	sbrs	r15, 7
    6240:	81 91       	ld	r24, Z+
    6242:	6f 01       	movw	r12, r30
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	b3 01       	movw	r22, r6
    6248:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    624c:	e1 10       	cpse	r14, r1
    624e:	ea 94       	dec	r14
    6250:	01 50       	subi	r16, 0x01	; 1
    6252:	10 40       	sbci	r17, 0x00	; 0
    6254:	01 15       	cp	r16, r1
    6256:	11 05       	cpc	r17, r1
    6258:	79 f7       	brne	.-34     	; 0x6238 <vfprintf+0x1ac>
    625a:	ea c0       	rjmp	.+468    	; 0x6430 <vfprintf+0x3a4>
    625c:	94 36       	cpi	r25, 0x64	; 100
    625e:	11 f0       	breq	.+4      	; 0x6264 <vfprintf+0x1d8>
    6260:	99 36       	cpi	r25, 0x69	; 105
    6262:	69 f5       	brne	.+90     	; 0x62be <vfprintf+0x232>
    6264:	f7 fe       	sbrs	r15, 7
    6266:	08 c0       	rjmp	.+16     	; 0x6278 <vfprintf+0x1ec>
    6268:	f5 01       	movw	r30, r10
    626a:	20 81       	ld	r18, Z
    626c:	31 81       	ldd	r19, Z+1	; 0x01
    626e:	42 81       	ldd	r20, Z+2	; 0x02
    6270:	53 81       	ldd	r21, Z+3	; 0x03
    6272:	84 e0       	ldi	r24, 0x04	; 4
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	0a c0       	rjmp	.+20     	; 0x628c <vfprintf+0x200>
    6278:	f5 01       	movw	r30, r10
    627a:	80 81       	ld	r24, Z
    627c:	91 81       	ldd	r25, Z+1	; 0x01
    627e:	9c 01       	movw	r18, r24
    6280:	44 27       	eor	r20, r20
    6282:	37 fd       	sbrc	r19, 7
    6284:	40 95       	com	r20
    6286:	54 2f       	mov	r21, r20
    6288:	82 e0       	ldi	r24, 0x02	; 2
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	a8 0e       	add	r10, r24
    628e:	b9 1e       	adc	r11, r25
    6290:	9f e6       	ldi	r25, 0x6F	; 111
    6292:	f9 22       	and	r15, r25
    6294:	57 ff       	sbrs	r21, 7
    6296:	09 c0       	rjmp	.+18     	; 0x62aa <vfprintf+0x21e>
    6298:	50 95       	com	r21
    629a:	40 95       	com	r20
    629c:	30 95       	com	r19
    629e:	21 95       	neg	r18
    62a0:	3f 4f       	sbci	r19, 0xFF	; 255
    62a2:	4f 4f       	sbci	r20, 0xFF	; 255
    62a4:	5f 4f       	sbci	r21, 0xFF	; 255
    62a6:	e0 e8       	ldi	r30, 0x80	; 128
    62a8:	fe 2a       	or	r15, r30
    62aa:	ca 01       	movw	r24, r20
    62ac:	b9 01       	movw	r22, r18
    62ae:	a1 01       	movw	r20, r2
    62b0:	2a e0       	ldi	r18, 0x0A	; 10
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	0e 94 a7 32 	call	0x654e	; 0x654e <__ultoa_invert>
    62b8:	d8 2e       	mov	r13, r24
    62ba:	d2 18       	sub	r13, r2
    62bc:	40 c0       	rjmp	.+128    	; 0x633e <vfprintf+0x2b2>
    62be:	95 37       	cpi	r25, 0x75	; 117
    62c0:	29 f4       	brne	.+10     	; 0x62cc <vfprintf+0x240>
    62c2:	1f 2d       	mov	r17, r15
    62c4:	1f 7e       	andi	r17, 0xEF	; 239
    62c6:	2a e0       	ldi	r18, 0x0A	; 10
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	1d c0       	rjmp	.+58     	; 0x6306 <vfprintf+0x27a>
    62cc:	1f 2d       	mov	r17, r15
    62ce:	19 7f       	andi	r17, 0xF9	; 249
    62d0:	9f 36       	cpi	r25, 0x6F	; 111
    62d2:	61 f0       	breq	.+24     	; 0x62ec <vfprintf+0x260>
    62d4:	90 37       	cpi	r25, 0x70	; 112
    62d6:	20 f4       	brcc	.+8      	; 0x62e0 <vfprintf+0x254>
    62d8:	98 35       	cpi	r25, 0x58	; 88
    62da:	09 f0       	breq	.+2      	; 0x62de <vfprintf+0x252>
    62dc:	ac c0       	rjmp	.+344    	; 0x6436 <vfprintf+0x3aa>
    62de:	0f c0       	rjmp	.+30     	; 0x62fe <vfprintf+0x272>
    62e0:	90 37       	cpi	r25, 0x70	; 112
    62e2:	39 f0       	breq	.+14     	; 0x62f2 <vfprintf+0x266>
    62e4:	98 37       	cpi	r25, 0x78	; 120
    62e6:	09 f0       	breq	.+2      	; 0x62ea <vfprintf+0x25e>
    62e8:	a6 c0       	rjmp	.+332    	; 0x6436 <vfprintf+0x3aa>
    62ea:	04 c0       	rjmp	.+8      	; 0x62f4 <vfprintf+0x268>
    62ec:	28 e0       	ldi	r18, 0x08	; 8
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	0a c0       	rjmp	.+20     	; 0x6306 <vfprintf+0x27a>
    62f2:	10 61       	ori	r17, 0x10	; 16
    62f4:	14 fd       	sbrc	r17, 4
    62f6:	14 60       	ori	r17, 0x04	; 4
    62f8:	20 e1       	ldi	r18, 0x10	; 16
    62fa:	30 e0       	ldi	r19, 0x00	; 0
    62fc:	04 c0       	rjmp	.+8      	; 0x6306 <vfprintf+0x27a>
    62fe:	14 fd       	sbrc	r17, 4
    6300:	16 60       	ori	r17, 0x06	; 6
    6302:	20 e1       	ldi	r18, 0x10	; 16
    6304:	32 e0       	ldi	r19, 0x02	; 2
    6306:	17 ff       	sbrs	r17, 7
    6308:	08 c0       	rjmp	.+16     	; 0x631a <vfprintf+0x28e>
    630a:	f5 01       	movw	r30, r10
    630c:	60 81       	ld	r22, Z
    630e:	71 81       	ldd	r23, Z+1	; 0x01
    6310:	82 81       	ldd	r24, Z+2	; 0x02
    6312:	93 81       	ldd	r25, Z+3	; 0x03
    6314:	44 e0       	ldi	r20, 0x04	; 4
    6316:	50 e0       	ldi	r21, 0x00	; 0
    6318:	08 c0       	rjmp	.+16     	; 0x632a <vfprintf+0x29e>
    631a:	f5 01       	movw	r30, r10
    631c:	80 81       	ld	r24, Z
    631e:	91 81       	ldd	r25, Z+1	; 0x01
    6320:	bc 01       	movw	r22, r24
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	42 e0       	ldi	r20, 0x02	; 2
    6328:	50 e0       	ldi	r21, 0x00	; 0
    632a:	a4 0e       	add	r10, r20
    632c:	b5 1e       	adc	r11, r21
    632e:	a1 01       	movw	r20, r2
    6330:	0e 94 a7 32 	call	0x654e	; 0x654e <__ultoa_invert>
    6334:	d8 2e       	mov	r13, r24
    6336:	d2 18       	sub	r13, r2
    6338:	8f e7       	ldi	r24, 0x7F	; 127
    633a:	f8 2e       	mov	r15, r24
    633c:	f1 22       	and	r15, r17
    633e:	f6 fe       	sbrs	r15, 6
    6340:	0b c0       	rjmp	.+22     	; 0x6358 <vfprintf+0x2cc>
    6342:	5e ef       	ldi	r21, 0xFE	; 254
    6344:	f5 22       	and	r15, r21
    6346:	d9 14       	cp	r13, r9
    6348:	38 f4       	brcc	.+14     	; 0x6358 <vfprintf+0x2cc>
    634a:	f4 fe       	sbrs	r15, 4
    634c:	07 c0       	rjmp	.+14     	; 0x635c <vfprintf+0x2d0>
    634e:	f2 fc       	sbrc	r15, 2
    6350:	05 c0       	rjmp	.+10     	; 0x635c <vfprintf+0x2d0>
    6352:	8f ee       	ldi	r24, 0xEF	; 239
    6354:	f8 22       	and	r15, r24
    6356:	02 c0       	rjmp	.+4      	; 0x635c <vfprintf+0x2d0>
    6358:	1d 2d       	mov	r17, r13
    635a:	01 c0       	rjmp	.+2      	; 0x635e <vfprintf+0x2d2>
    635c:	19 2d       	mov	r17, r9
    635e:	f4 fe       	sbrs	r15, 4
    6360:	0d c0       	rjmp	.+26     	; 0x637c <vfprintf+0x2f0>
    6362:	fe 01       	movw	r30, r28
    6364:	ed 0d       	add	r30, r13
    6366:	f1 1d       	adc	r31, r1
    6368:	80 81       	ld	r24, Z
    636a:	80 33       	cpi	r24, 0x30	; 48
    636c:	19 f4       	brne	.+6      	; 0x6374 <vfprintf+0x2e8>
    636e:	99 ee       	ldi	r25, 0xE9	; 233
    6370:	f9 22       	and	r15, r25
    6372:	08 c0       	rjmp	.+16     	; 0x6384 <vfprintf+0x2f8>
    6374:	1f 5f       	subi	r17, 0xFF	; 255
    6376:	f2 fe       	sbrs	r15, 2
    6378:	05 c0       	rjmp	.+10     	; 0x6384 <vfprintf+0x2f8>
    637a:	03 c0       	rjmp	.+6      	; 0x6382 <vfprintf+0x2f6>
    637c:	8f 2d       	mov	r24, r15
    637e:	86 78       	andi	r24, 0x86	; 134
    6380:	09 f0       	breq	.+2      	; 0x6384 <vfprintf+0x2f8>
    6382:	1f 5f       	subi	r17, 0xFF	; 255
    6384:	0f 2d       	mov	r16, r15
    6386:	f3 fc       	sbrc	r15, 3
    6388:	14 c0       	rjmp	.+40     	; 0x63b2 <vfprintf+0x326>
    638a:	f0 fe       	sbrs	r15, 0
    638c:	0f c0       	rjmp	.+30     	; 0x63ac <vfprintf+0x320>
    638e:	1e 15       	cp	r17, r14
    6390:	10 f0       	brcs	.+4      	; 0x6396 <vfprintf+0x30a>
    6392:	9d 2c       	mov	r9, r13
    6394:	0b c0       	rjmp	.+22     	; 0x63ac <vfprintf+0x320>
    6396:	9d 2c       	mov	r9, r13
    6398:	9e 0c       	add	r9, r14
    639a:	91 1a       	sub	r9, r17
    639c:	1e 2d       	mov	r17, r14
    639e:	06 c0       	rjmp	.+12     	; 0x63ac <vfprintf+0x320>
    63a0:	80 e2       	ldi	r24, 0x20	; 32
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	b3 01       	movw	r22, r6
    63a6:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    63aa:	1f 5f       	subi	r17, 0xFF	; 255
    63ac:	1e 15       	cp	r17, r14
    63ae:	c0 f3       	brcs	.-16     	; 0x63a0 <vfprintf+0x314>
    63b0:	04 c0       	rjmp	.+8      	; 0x63ba <vfprintf+0x32e>
    63b2:	1e 15       	cp	r17, r14
    63b4:	10 f4       	brcc	.+4      	; 0x63ba <vfprintf+0x32e>
    63b6:	e1 1a       	sub	r14, r17
    63b8:	01 c0       	rjmp	.+2      	; 0x63bc <vfprintf+0x330>
    63ba:	ee 24       	eor	r14, r14
    63bc:	04 ff       	sbrs	r16, 4
    63be:	0f c0       	rjmp	.+30     	; 0x63de <vfprintf+0x352>
    63c0:	80 e3       	ldi	r24, 0x30	; 48
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	b3 01       	movw	r22, r6
    63c6:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    63ca:	02 ff       	sbrs	r16, 2
    63cc:	1d c0       	rjmp	.+58     	; 0x6408 <vfprintf+0x37c>
    63ce:	01 fd       	sbrc	r16, 1
    63d0:	03 c0       	rjmp	.+6      	; 0x63d8 <vfprintf+0x34c>
    63d2:	88 e7       	ldi	r24, 0x78	; 120
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	0e c0       	rjmp	.+28     	; 0x63f4 <vfprintf+0x368>
    63d8:	88 e5       	ldi	r24, 0x58	; 88
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	0b c0       	rjmp	.+22     	; 0x63f4 <vfprintf+0x368>
    63de:	80 2f       	mov	r24, r16
    63e0:	86 78       	andi	r24, 0x86	; 134
    63e2:	91 f0       	breq	.+36     	; 0x6408 <vfprintf+0x37c>
    63e4:	01 ff       	sbrs	r16, 1
    63e6:	02 c0       	rjmp	.+4      	; 0x63ec <vfprintf+0x360>
    63e8:	8b e2       	ldi	r24, 0x2B	; 43
    63ea:	01 c0       	rjmp	.+2      	; 0x63ee <vfprintf+0x362>
    63ec:	80 e2       	ldi	r24, 0x20	; 32
    63ee:	f7 fc       	sbrc	r15, 7
    63f0:	8d e2       	ldi	r24, 0x2D	; 45
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	b3 01       	movw	r22, r6
    63f6:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    63fa:	06 c0       	rjmp	.+12     	; 0x6408 <vfprintf+0x37c>
    63fc:	80 e3       	ldi	r24, 0x30	; 48
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	b3 01       	movw	r22, r6
    6402:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    6406:	9a 94       	dec	r9
    6408:	d9 14       	cp	r13, r9
    640a:	c0 f3       	brcs	.-16     	; 0x63fc <vfprintf+0x370>
    640c:	da 94       	dec	r13
    640e:	f1 01       	movw	r30, r2
    6410:	ed 0d       	add	r30, r13
    6412:	f1 1d       	adc	r31, r1
    6414:	80 81       	ld	r24, Z
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	b3 01       	movw	r22, r6
    641a:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    641e:	dd 20       	and	r13, r13
    6420:	a9 f7       	brne	.-22     	; 0x640c <vfprintf+0x380>
    6422:	06 c0       	rjmp	.+12     	; 0x6430 <vfprintf+0x3a4>
    6424:	80 e2       	ldi	r24, 0x20	; 32
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	b3 01       	movw	r22, r6
    642a:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <fputc>
    642e:	ea 94       	dec	r14
    6430:	ee 20       	and	r14, r14
    6432:	c1 f7       	brne	.-16     	; 0x6424 <vfprintf+0x398>
    6434:	43 ce       	rjmp	.-890    	; 0x60bc <vfprintf+0x30>
    6436:	f3 01       	movw	r30, r6
    6438:	66 81       	ldd	r22, Z+6	; 0x06
    643a:	77 81       	ldd	r23, Z+7	; 0x07
    643c:	cb 01       	movw	r24, r22
    643e:	2b 96       	adiw	r28, 0x0b	; 11
    6440:	e2 e1       	ldi	r30, 0x12	; 18
    6442:	0c 94 21 33 	jmp	0x6642	; 0x6642 <__epilogue_restores__>

00006446 <__eerd_block_x32a4>:
    6446:	e0 ec       	ldi	r30, 0xC0	; 192
    6448:	f1 e0       	ldi	r31, 0x01	; 1
    644a:	a7 85       	ldd	r26, Z+15	; 0x0f
    644c:	a7 fd       	sbrc	r26, 7
    644e:	fd cf       	rjmp	.-6      	; 0x644a <__eerd_block_x32a4+0x4>
    6450:	a4 85       	ldd	r26, Z+12	; 0x0c
    6452:	a8 60       	ori	r26, 0x08	; 8
    6454:	a4 87       	std	Z+12, r26	; 0x0c
    6456:	60 50       	subi	r22, 0x00	; 0
    6458:	70 4f       	sbci	r23, 0xF0	; 240
    645a:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <memcpy>

0000645e <__eewr_block_x32a4>:
    645e:	dc 01       	movw	r26, r24
    6460:	cb 01       	movw	r24, r22
    6462:	03 c0       	rjmp	.+6      	; 0x646a <__eewr_block_x32a4+0xc>
    6464:	2d 91       	ld	r18, X+
    6466:	0e 94 3a 32 	call	0x6474	; 0x6474 <__eewr_r18_x32a4>
    646a:	41 50       	subi	r20, 0x01	; 1
    646c:	50 40       	sbci	r21, 0x00	; 0
    646e:	d0 f7       	brcc	.-12     	; 0x6464 <__eewr_block_x32a4+0x6>
    6470:	08 95       	ret

00006472 <__eewr_byte_x32a4>:
    6472:	26 2f       	mov	r18, r22

00006474 <__eewr_r18_x32a4>:
    6474:	e0 ec       	ldi	r30, 0xC0	; 192
    6476:	f1 e0       	ldi	r31, 0x01	; 1
    6478:	37 85       	ldd	r19, Z+15	; 0x0f
    647a:	37 fd       	sbrc	r19, 7
    647c:	fd cf       	rjmp	.-6      	; 0x6478 <__eewr_r18_x32a4+0x4>
    647e:	34 85       	ldd	r19, Z+12	; 0x0c
    6480:	37 7f       	andi	r19, 0xF7	; 247
    6482:	34 87       	std	Z+12, r19	; 0x0c
    6484:	37 85       	ldd	r19, Z+15	; 0x0f
    6486:	31 ff       	sbrs	r19, 1
    6488:	09 c0       	rjmp	.+18     	; 0x649c <__eewr_r18_x32a4+0x28>
    648a:	36 e3       	ldi	r19, 0x36	; 54
    648c:	32 87       	std	Z+10, r19	; 0x0a
    648e:	38 ed       	ldi	r19, 0xD8	; 216
    6490:	34 bf       	out	0x34, r19	; 52
    6492:	31 e0       	ldi	r19, 0x01	; 1
    6494:	33 87       	std	Z+11, r19	; 0x0b
    6496:	37 85       	ldd	r19, Z+15	; 0x0f
    6498:	37 fd       	sbrc	r19, 7
    649a:	fd cf       	rjmp	.-6      	; 0x6496 <__eewr_r18_x32a4+0x22>
    649c:	33 e3       	ldi	r19, 0x33	; 51
    649e:	32 87       	std	Z+10, r19	; 0x0a
    64a0:	80 83       	st	Z, r24
    64a2:	91 83       	std	Z+1, r25	; 0x01
    64a4:	12 82       	std	Z+2, r1	; 0x02
    64a6:	24 83       	std	Z+4, r18	; 0x04
    64a8:	25 e3       	ldi	r18, 0x35	; 53
    64aa:	22 87       	std	Z+10, r18	; 0x0a
    64ac:	28 ed       	ldi	r18, 0xD8	; 216
    64ae:	31 e0       	ldi	r19, 0x01	; 1
    64b0:	24 bf       	out	0x34, r18	; 52
    64b2:	33 87       	std	Z+11, r19	; 0x0b
    64b4:	01 96       	adiw	r24, 0x01	; 1
    64b6:	08 95       	ret

000064b8 <strnlen_P>:
    64b8:	fc 01       	movw	r30, r24
    64ba:	05 90       	lpm	r0, Z+
    64bc:	61 50       	subi	r22, 0x01	; 1
    64be:	70 40       	sbci	r23, 0x00	; 0
    64c0:	01 10       	cpse	r0, r1
    64c2:	d8 f7       	brcc	.-10     	; 0x64ba <strnlen_P+0x2>
    64c4:	80 95       	com	r24
    64c6:	90 95       	com	r25
    64c8:	8e 0f       	add	r24, r30
    64ca:	9f 1f       	adc	r25, r31
    64cc:	08 95       	ret

000064ce <memcpy>:
    64ce:	fb 01       	movw	r30, r22
    64d0:	dc 01       	movw	r26, r24
    64d2:	02 c0       	rjmp	.+4      	; 0x64d8 <memcpy+0xa>
    64d4:	01 90       	ld	r0, Z+
    64d6:	0d 92       	st	X+, r0
    64d8:	41 50       	subi	r20, 0x01	; 1
    64da:	50 40       	sbci	r21, 0x00	; 0
    64dc:	d8 f7       	brcc	.-10     	; 0x64d4 <memcpy+0x6>
    64de:	08 95       	ret

000064e0 <strnlen>:
    64e0:	fc 01       	movw	r30, r24
    64e2:	61 50       	subi	r22, 0x01	; 1
    64e4:	70 40       	sbci	r23, 0x00	; 0
    64e6:	01 90       	ld	r0, Z+
    64e8:	01 10       	cpse	r0, r1
    64ea:	d8 f7       	brcc	.-10     	; 0x64e2 <strnlen+0x2>
    64ec:	80 95       	com	r24
    64ee:	90 95       	com	r25
    64f0:	8e 0f       	add	r24, r30
    64f2:	9f 1f       	adc	r25, r31
    64f4:	08 95       	ret

000064f6 <fputc>:
    64f6:	0f 93       	push	r16
    64f8:	1f 93       	push	r17
    64fa:	cf 93       	push	r28
    64fc:	df 93       	push	r29
    64fe:	8c 01       	movw	r16, r24
    6500:	eb 01       	movw	r28, r22
    6502:	8b 81       	ldd	r24, Y+3	; 0x03
    6504:	81 ff       	sbrs	r24, 1
    6506:	1b c0       	rjmp	.+54     	; 0x653e <fputc+0x48>
    6508:	82 ff       	sbrs	r24, 2
    650a:	0d c0       	rjmp	.+26     	; 0x6526 <fputc+0x30>
    650c:	2e 81       	ldd	r18, Y+6	; 0x06
    650e:	3f 81       	ldd	r19, Y+7	; 0x07
    6510:	8c 81       	ldd	r24, Y+4	; 0x04
    6512:	9d 81       	ldd	r25, Y+5	; 0x05
    6514:	28 17       	cp	r18, r24
    6516:	39 07       	cpc	r19, r25
    6518:	64 f4       	brge	.+24     	; 0x6532 <fputc+0x3c>
    651a:	e8 81       	ld	r30, Y
    651c:	f9 81       	ldd	r31, Y+1	; 0x01
    651e:	01 93       	st	Z+, r16
    6520:	e8 83       	st	Y, r30
    6522:	f9 83       	std	Y+1, r31	; 0x01
    6524:	06 c0       	rjmp	.+12     	; 0x6532 <fputc+0x3c>
    6526:	e8 85       	ldd	r30, Y+8	; 0x08
    6528:	f9 85       	ldd	r31, Y+9	; 0x09
    652a:	80 2f       	mov	r24, r16
    652c:	09 95       	icall
    652e:	89 2b       	or	r24, r25
    6530:	31 f4       	brne	.+12     	; 0x653e <fputc+0x48>
    6532:	8e 81       	ldd	r24, Y+6	; 0x06
    6534:	9f 81       	ldd	r25, Y+7	; 0x07
    6536:	01 96       	adiw	r24, 0x01	; 1
    6538:	8e 83       	std	Y+6, r24	; 0x06
    653a:	9f 83       	std	Y+7, r25	; 0x07
    653c:	02 c0       	rjmp	.+4      	; 0x6542 <fputc+0x4c>
    653e:	0f ef       	ldi	r16, 0xFF	; 255
    6540:	1f ef       	ldi	r17, 0xFF	; 255
    6542:	c8 01       	movw	r24, r16
    6544:	df 91       	pop	r29
    6546:	cf 91       	pop	r28
    6548:	1f 91       	pop	r17
    654a:	0f 91       	pop	r16
    654c:	08 95       	ret

0000654e <__ultoa_invert>:
    654e:	fa 01       	movw	r30, r20
    6550:	aa 27       	eor	r26, r26
    6552:	28 30       	cpi	r18, 0x08	; 8
    6554:	51 f1       	breq	.+84     	; 0x65aa <__ultoa_invert+0x5c>
    6556:	20 31       	cpi	r18, 0x10	; 16
    6558:	81 f1       	breq	.+96     	; 0x65ba <__ultoa_invert+0x6c>
    655a:	e8 94       	clt
    655c:	6f 93       	push	r22
    655e:	6e 7f       	andi	r22, 0xFE	; 254
    6560:	6e 5f       	subi	r22, 0xFE	; 254
    6562:	7f 4f       	sbci	r23, 0xFF	; 255
    6564:	8f 4f       	sbci	r24, 0xFF	; 255
    6566:	9f 4f       	sbci	r25, 0xFF	; 255
    6568:	af 4f       	sbci	r26, 0xFF	; 255
    656a:	b1 e0       	ldi	r27, 0x01	; 1
    656c:	3e d0       	rcall	.+124    	; 0x65ea <__ultoa_invert+0x9c>
    656e:	b4 e0       	ldi	r27, 0x04	; 4
    6570:	3c d0       	rcall	.+120    	; 0x65ea <__ultoa_invert+0x9c>
    6572:	67 0f       	add	r22, r23
    6574:	78 1f       	adc	r23, r24
    6576:	89 1f       	adc	r24, r25
    6578:	9a 1f       	adc	r25, r26
    657a:	a1 1d       	adc	r26, r1
    657c:	68 0f       	add	r22, r24
    657e:	79 1f       	adc	r23, r25
    6580:	8a 1f       	adc	r24, r26
    6582:	91 1d       	adc	r25, r1
    6584:	a1 1d       	adc	r26, r1
    6586:	6a 0f       	add	r22, r26
    6588:	71 1d       	adc	r23, r1
    658a:	81 1d       	adc	r24, r1
    658c:	91 1d       	adc	r25, r1
    658e:	a1 1d       	adc	r26, r1
    6590:	20 d0       	rcall	.+64     	; 0x65d2 <__ultoa_invert+0x84>
    6592:	09 f4       	brne	.+2      	; 0x6596 <__ultoa_invert+0x48>
    6594:	68 94       	set
    6596:	3f 91       	pop	r19
    6598:	2a e0       	ldi	r18, 0x0A	; 10
    659a:	26 9f       	mul	r18, r22
    659c:	11 24       	eor	r1, r1
    659e:	30 19       	sub	r19, r0
    65a0:	30 5d       	subi	r19, 0xD0	; 208
    65a2:	31 93       	st	Z+, r19
    65a4:	de f6       	brtc	.-74     	; 0x655c <__ultoa_invert+0xe>
    65a6:	cf 01       	movw	r24, r30
    65a8:	08 95       	ret
    65aa:	46 2f       	mov	r20, r22
    65ac:	47 70       	andi	r20, 0x07	; 7
    65ae:	40 5d       	subi	r20, 0xD0	; 208
    65b0:	41 93       	st	Z+, r20
    65b2:	b3 e0       	ldi	r27, 0x03	; 3
    65b4:	0f d0       	rcall	.+30     	; 0x65d4 <__ultoa_invert+0x86>
    65b6:	c9 f7       	brne	.-14     	; 0x65aa <__ultoa_invert+0x5c>
    65b8:	f6 cf       	rjmp	.-20     	; 0x65a6 <__ultoa_invert+0x58>
    65ba:	46 2f       	mov	r20, r22
    65bc:	4f 70       	andi	r20, 0x0F	; 15
    65be:	40 5d       	subi	r20, 0xD0	; 208
    65c0:	4a 33       	cpi	r20, 0x3A	; 58
    65c2:	18 f0       	brcs	.+6      	; 0x65ca <__ultoa_invert+0x7c>
    65c4:	49 5d       	subi	r20, 0xD9	; 217
    65c6:	31 fd       	sbrc	r19, 1
    65c8:	40 52       	subi	r20, 0x20	; 32
    65ca:	41 93       	st	Z+, r20
    65cc:	02 d0       	rcall	.+4      	; 0x65d2 <__ultoa_invert+0x84>
    65ce:	a9 f7       	brne	.-22     	; 0x65ba <__ultoa_invert+0x6c>
    65d0:	ea cf       	rjmp	.-44     	; 0x65a6 <__ultoa_invert+0x58>
    65d2:	b4 e0       	ldi	r27, 0x04	; 4
    65d4:	a6 95       	lsr	r26
    65d6:	97 95       	ror	r25
    65d8:	87 95       	ror	r24
    65da:	77 95       	ror	r23
    65dc:	67 95       	ror	r22
    65de:	ba 95       	dec	r27
    65e0:	c9 f7       	brne	.-14     	; 0x65d4 <__ultoa_invert+0x86>
    65e2:	00 97       	sbiw	r24, 0x00	; 0
    65e4:	61 05       	cpc	r22, r1
    65e6:	71 05       	cpc	r23, r1
    65e8:	08 95       	ret
    65ea:	9b 01       	movw	r18, r22
    65ec:	ac 01       	movw	r20, r24
    65ee:	0a 2e       	mov	r0, r26
    65f0:	06 94       	lsr	r0
    65f2:	57 95       	ror	r21
    65f4:	47 95       	ror	r20
    65f6:	37 95       	ror	r19
    65f8:	27 95       	ror	r18
    65fa:	ba 95       	dec	r27
    65fc:	c9 f7       	brne	.-14     	; 0x65f0 <__ultoa_invert+0xa2>
    65fe:	62 0f       	add	r22, r18
    6600:	73 1f       	adc	r23, r19
    6602:	84 1f       	adc	r24, r20
    6604:	95 1f       	adc	r25, r21
    6606:	a0 1d       	adc	r26, r0
    6608:	08 95       	ret

0000660a <__prologue_saves__>:
    660a:	2f 92       	push	r2
    660c:	3f 92       	push	r3
    660e:	4f 92       	push	r4
    6610:	5f 92       	push	r5
    6612:	6f 92       	push	r6
    6614:	7f 92       	push	r7
    6616:	8f 92       	push	r8
    6618:	9f 92       	push	r9
    661a:	af 92       	push	r10
    661c:	bf 92       	push	r11
    661e:	cf 92       	push	r12
    6620:	df 92       	push	r13
    6622:	ef 92       	push	r14
    6624:	ff 92       	push	r15
    6626:	0f 93       	push	r16
    6628:	1f 93       	push	r17
    662a:	cf 93       	push	r28
    662c:	df 93       	push	r29
    662e:	cd b7       	in	r28, 0x3d	; 61
    6630:	de b7       	in	r29, 0x3e	; 62
    6632:	ca 1b       	sub	r28, r26
    6634:	db 0b       	sbc	r29, r27
    6636:	0f b6       	in	r0, 0x3f	; 63
    6638:	f8 94       	cli
    663a:	de bf       	out	0x3e, r29	; 62
    663c:	0f be       	out	0x3f, r0	; 63
    663e:	cd bf       	out	0x3d, r28	; 61
    6640:	09 94       	ijmp

00006642 <__epilogue_restores__>:
    6642:	2a 88       	ldd	r2, Y+18	; 0x12
    6644:	39 88       	ldd	r3, Y+17	; 0x11
    6646:	48 88       	ldd	r4, Y+16	; 0x10
    6648:	5f 84       	ldd	r5, Y+15	; 0x0f
    664a:	6e 84       	ldd	r6, Y+14	; 0x0e
    664c:	7d 84       	ldd	r7, Y+13	; 0x0d
    664e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6650:	9b 84       	ldd	r9, Y+11	; 0x0b
    6652:	aa 84       	ldd	r10, Y+10	; 0x0a
    6654:	b9 84       	ldd	r11, Y+9	; 0x09
    6656:	c8 84       	ldd	r12, Y+8	; 0x08
    6658:	df 80       	ldd	r13, Y+7	; 0x07
    665a:	ee 80       	ldd	r14, Y+6	; 0x06
    665c:	fd 80       	ldd	r15, Y+5	; 0x05
    665e:	0c 81       	ldd	r16, Y+4	; 0x04
    6660:	1b 81       	ldd	r17, Y+3	; 0x03
    6662:	aa 81       	ldd	r26, Y+2	; 0x02
    6664:	b9 81       	ldd	r27, Y+1	; 0x01
    6666:	ce 0f       	add	r28, r30
    6668:	d1 1d       	adc	r29, r1
    666a:	0f b6       	in	r0, 0x3f	; 63
    666c:	f8 94       	cli
    666e:	de bf       	out	0x3e, r29	; 62
    6670:	0f be       	out	0x3f, r0	; 63
    6672:	cd bf       	out	0x3d, r28	; 61
    6674:	ed 01       	movw	r28, r26
    6676:	08 95       	ret

00006678 <_exit>:
    6678:	f8 94       	cli

0000667a <__stop_program>:
    667a:	ff cf       	rjmp	.-2      	; 0x667a <__stop_program>
